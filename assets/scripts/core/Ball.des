## Ball.ts 脚本逻辑描述

### 核心功能
Ball管理游戏中球的物理行为，实现完美弹跳效果，速度控制和碰撞检测，确保球能在游戏区域内正确反弹。

### 主要组件
1. **物理材质**: 完美弹跳(摩擦力=0, 恢复系数=1.0)
2. **速度管理**: 维持恒定球速，防止因碰撞产生的速度衰减
3. **碰撞处理**: 与挡板、砖块、墙壁的碰撞检测
4. **初始发射**: 游戏开始时的球发射机制

### 关键属性
```typescript
public initialSpeed: number = 300   // 初始球速
private _rigidBody: RigidBody2D     // 刚体组件引用
private _targetSpeed: number        // 目标速度
```

### 关键方法
- `onLoad()`: 初始化物理组件和材质设置
- `start()`: 设置初始发射方向和速度
- `update()`: 每帧检查并维持球速
- `launch()`: 发射球到指定方向
- `maintainSpeed()`: 保持球的速度恒定

### 物理特性
- **刚体类型**: DYNAMIC (动态，受物理力影响)
- **碰撞形状**: CircleCollider2D (圆形碰撞器)
- **物理材质**: 摩擦力=0.0, 恢复系数=1.0 (完美弹跳)
- **速度维持**: 通过脚本确保球速不因碰撞而改变

### Cocos Creator绑定说明

#### 1. 预制体创建
- 创建新节点，命名为"Ball"  
- 添加Sprite组件用于视觉呈现
- 添加RigidBody2D组件，类型设为DYNAMIC
- 添加CircleCollider2D组件用于碰撞检测
- 将Ball.ts脚本添加到节点

#### 2. 刚体设置
在RigidBody2D组件中：
- **Type**: Dynamic (动态刚体)
- **Collision Group**: Ball  
- **Collision Mask**: Paddle | Brick | Wall (与挡板、砖块、墙壁碰撞)
- **Linear Damping**: 0 (无线性阻尼)
- **Angular Damping**: 0 (无角度阻尼)

#### 3. 碰撞器设置
在CircleCollider2D组件中：
- **Radius**: 根据球的大小调整，建议10-15
- **Is Sensor**: false (实体碰撞)

#### 4. 物理材质设置
创建新的PhysicsMaterial资源：
- **Friction**: 0.0 (无摩擦力)
- **Restitution**: 1.0 (完全弹性碰撞)
- 将此材质分配给CircleCollider2D组件

#### 5. Sprite设置
在Sprite组件中：
- 设置颜色为白色或分配球贴图
- **Size Mode**: Custom  
- **Custom Size**: 圆形，建议直径20-30

#### 6. 脚本参数设置
在Ball组件的Inspector面板中：
- **Initial Speed**: 300 (初始速度，可根据游戏难度调整)

#### 7. 场景放置
- 通常由GameManager动态实例化，而非直接放置在场景中
- 如需预放置，位置设置在挡板正上方
- 确保球的初始位置在游戏区域内

#### 8. 物理世界设置
确保项目物理设置中：
- **Gravity**: (0, -320) 或适当的重力值
- **Physics Time Step**: 1/60 用于稳定的物理模拟