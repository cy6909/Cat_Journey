## ProceduralLevelGenerator.ts 脚本逻辑描述

### 核心功能
ProceduralLevelGenerator是程序化关卡生成器，负责根据难度参数和关卡类型自动生成多样化的砖块布局，支持普通、精英、Boss等不同类型关卡的生成。

### 主要系统
1. **难度计算系统**: 基于章节和关卡编号计算动态难度
2. **砖块权重分配**: 不同关卡类型有不同的砖块类型分布
3. **布局模式生成**: 对称、走廊、螺旋等多种布局模式
4. **属性缩放系统**: 根据难度自动调整砖块生命值和分数

### 关键枚举和接口
```typescript
export enum LevelType {
    NORMAL = 'normal',      // 普通关卡
    ELITE = 'elite',        // 精英关卡
    BOSS = 'boss',         // Boss关卡
    HIDDEN_BOSS = 'hidden_boss', // 隐藏Boss
    EVENT = 'event',       // 随机事件
    SHOP = 'shop',         // 商店
    TREASURE = 'treasure'  // 宝藏房间
}

export interface LevelTemplate {
    name: string;              // 关卡名称
    difficulty: number;        // 难度系数
    brickCount: number;        // 砖块数量
    specialBrickRatio: number; // 特殊砖块比例
    bossLevel: boolean;        // 是否为Boss关卡
    eliteLevel: boolean;       // 是否为精英关卡
    brickTypeWeights: Map<BrickType, number>; // 砖块类型权重
}
```

### 关键属性
```typescript
public gridWidth: number = 8        // 网格宽度
public gridHeight: number = 6       // 网格高度
public brickSpacing: number = 65    // 砖块间距
public startY: number = 200         // 起始Y坐标
```

### 难度计算系统
- **基础难度**: 每章节基础难度递增50%
- **关卡进度**: 同章节内难度线性增长
- **类型加成**: 精英关卡1.3倍，Boss关卡1.5倍，隐藏Boss 2.0倍
- **属性缩放**: 砖块生命值和分数随难度动态调整

### 砖块分布策略

#### 普通关卡 (Normal Level)
- **普通砖块**: 40% (基础砖块，简单清除)
- **强化砖块**: 30% (需要多次击打)
- **经验砖块**: 15% (提供额外经验值)
- **特殊砖块**: 15% (爆炸、电击、冰冻等)

#### 精英关卡 (Elite Level)  
- **普通砖块**: 20% (减少基础砖块)
- **强化砖块**: 40% (增加耐久砖块)
- **特殊砖块**: 30% (更多机制砖块)
- **稀有砖块**: 10% (护盾、重力、相位等)

#### Boss关卡 (Boss Level)
- **普通砖块**: 10% (极少基础砖块)
- **强化砖块**: 30% (坚固防护)
- **特殊砖块**: 40% (复杂机制)
- **稀有砖块**: 20% (高级效果砖块)

### 布局模式系统

#### 1. 对称模式 (Symmetric Pattern)
```typescript
generateSymmetricPattern(template: LevelTemplate): Vec3[]
```
- 左右对称的砖块布局
- 适合普通关卡，平衡性好
- 70%概率在每个位置放置砖块

#### 2. 走廊模式 (Corridor Pattern)
```typescript
generateCorridorPattern(template: LevelTemplate): Vec3[]
```
- 创建通道和墙壁结构
- 适合精英关卡，增加策略性
- 边界和特定位置形成墙壁

#### 3. 螺旋模式 (Spiral Pattern)
```typescript
generateSpiralPattern(template: LevelTemplate): Vec3[]
```
- 从中心向外螺旋展开
- 适合Boss关卡，独特视觉效果
- 动态步长控制螺旋密度

### 关键方法

#### 生成控制方法
- `generateLevel(levelType, chapter, levelNumber)`: 主生成接口
- `placeBricksFromTemplate(template, parent)`: 根据模板放置砖块
- `calculateDifficulty(chapter, levelNumber)`: 计算关卡难度

#### 砖块创建方法
- `selectBrickType(weights, difficulty)`: 基于权重选择砖块类型
- `createBrick(brickType, position, difficulty)`: 创建具体砖块实例
- `getBaseHealthForBrickType(brickType)`: 获取砖块基础生命值
- `getBaseScoreForBrickType(brickType)`: 获取砖块基础分数

### Cocos Creator绑定说明

#### 1. 组件设置
- 在GameManager或LevelManager节点上添加ProceduralLevelGenerator脚本
- **Enhanced Brick Prefab**: 拖拽EnhancedBrick预制体引用
- **Grid Width**: 8 (推荐网格宽度)
- **Grid Height**: 6 (推荐网格高度)  
- **Brick Spacing**: 65 (砖块间距，像素)
- **Start Y**: 200 (起始Y坐标)

#### 2. 使用示例
```typescript
// 在GameManager中使用
const generator = this.getComponent(ProceduralLevelGenerator);
const template = generator.generateLevel(LevelType.NORMAL, 1, 5);
const bricks = generator.placeBricksFromTemplate(template, this.node);

// 使用特定布局模式
const positions = generator.generateSymmetricPattern(template);
```

#### 3. 集成到游戏流程
```typescript
public startNewLevel(chapter: number, level: number, type: LevelType): void {
    // 清除旧砖块
    this.clearExistingBricks();
    
    // 生成新关卡
    const template = this._generator.generateLevel(type, chapter, level);
    const bricks = this._generator.placeBricksFromTemplate(template, this._brickParent);
    
    // 更新游戏状态
    this.updateGameState(template);
}
```

#### 4. 难度平衡建议
```typescript
// 章节难度建议
Chapter 1: difficulty = 1.0 - 1.5
Chapter 2: difficulty = 1.5 - 2.25  
Chapter 3: difficulty = 2.25 - 3.375

// 关卡类型修正
Normal: difficulty * 1.0
Elite: difficulty * 1.3
Boss: difficulty * 1.5
Hidden Boss: difficulty * 2.0
```

#### 5. 性能优化
- 预生成砖块池，避免频繁实例化
- 使用对象池管理砖块生命周期
- 批量设置砖块属性，减少组件访问

#### 6. 扩展性设计
- 新增布局模式只需实现对应的Pattern方法
- 砖块权重可通过配置文件外部化
- 支持自定义难度曲线和缩放函数
- 可添加季节性或主题性关卡变体

#### 7. 调试功能
```typescript
// 调试模式显示关卡信息
console.log(`Generated ${template.name}:`, {
    difficulty: template.difficulty,
    brickCount: template.brickCount,
    specialRatio: template.specialBrickRatio
});
```

#### 8. 与其他系统集成
- **BossController**: Boss关卡时同时生成Boss实体
- **RelicManager**: 根据玩家遗物调整生成参数  
- **LevelManager**: 管理关卡流程和状态转换
- **MapManager**: 提供关卡类型和路径信息