## EnhancedBossController.ts 脚本逻辑描述

### 核心功能
EnhancedBossController是增强版Boss控制器，实现了10种不同机制的Boss类型，每种都有独特的攻击模式、移动方式和特殊能力，支持多阶段战斗和章节难度缩放。

### Boss类型系统 (10种)

#### 1. 守护墙Boss (GUARDIAN_WALL)
- **特色**: 防御型Boss，专注于保护和修复砖块
- **攻击模式**: 
  - Shield Regeneration: 修复受损砖块
  - Defensive Burst: 创建保护屏障
- **移动**: 静止不动
- **颜色**: 蓝色 (防护象征)

#### 2. 风暴召唤者 (STORM_CALLER)  
- **特色**: 控制气流和闪电，影响球的轨迹
- **攻击模式**:
  - Wind Gust: 改变所有球的方向
  - Lightning Strike: 直接攻击挡板
  - Tornado: 创建旋转力场
- **移动**: 浮动移动模式
- **颜色**: 灰色 (风暴象征)

#### 3. 砖块生成器 (BRICK_SPAWNER)
- **特色**: 持续生成新砖块，增加关卡难度
- **攻击模式**:
  - Spawn Basic Bricks: 生成普通砖块
  - Spawn Elite Bricks: 生成特殊砖块
  - Brick Rain: 大量砖块从天而降
- **移动**: 水平移动
- **颜色**: 棕色 (砖块象征)

#### 4. 重力主宰 (GRAVITY_MASTER)
- **特色**: 控制重力方向和强度
- **攻击模式**:
  - Gravity Flip: 翻转重力方向
  - Gravity Well: 创建重力井
  - Zero Gravity: 暂时取消重力
- **移动**: 水平移动
- **颜色**: 紫色 (神秘力量)

#### 5. 时间操控者 (TIME_MANIPULATOR)
- **特色**: 控制时间流速，影响游戏节奏
- **攻击模式**:
  - Time Slow: 减慢游戏时间
  - Time Acceleration: 加速游戏时间
  - Temporal Rift: 创建时空裂缝
- **移动**: 水平移动
- **颜色**: 金色 (时间象征)

#### 6. 护盾生成器 (SHIELD_GENERATOR)
- **特色**: 为砖块提供护盾保护
- **攻击模式**:
  - Shield All Bricks: 给所有砖块加护盾
  - Energy Pulse: 释放能量脉冲
- **移动**: 水平移动
- **颜色**: 青色 (能量护盾)

#### 7. 多相位Boss (MULTI_PHASE)
- **特色**: 根据血量变化形态和攻击方式
- **攻击模式**:
  - Phase Attack: 根据当前阶段的特定攻击
- **相位系统**: 4个不同阶段，每阶段有不同能力
- **移动**: 水平移动
- **颜色**: 洋红色 (多变象征)

#### 8. 传送者 (TELEPORTER)
- **特色**: 瞬移能力，传送自己和游戏对象
- **攻击模式**:
  - Teleport Self: 传送到随机位置
  - Teleport Bricks: 重新排列砖块位置
  - Teleport Ball: 传送球到随机位置
- **移动**: 传送移动
- **颜色**: 橙色 (传送能量)

#### 9. 元素混沌 (ELEMENTAL_CHAOS)
- **特色**: 随机使用不同元素攻击
- **攻击模式**:
  - Random Elemental: 随机元素攻击
  - Elemental Storm: 多元素风暴
- **特殊**: 颜色持续变化表示当前元素
- **移动**: 水平移动
- **颜色**: 随机变化 (火红/冰蓝/电黄/毒绿)

#### 10. 镜像Boss (MIRROR_BOSS)
- **特色**: 复制和模仿玩家行为
- **攻击模式**:
  - Mirror Paddle: 镜像挡板移动
  - Copy Ball: 复制球的运动轨迹
- **移动**: 镜像玩家移动
- **颜色**: 银色 (镜面效果)

### 相位系统

#### 多阶段战斗
```typescript
enum BossPhase {
    PHASE_1 = 0,    // 100%-75% 血量
    PHASE_2 = 1,    // 75%-50% 血量  
    PHASE_3 = 2,    // 50%-25% 血量
    ENRAGED = 3     // 25%-0% 血量
}
```

#### 阶段转换效果
- **攻击频率**: 每个阶段攻击速度提升20%
- **攻击伤害**: 每个阶段伤害提升30%
- **狂暴模式**: 最终阶段攻击力1.5倍，攻击间隔0.7倍
- **视觉反馈**: 阶段转换时Boss闪烁红色

### 章节难度缩放

#### 属性缩放公式
```typescript
chapterMultiplier = 1 + (chapter - 1) * 0.5
maxHealth *= chapterMultiplier
attackPower *= chapterMultiplier
```

#### 章节建议数值
- **第一章**: 基础数值 (血量100, 攻击10)
- **第二章**: 1.5倍数值 (血量150, 攻击15)  
- **第三章**: 2.0倍数值 (血量200, 攻击20)

### 攻击模式系统

#### 攻击模式接口
```typescript
interface BossAttackPattern {
    name: string;        // 攻击名称
    cooldown: number;    // 冷却时间
    damage: number;      // 伤害数值
    range: number;       // 攻击范围
    execute: () => void; // 执行函数
}
```

#### 攻击优先级
- 按冷却时间顺序执行攻击
- 同一时间只能执行一个攻击
- 攻击执行期间Boss无法移动

### Cocos Creator绑定说明

#### 1. 预制体创建
基础Boss预制体配置：
- **Sprite**: Boss外观，支持颜色变化
- **RigidBody2D**: KINEMATIC类型，受脚本控制
- **BoxCollider2D**: 碰撞检测，Group=Boss
- **EnhancedBossController**: 主控制脚本

#### 2. 参数配置
在EnhancedBossController组件中：
- **Boss Type**: 选择10种Boss类型之一
- **Max Health**: 基础血量 (建议100-200)
- **Attack Power**: 基础攻击力 (建议10-25)
- **Move Speed**: 移动速度 (建议100-200)
- **Chapter**: 当前章节 (1-3)

#### 3. 预制体引用
- **Brick Prefab**: 用于生成砖块的预制体
- **Projectile Prefab**: 用于发射攻击的预制体

#### 4. 场景集成
```typescript
// 在关卡开始时生成Boss
public spawnBoss(bossType: BossType, chapter: number): void {
    const boss = instantiate(this.bossPrefab);
    const controller = boss.getComponent(EnhancedBossController);
    
    if (controller) {
        controller.bossType = bossType;
        controller.chapter = chapter;
    }
    
    boss.setParent(this.node);
    boss.setWorldPosition(0, 300, 0); // Boss起始位置
}
```

#### 5. GameManager集成
需要在GameManager中添加Boss相关方法：
```typescript
public onBossDefeated(bossType: BossType, chapter: number): void {
    console.log(`Chapter ${chapter} boss defeated!`);
    this.triggerLevelComplete();
    this.grantBossReward(bossType);
}
```

#### 6. UI集成
Boss血条显示：
```typescript
// 监听Boss血量变化
const bossController = boss.getComponent(EnhancedBossController);
this.updateBossHealthBar(bossController.currentHealth, bossController.maxHealthValue);
```

#### 7. 碰撞标签设置
确保正确的碰撞检测：
- **Boss**: Tag = 5000
- **Ball**: Tag = 1000 (可伤害Boss)
- **Laser**: Tag = 6000 (可伤害Boss)
- **Paddle**: Tag = 3000 (可被Boss攻击)

#### 8. 性能优化
- 使用对象池管理Boss生成的临时对象
- 合理设置攻击冷却时间，避免过于频繁的攻击
- 及时清理Boss死亡后的生成对象

### 扩展Boss类型
添加新Boss类型的步骤：
1. 在BossType枚举中添加新类型
2. 在initializeBossType()中添加初始化逻辑
3. 实现特定的攻击模式方法
4. 设置Boss特有的颜色和移动方式
5. 更新setBossColor()方法

### 平衡性考虑
- Boss血量应该是普通砖块总血量的2-3倍
- 攻击频率不应过高，给玩家反应时间
- 特殊能力应该有明显的视觉/音频提示
- 狂暴阶段应该有足够挑战性但不至于无法战胜

### 调试功能
```typescript
// 调试模式下快速测试不同Boss
public debugSetBossType(type: BossType): void {
    this.bossType = type;
    this.initializeBossType();
}

// 调试Boss血量
public debugSetHealth(health: number): void {
    this._currentHealth = Math.min(health, this.maxHealth);
}
```