# LevelSoundManager.ts 和 AdvancedEffectSystem.ts 使用说明

## 功能概述

这两个系统共同构成了游戏的音效和视觉特效管理框架，为Cat-Conquest游戏提供沉浸式的视听体验。

## LevelSoundManager - 音效管理系统

### 核心功能

1. **分层音效管理**
   - **soundEffectSource**: 主要音效播放源
   - **ambientSource**: 环境音效循环播放
   - **uiSource**: UI界面音效专用源

2. **音效池管理**
   - 支持最多8个并发音效
   - 智能优先级管理
   - 防止音效冲突和重叠

3. **空间音效**
   - 基于位置的音量衰减
   - 立体声效果模拟
   - 距离感知音效处理

### 音效类型配置

#### 游戏核心音效
- `BALL_BOUNCE_PADDLE`: 弹球撞击挡板，支持随机音调
- `BALL_BOUNCE_BRICK`: 弹球撞击砖块，空间音效定位
- `BALL_LOST`: 弹球丢失，低沉音调表现失落感

#### 砖块交互音效
- `BRICK_HIT`: 砖块被击中，轻微随机音调
- `BRICK_DESTROYED`: 砖块被摧毁，清脆破碎声
- `BRICK_EXPLOSION`: 爆炸砖块，高优先级强力音效
- `BRICK_ELECTRIC`: 电击砖块，高音调电流声

#### Boss战斗音效
- `BOSS_APPEAR`: Boss登场，延迟0.5秒淡入
- `BOSS_DEFEATED`: Boss击败，淡出效果庆祝感

#### 环境氛围音效
- `AMBIENT_WIND`: 风声循环，低音量背景
- `AMBIENT_SPARKS`: 电火花循环，中等音量
- `AMBIENT_FIRE`: 火焰循环，适合第三章

### 主要方法

```typescript
// 播放基础音效
playSoundEffect(effectType: SoundEffectType, position?: {x: number, y: number}): boolean

// 播放环境音效循环
playAmbientLoop(effectType: SoundEffectType): boolean

// 播放UI音效
playUISound(effectType: SoundEffectType): boolean

// 快捷方法
playBallBounce(position?: {x: number, y: number}): void
playBrickDestroyed(position?: {x: number, y: number}): void
playUIClick(): void
setAmbientForChapter(chapter: number): void
```

### 在Cocos Creator中的绑定

1. **创建LevelSoundManager组件**
   ```
   1. 在GameScene中创建Node "SoundManager"
   2. 拖拽LevelSoundManager脚本到该Node
   3. 为Node添加3个子Node:
      - "SoundEffectSource" (添加AudioSource组件)
      - "AmbientSource" (添加AudioSource组件)  
      - "UISource" (添加AudioSource组件)
   4. 在Inspector中绑定三个AudioSource引用
   ```

2. **配置音频资源**
   ```
   resources/audio/
   ├── ui/
   │   ├── click.mp3
   │   ├── hover.mp3
   │   └── success.mp3
   ├── gameplay/
   │   ├── ball_bounce_paddle.mp3
   │   ├── ball_bounce_brick.mp3
   │   ├── brick_hit.mp3
   │   └── brick_destroyed.mp3
   ├── boss/
   │   ├── boss_appear.mp3
   │   └── boss_defeated.mp3
   └── ambient/
       ├── wind_loop.mp3
       ├── sparks_loop.mp3
       └── fire_loop.mp3
   ```

3. **与游戏逻辑集成**
   ```typescript
   // 在Ball.ts碰撞检测中
   onCollisionEnter(other: Collider2D): void {
       const soundManager = LevelSoundManager.getInstance();
       if (soundManager) {
           const position = { x: this.node.position.x, y: this.node.position.y };
           soundManager.playBallBounce(position);
       }
   }
   
   // 在GameManager.ts关卡开始时
   onLevelStart(): void {
       const soundManager = LevelSoundManager.getInstance();
       if (soundManager) {
           soundManager.setAmbientForChapter(this.currentChapter);
       }
   }
   ```

## AdvancedEffectSystem - 高级视觉特效系统

### 核心功能

1. **可叠加特效系统**
   - 支持同一对象多种特效叠加
   - 智能叠加层级管理(最多5层)
   - 特效强度随叠加层级递增

2. **多类型特效支持**
   - **粒子特效**: 基于ParticleSystem2D的复杂粒子系统
   - **复合特效**: 多层特效组合
   - **着色器特效**: 预留着色器特效接口
   - **发光特效**: 程序化生成的发光效果

3. **动态画质调节**
   - 3档画质等级(低/中/高)
   - 自动调节粒子数量和复杂度
   - 性能友好的特效降级

### 特效类型详解

#### 弹球特效组合
- `BALL_FIRE_TRAIL`: 火焰尾迹，100个粒子，向上重力
- `BALL_ICE_AURA`: 冰霜光环，环形发射，持续2秒
- `BALL_ELECTRIC_SPARK`: 电击火花，锥形发射，快速消散
- `BALL_POISON_MIST`: 毒雾弥漫，低速扩散
- `BALL_MAGNETIC_FIELD`: 磁场扭曲，视觉畸变效果

#### 砖块交互特效
- `BRICK_EXPLOSION`: 爆炸特效，150个碎片粒子+震荡波
- `BRICK_ELECTRIC_CHAIN`: 电链反应，连锁传导视觉
- `BRICK_REGENERATION`: 再生特效，治疗光波动
- `BRICK_CRYSTAL_SHATTER`: 水晶破碎，折射光效

#### 挡板防护特效
- `PADDLE_FIRE_ARMOR`: 火焰护甲，复合特效(粒子+发光)
- `PADDLE_ICE_SHIELD`: 冰盾保护，冰晶环绕
- `PADDLE_ELECTRIC_CHARGE`: 电能充能，电弧环绕

### 特效配置系统

```typescript
// 火焰尾迹配置示例
{
    type: 'particle',
    particleCount: 100,           // 高画质粒子数
    lifetime: 1.5,                // 粒子存活时间
    startColor: new Color(255, 100, 0, 255),  // 橙色起始
    endColor: new Color(255, 0, 0, 0),        // 红色消散
    startSize: 8,                 // 起始大小
    endSize: 2,                   // 结束大小
    speed: 50,                    // 发射速度
    gravity: { x: 0, y: -100 },   // 向上飘散
    emission: 60,                 // 发射频率
    shape: 'point',               // 点状发射
    blend: 'additive',            // 叠加混合
    texture: 'fire_particle'      // 粒子贴图
}
```

### 主要方法

```typescript
// 添加特效到对象
addEffectToObject(targetNode: Node, effectType: VisualEffectType, duration: number, stackLevel: number): string

// 移除对象特效
removeEffectFromObject(targetNode: Node, effectType?: VisualEffectType): void

// 画质控制
setEffectQuality(level: number): void
pauseAllEffects(): void
resumeAllEffects(): void

// 快捷特效方法
addFireTrailToBall(ballNode: Node, duration?: number): string
addIceAuraToBall(ballNode: Node, duration?: number): string
createBrickExplosion(brickNode: Node): void
addFireArmorToPaddle(paddleNode: Node, duration?: number): string
```

### 在Cocos Creator中的绑定

1. **创建AdvancedEffectSystem组件**
   ```
   1. 在GameScene中创建Node "EffectSystem"
   2. 拖拽AdvancedEffectSystem脚本到该Node
   3. 配置Inspector参数:
      - maxEffectNodes: 50 (特效节点池大小)
      - enableEffectStacking: true (启用特效叠加)
      - effectQualityLevel: 2 (高画质)
      - enableParticlePooling: true (启用粒子池)
   ```

2. **与游戏对象集成**
   ```typescript
   // 在EnhancedBall.ts中应用特效
   public applyFireEffect(): void {
       const effectSystem = AdvancedEffectSystem.getInstance();
       if (effectSystem) {
           this.fireEffectId = effectSystem.addFireTrailToBall(this.node, 10.0);
       }
   }
   
   // 在EnhancedBrick.ts中爆炸特效
   public onDestroyed(): void {
       const effectSystem = AdvancedEffectSystem.getInstance();
       if (effectSystem) {
           effectSystem.createBrickExplosion(this.node);
       }
   }
   
   // 在EnhancedPaddleController.ts中护甲特效
   public activateFireArmor(): void {
       const effectSystem = AdvancedEffectSystem.getInstance();
       if (effectSystem) {
           this.armorEffectId = effectSystem.addFireArmorToPaddle(this.node, 15.0);
       }
   }
   ```

3. **特效叠加使用示例**
   ```typescript
   // 多重特效叠加
   const effectSystem = AdvancedEffectSystem.getInstance();
   if (effectSystem) {
       // 基础火焰效果
       effectSystem.addFireTrailToBall(ballNode, -1, 1);
       
       // 叠加电击效果  
       effectSystem.addElectricSparksToBall(ballNode, -1, 2);
       
       // 叠加冰霜效果(冰火共存)
       effectSystem.addIceAuraToBall(ballNode, -1, 1);
   }
   ```

## 性能优化建议

### 音效系统优化
1. **资源预加载**: 关卡开始前预加载所有音效
2. **音效池管理**: 限制同时播放的音效数量
3. **空间音效**: 距离过远的音效自动忽略
4. **优先级管理**: 重要音效优先播放

### 特效系统优化
1. **画质自适应**: 根据设备性能自动调节
2. **特效池**: 复用特效节点减少创建销毁
3. **LOD系统**: 距离相机较远的特效降级
4. **批量处理**: 相同类型特效批量更新

## 扩展指南

### 添加新音效
1. 在SoundEffectType枚举中添加新类型
2. 在initializeSoundConfigs方法中添加配置
3. 在preloadAudioClips数组中添加资源路径
4. 创建对应的快捷方法

### 添加新特效
1. 在VisualEffectType枚举中添加新类型
2. 在initializeEffectConfigs方法中添加配置
3. 根据需要实现对应的创建方法
4. 添加快捷调用方法

### 自定义特效组合
```typescript
// 创建自定义复合特效
const customConfig = {
    type: 'composite',
    layers: [
        { type: 'particle', /* 粒子配置 */ },
        { type: 'glow', /* 发光配置 */ },
        { type: 'distortion', /* 扭曲配置 */ }
    ]
};
```

## 调试工具

### 音效调试
- 控制台输出所有音效播放记录
- `getDebugInfo()`: 获取当前播放状态
- 支持运行时音量调节

### 特效调试  
- 特效节点数量监控
- 性能消耗统计
- 画质级别实时切换
- 特效叠加层级显示

## 与其他系统的协作

### 与AudioManager协作
- LevelSoundManager作为AudioManager的补充
- 处理关卡内的实时音效
- 继承全局音效设置

### 与遗物系统协作
- 遗物效果自动应用对应特效
- 特效强度反映遗物叠加层级
- 视觉反馈遗物激活状态

### 与存档系统协作
- 保存玩家的音效和特效设置
- 恢复游戏时重新应用特效状态