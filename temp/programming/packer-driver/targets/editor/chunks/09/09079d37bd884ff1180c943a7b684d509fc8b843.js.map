{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/StarFieldBackground.ts"],"names":["_decorator","Component","Sprite","SpriteFrame","Texture2D","Color","UITransform","view","Node","ccclass","property","StarFieldBackground","onLoad","createEnhancedBackground","transform","node","getComponent","console","error","setupNodeSize","createGradientLayer","createMultiLayerStars","createNebulaEffect","designSize","getDesignResolutionSize","targetWidth","Math","max","width","targetHeight","height","setContentSize","setAnchorPoint","gradientNode","setParent","layerTransform","addComponent","gradientTexture","createGradientTexture","sprite","spriteFrame","texture","sizeMode","SizeMode","CUSTOM","color","WHITE","layer","layerCount","createStarLayer","layerIndex","starNode","starTexture","createStarTexture","alpha","nebulaNode","nebulaTexture","createNebulaTexture","w","floor","h","reset","format","PixelFormat","RGBA8888","data","Uint8Array","y","ratio","r","bgStartColor","bgEndColor","g","b","x","index","uploadData","starsInLayer","starCount","starSize","i","length","random","brightness","drawStar","noise","simpleNoise","intensity","centerX","centerY","size","dy","dx","distance","sqrt","n","sin"],"mappings":"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","sourcesContent":["import { _decorator, Component, Sprite, SpriteFrame, Texture2D, Color, UITransform, view, Widget, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('StarFieldBackground')\r\nexport class StarFieldBackground extends Component {\r\n    @property\r\n    public starCount: number = 150;\r\n    \r\n    @property\r\n    public layerCount: number = 3;\r\n    \r\n    @property\r\n    public bgStartColor: Color = new Color(0, 8, 20, 255); // 保持原始颜色\r\n    \r\n    @property\r\n    public bgEndColor: Color = new Color(0, 24, 69, 255); // 保持原始颜色\r\n\r\n    protected onLoad(): void {\r\n        this.createEnhancedBackground();\r\n    }\r\n\r\n    private createEnhancedBackground(): void {\r\n        const transform = this.node.getComponent(UITransform);\r\n        if (!transform) {\r\n            console.error('UITransform component not found');\r\n            return;\r\n        }\r\n\r\n        // 确保尺寸设置正确\r\n        this.setupNodeSize(transform);\r\n\r\n        // 创建多层背景 - 使用独立子节点避免多Sprite冲突\r\n        this.createGradientLayer(transform);\r\n        this.createMultiLayerStars(transform);\r\n        this.createNebulaEffect(transform);\r\n    }\r\n\r\n    private setupNodeSize(transform: UITransform): void {\r\n        // 获取合适的尺寸\r\n        const designSize = view.getDesignResolutionSize();\r\n        const targetWidth = Math.max(designSize.width, 960);\r\n        const targetHeight = Math.max(designSize.height, 640);\r\n        \r\n        transform.setContentSize(targetWidth, targetHeight);\r\n        transform.setAnchorPoint(0.5, 0.5);\r\n    }\r\n\r\n    private createGradientLayer(transform: UITransform): void {\r\n        const gradientNode = new Node('GradientLayer');\r\n        gradientNode.setParent(this.node);\r\n        \r\n        // 设置子节点的UITransform\r\n        const layerTransform = gradientNode.addComponent(UITransform);\r\n        layerTransform.setContentSize(transform.width, transform.height);\r\n        layerTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        // 创建渐变纹理\r\n        const gradientTexture = this.createGradientTexture(transform.width, transform.height);\r\n        const sprite = gradientNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = gradientTexture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM; // 关键：防止尺寸自动调整\r\n        sprite.color = Color.WHITE;\r\n    }\r\n\r\n    private createMultiLayerStars(transform: UITransform): void {\r\n        for (let layer = 0; layer < this.layerCount; layer++) {\r\n            this.createStarLayer(transform, layer);\r\n        }\r\n    }\r\n\r\n    private createStarLayer(transform: UITransform, layerIndex: number): void {\r\n        const starNode = new Node(`StarLayer${layerIndex}`);\r\n        starNode.setParent(this.node);\r\n        \r\n        // 设置子节点的UITransform\r\n        const layerTransform = starNode.addComponent(UITransform);\r\n        layerTransform.setContentSize(transform.width, transform.height);\r\n        layerTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        // 创建星星纹理\r\n        const starTexture = this.createStarTexture(transform.width, transform.height, layerIndex);\r\n        const sprite = starNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = starTexture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM; // 关键：防止尺寸自动调整\r\n        \r\n        // 设置透明度和层次\r\n        const alpha = 255 - (layerIndex * 50);\r\n        sprite.color = new Color(255, 255, 255, alpha);\r\n    }\r\n\r\n    private createNebulaEffect(transform: UITransform): void {\r\n        const nebulaNode = new Node('NebulaLayer');\r\n        nebulaNode.setParent(this.node);\r\n        \r\n        // 设置子节点的UITransform\r\n        const layerTransform = nebulaNode.addComponent(UITransform);\r\n        layerTransform.setContentSize(transform.width, transform.height);\r\n        layerTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        // 创建星云纹理\r\n        const nebulaTexture = this.createNebulaTexture(transform.width, transform.height);\r\n        const sprite = nebulaNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = nebulaTexture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM; // 关键：防止尺寸自动调整\r\n        sprite.color = new Color(255, 255, 255, 80); // 半透明\r\n    }\r\n\r\n    private createGradientTexture(width: number, height: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = Math.max(1, Math.floor(width));\r\n        const h = Math.max(1, Math.floor(height));\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        \r\n        for (let y = 0; y < h; y++) {\r\n            const ratio = y / h;\r\n            const r = Math.floor(this.bgStartColor.r + (this.bgEndColor.r - this.bgStartColor.r) * ratio);\r\n            const g = Math.floor(this.bgStartColor.g + (this.bgEndColor.g - this.bgStartColor.g) * ratio);\r\n            const b = Math.floor(this.bgStartColor.b + (this.bgEndColor.b - this.bgStartColor.b) * ratio);\r\n            \r\n            for (let x = 0; x < w; x++) {\r\n                const index = (y * w + x) * 4;\r\n                data[index] = r;     // R\r\n                data[index + 1] = g; // G\r\n                data[index + 2] = b; // B\r\n                data[index + 3] = 255; // A\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private createStarTexture(width: number, height: number, layerIndex: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = Math.max(1, Math.floor(width));\r\n        const h = Math.max(1, Math.floor(height));\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        const starsInLayer = Math.floor(this.starCount / this.layerCount);\r\n        const starSize = 2 + layerIndex; // 不同层星星大小不同\r\n\r\n        // 初始化为透明\r\n        for (let i = 0; i < data.length; i += 4) {\r\n            data[i + 3] = 0; // 透明\r\n        }\r\n\r\n        // 绘制星星\r\n        for (let i = 0; i < starsInLayer; i++) {\r\n            const x = Math.floor(Math.random() * w);\r\n            const y = Math.floor(Math.random() * h);\r\n            const brightness = 150 + Math.random() * 105; // 150-255\r\n            \r\n            this.drawStar(data, w, h, x, y, starSize, brightness);\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private createNebulaTexture(width: number, height: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = Math.max(1, Math.floor(width));\r\n        const h = Math.max(1, Math.floor(height));\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        \r\n        // 使用柏林噪声模拟的简化版本\r\n        for (let y = 0; y < h; y++) {\r\n            for (let x = 0; x < w; x++) {\r\n                const index = (y * w + x) * 4;\r\n                \r\n                // 简单的噪声函数\r\n                const noise = this.simpleNoise(x * 0.01, y * 0.01);\r\n                const intensity = Math.max(0, noise * 100);\r\n                \r\n                data[index] = Math.floor(intensity * 0.8);     // R - 偏红\r\n                data[index + 1] = Math.floor(intensity * 0.4); // G\r\n                data[index + 2] = Math.floor(intensity * 1.2); // B - 偏蓝\r\n                data[index + 3] = Math.floor(intensity * 0.6); // A\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private drawStar(data: Uint8Array, width: number, height: number, centerX: number, centerY: number, size: number, brightness: number): void {\r\n        for (let dy = -size; dy <= size; dy++) {\r\n            for (let dx = -size; dx <= size; dx++) {\r\n                const x = centerX + dx;\r\n                const y = centerY + dy;\r\n                \r\n                if (x >= 0 && x < width && y >= 0 && y < height) {\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    if (distance <= size) {\r\n                        const alpha = Math.max(0, brightness * (1 - distance / size));\r\n                        const index = (y * width + x) * 4;\r\n                        \r\n                        data[index] = brightness;     // R\r\n                        data[index + 1] = brightness; // G\r\n                        data[index + 2] = brightness; // B\r\n                        data[index + 3] = alpha;      // A\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private simpleNoise(x: number, y: number): number {\r\n        // 简单的伪随机噪声函数\r\n        let n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\r\n        n = n - Math.floor(n);\r\n        return n;\r\n    }\r\n}"]}