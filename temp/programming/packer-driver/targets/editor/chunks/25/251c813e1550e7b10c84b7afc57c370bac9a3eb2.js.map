{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/gameplay/DynamicLevelGenerator.ts"],"names":["_decorator","Component","Vec3","LevelManager","LevelType","DifficultyTier","MapManager","MapNodeType","BrickType","ccclass","property","LevelLayoutPattern","DynamicLevelGenerator","_levelManager","_mapManager","_currentParams","getInstance","_instance","onLoad","onDestroy","generateLevelLayout","params","console","log","chapterNumber","floorNumber","levelType","layout","layoutPattern","STANDARD","generateStandardLayout","PYRAMID","generatePyramidLayout","DIAMOND","generateDiamondLayout","SPIRAL","generateSpiralLayout","FORTRESS","generateFortressLayout","CHAOS","generateChaosLayout","TUNNEL","generateTunnelLayout","WAVES","generateWavesLayout","applyDifficultyModifiers","applySpecialModifiers","length","baseHealth","getBaseHealthForDifficulty","difficultyTier","row","gridHeight","col","gridWidth","spawnChance","getBrickSpawnChance","nodeType","Math","random","position","getGridPosition","brickType","selectBrickType","push","health","floor","specialEffects","difficultyMultiplier","rowWidth","max","startCol","i","centerRow","distanceFromCenter","abs","grid","Array","fill","map","dr","dc","spiral","nextRow","nextCol","temp","isWall","isGate","REINFORCED","brickCount","positions","Set","size","key","has","add","tunnelWidth","tunnelCenter","distanceFromTunnel","isInTunnel","waveHeight","sin","PI","targetRow","getDifficultyMultiplier","brick","ceil","specialModifiers","forEach","modifier","applyElectricStorm","applyFireZone","applyIceField","applyExplosiveCluster","applyRegenerationField","electricCount","shuffled","sort","ELECTRIC","centerX","centerY","gridPos","getGridFromPosition","distance","sqrt","pow","FIRE","index","ICE","explosiveCount","EXPLOSIVE","regenCount","REGENERATING","x","startX","brickWidth","brickSpacing","y","startY","brickHeight","round","tier","EASY","NORMAL","HARD","NIGHTMARE","baseChance","COMBAT","ELITE","BOSS","TREASURE","SHOP","REST","EVENT","SECRET","MINI_BOSS","PUZZLE","GAUNTLET","FINAL_BOSS","difficultyFactor","frontRowBonus","specialChance","EXPERIENCE","multiplier","getRecommendedLayoutPattern","patterns","allPatterns","Object","values","getRecommendedModifiers","modifiers","generateFallbackLayout"],"mappings":"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","sourcesContent":["import { _decorator, Component, Prefab, Vec3, Node, instantiate, math } from 'cc';\r\nimport { LevelManager, LevelType, DifficultyTier } from './LevelManager';\r\nimport { MapManager, MapNodeType } from '../managers/MapManager';\r\nimport { EnhancedBrick, BrickType } from './EnhancedBrick';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum LevelLayoutPattern {\r\n    STANDARD = 'standard',\r\n    PYRAMID = 'pyramid', \r\n    DIAMOND = 'diamond',\r\n    SPIRAL = 'spiral',\r\n    FORTRESS = 'fortress',\r\n    CHAOS = 'chaos',\r\n    TUNNEL = 'tunnel',\r\n    WAVES = 'waves'\r\n}\r\n\r\nexport interface LevelGenerationParams {\r\n    chapterNumber: number;\r\n    floorNumber: number;\r\n    levelType: LevelType;\r\n    difficultyTier: DifficultyTier;\r\n    nodeType: MapNodeType;\r\n    layoutPattern: LevelLayoutPattern;\r\n    specialModifiers: string[];\r\n}\r\n\r\nexport interface BrickLayoutData {\r\n    position: Vec3;\r\n    brickType: BrickType;\r\n    health: number;\r\n    specialEffects: string[];\r\n    difficultyMultiplier: number;\r\n}\r\n\r\n@ccclass('DynamicLevelGenerator')\r\nexport class DynamicLevelGenerator extends Component {\r\n    \r\n    @property\r\n    public gridWidth: number = 8;\r\n    \r\n    @property\r\n    public gridHeight: number = 6;\r\n    \r\n    @property\r\n    public brickWidth: number = 80;\r\n    \r\n    @property\r\n    public brickHeight: number = 40;\r\n    \r\n    @property\r\n    public brickSpacing: number = 10;\r\n    \r\n    @property\r\n    public startX: number = -280;\r\n    \r\n    @property\r\n    public startY: number = 200;\r\n\r\n    private static _instance: DynamicLevelGenerator | null = null;\r\n    private _levelManager: LevelManager | null = null;\r\n    private _mapManager: MapManager | null = null;\r\n    private _currentParams: LevelGenerationParams | null = null;\r\n\r\n    public static getInstance(): DynamicLevelGenerator | null {\r\n        return DynamicLevelGenerator._instance;\r\n    }\r\n\r\n    protected onLoad(): void {\r\n        if (DynamicLevelGenerator._instance === null) {\r\n            DynamicLevelGenerator._instance = this;\r\n        }\r\n        \r\n        this._levelManager = LevelManager.getInstance();\r\n        this._mapManager = MapManager.getInstance();\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        if (DynamicLevelGenerator._instance === this) {\r\n            DynamicLevelGenerator._instance = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据地图选择和难度参数生成关卡布局\r\n     */\r\n    public generateLevelLayout(params: LevelGenerationParams): BrickLayoutData[] {\r\n        this._currentParams = params;\r\n        \r\n        console.log(`开始生成关卡 - 章节:${params.chapterNumber} 层数:${params.floorNumber} 类型:${params.levelType}`);\r\n        \r\n        let layout: BrickLayoutData[] = [];\r\n        \r\n        switch (params.layoutPattern) {\r\n            case LevelLayoutPattern.STANDARD:\r\n                layout = this.generateStandardLayout(params);\r\n                break;\r\n            case LevelLayoutPattern.PYRAMID:\r\n                layout = this.generatePyramidLayout(params);\r\n                break;\r\n            case LevelLayoutPattern.DIAMOND:\r\n                layout = this.generateDiamondLayout(params);\r\n                break;\r\n            case LevelLayoutPattern.SPIRAL:\r\n                layout = this.generateSpiralLayout(params);\r\n                break;\r\n            case LevelLayoutPattern.FORTRESS:\r\n                layout = this.generateFortressLayout(params);\r\n                break;\r\n            case LevelLayoutPattern.CHAOS:\r\n                layout = this.generateChaosLayout(params);\r\n                break;\r\n            case LevelLayoutPattern.TUNNEL:\r\n                layout = this.generateTunnelLayout(params);\r\n                break;\r\n            case LevelLayoutPattern.WAVES:\r\n                layout = this.generateWavesLayout(params);\r\n                break;\r\n            default:\r\n                layout = this.generateStandardLayout(params);\r\n        }\r\n        \r\n        // 应用难度修饰符\r\n        layout = this.applyDifficultyModifiers(layout, params);\r\n        \r\n        // 应用特殊修饰符\r\n        layout = this.applySpecialModifiers(layout, params);\r\n        \r\n        console.log(`关卡生成完成 - 共${layout.length}个砖块`);\r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 标准矩形布局\r\n     */\r\n    private generateStandardLayout(params: LevelGenerationParams): BrickLayoutData[] {\r\n        const layout: BrickLayoutData[] = [];\r\n        const baseHealth = this.getBaseHealthForDifficulty(params.difficultyTier);\r\n        \r\n        for (let row = 0; row < this.gridHeight; row++) {\r\n            for (let col = 0; col < this.gridWidth; col++) {\r\n                // 根据节点类型调整砖块密度\r\n                const spawnChance = this.getBrickSpawnChance(params.nodeType, row, col);\r\n                if (Math.random() > spawnChance) continue;\r\n                \r\n                const position = this.getGridPosition(row, col);\r\n                const brickType = this.selectBrickType(params, row, col);\r\n                \r\n                layout.push({\r\n                    position,\r\n                    brickType,\r\n                    health: baseHealth + Math.floor(row * 0.5),\r\n                    specialEffects: [],\r\n                    difficultyMultiplier: 1.0\r\n                });\r\n            }\r\n        }\r\n        \r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 金字塔布局\r\n     */\r\n    private generatePyramidLayout(params: LevelGenerationParams): BrickLayoutData[] {\r\n        const layout: BrickLayoutData[] = [];\r\n        const baseHealth = this.getBaseHealthForDifficulty(params.difficultyTier);\r\n        \r\n        for (let row = 0; row < this.gridHeight; row++) {\r\n            const rowWidth = Math.max(1, this.gridWidth - row);\r\n            const startCol = Math.floor((this.gridWidth - rowWidth) / 2);\r\n            \r\n            for (let i = 0; i < rowWidth; i++) {\r\n                const col = startCol + i;\r\n                const position = this.getGridPosition(row, col);\r\n                const brickType = this.selectBrickType(params, row, col);\r\n                \r\n                layout.push({\r\n                    position,\r\n                    brickType,\r\n                    health: baseHealth + row,\r\n                    specialEffects: [],\r\n                    difficultyMultiplier: 1.0 + (row * 0.2)\r\n                });\r\n            }\r\n        }\r\n        \r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 钻石布局\r\n     */\r\n    private generateDiamondLayout(params: LevelGenerationParams): BrickLayoutData[] {\r\n        const layout: BrickLayoutData[] = [];\r\n        const baseHealth = this.getBaseHealthForDifficulty(params.difficultyTier);\r\n        const centerRow = Math.floor(this.gridHeight / 2);\r\n        \r\n        for (let row = 0; row < this.gridHeight; row++) {\r\n            const distanceFromCenter = Math.abs(row - centerRow);\r\n            const rowWidth = Math.max(1, this.gridWidth - distanceFromCenter * 2);\r\n            const startCol = Math.floor((this.gridWidth - rowWidth) / 2);\r\n            \r\n            for (let i = 0; i < rowWidth; i++) {\r\n                const col = startCol + i;\r\n                const position = this.getGridPosition(row, col);\r\n                const brickType = this.selectBrickType(params, row, col);\r\n                \r\n                layout.push({\r\n                    position,\r\n                    brickType,\r\n                    health: baseHealth + distanceFromCenter,\r\n                    specialEffects: [],\r\n                    difficultyMultiplier: 1.0 + (distanceFromCenter * 0.15)\r\n                });\r\n            }\r\n        }\r\n        \r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 螺旋布局\r\n     */\r\n    private generateSpiralLayout(params: LevelGenerationParams): BrickLayoutData[] {\r\n        const layout: BrickLayoutData[] = [];\r\n        const baseHealth = this.getBaseHealthForDifficulty(params.difficultyTier);\r\n        const grid: boolean[][] = Array(this.gridHeight).fill(null).map(() => Array(this.gridWidth).fill(false));\r\n        \r\n        let row = 0, col = 0;\r\n        let dr = 0, dc = 1; // 开始向右移动\r\n        let spiral = 0;\r\n        \r\n        for (let i = 0; i < this.gridWidth * this.gridHeight * 0.7; i++) {\r\n            if (row >= 0 && row < this.gridHeight && col >= 0 && col < this.gridWidth && !grid[row][col]) {\r\n                grid[row][col] = true;\r\n                \r\n                const position = this.getGridPosition(row, col);\r\n                const brickType = this.selectBrickType(params, row, col);\r\n                \r\n                layout.push({\r\n                    position,\r\n                    brickType,\r\n                    health: baseHealth + Math.floor(spiral / 4),\r\n                    specialEffects: [],\r\n                    difficultyMultiplier: 1.0 + (spiral * 0.05)\r\n                });\r\n                spiral++;\r\n            }\r\n            \r\n            // 检查是否需要转向\r\n            const nextRow = row + dr;\r\n            const nextCol = col + dc;\r\n            if (nextRow < 0 || nextRow >= this.gridHeight || nextCol < 0 || nextCol >= this.gridWidth || grid[nextRow][nextCol]) {\r\n                // 转向：右->下->左->上\r\n                const temp = dr;\r\n                dr = dc;\r\n                dc = -temp;\r\n            }\r\n            \r\n            row += dr;\r\n            col += dc;\r\n        }\r\n        \r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 要塞布局\r\n     */\r\n    private generateFortressLayout(params: LevelGenerationParams): BrickLayoutData[] {\r\n        const layout: BrickLayoutData[] = [];\r\n        const baseHealth = this.getBaseHealthForDifficulty(params.difficultyTier);\r\n        \r\n        // 外墙\r\n        for (let row = 0; row < this.gridHeight; row++) {\r\n            for (let col = 0; col < this.gridWidth; col++) {\r\n                const isWall = (row === 0 || row === this.gridHeight - 1 || col === 0 || col === this.gridWidth - 1);\r\n                const isGate = (row === this.gridHeight - 1 && (col === Math.floor(this.gridWidth / 2) - 1 || col === Math.floor(this.gridWidth / 2)));\r\n                \r\n                if (isWall && !isGate) {\r\n                    const position = this.getGridPosition(row, col);\r\n                    const brickType = BrickType.REINFORCED;\r\n                    \r\n                    layout.push({\r\n                        position,\r\n                        brickType,\r\n                        health: baseHealth * 2,\r\n                        specialEffects: ['fortress_wall'],\r\n                        difficultyMultiplier: 1.5\r\n                    });\r\n                }\r\n                \r\n                // 内部结构\r\n                if (!isWall && Math.random() < 0.4) {\r\n                    const position = this.getGridPosition(row, col);\r\n                    const brickType = this.selectBrickType(params, row, col);\r\n                    \r\n                    layout.push({\r\n                        position,\r\n                        brickType,\r\n                        health: baseHealth,\r\n                        specialEffects: [],\r\n                        difficultyMultiplier: 1.0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        \r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 混沌布局\r\n     */\r\n    private generateChaosLayout(params: LevelGenerationParams): BrickLayoutData[] {\r\n        const layout: BrickLayoutData[] = [];\r\n        const baseHealth = this.getBaseHealthForDifficulty(params.difficultyTier);\r\n        \r\n        // 随机分布，但确保有一定的可玩性\r\n        const brickCount = Math.floor(this.gridWidth * this.gridHeight * (0.5 + Math.random() * 0.3));\r\n        const positions = new Set<string>();\r\n        \r\n        while (positions.size < brickCount) {\r\n            const row = Math.floor(Math.random() * this.gridHeight);\r\n            const col = Math.floor(Math.random() * this.gridWidth);\r\n            const key = `${row},${col}`;\r\n            \r\n            if (!positions.has(key)) {\r\n                positions.add(key);\r\n                \r\n                const position = this.getGridPosition(row, col);\r\n                const brickType = this.selectBrickType(params, row, col);\r\n                \r\n                layout.push({\r\n                    position,\r\n                    brickType,\r\n                    health: baseHealth + Math.floor(Math.random() * 3),\r\n                    specialEffects: [],\r\n                    difficultyMultiplier: 0.8 + Math.random() * 0.4\r\n                });\r\n            }\r\n        }\r\n        \r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 隧道布局\r\n     */\r\n    private generateTunnelLayout(params: LevelGenerationParams): BrickLayoutData[] {\r\n        const layout: BrickLayoutData[] = [];\r\n        const baseHealth = this.getBaseHealthForDifficulty(params.difficultyTier);\r\n        const tunnelWidth = 2;\r\n        const tunnelCenter = Math.floor(this.gridWidth / 2);\r\n        \r\n        for (let row = 0; row < this.gridHeight; row++) {\r\n            for (let col = 0; col < this.gridWidth; col++) {\r\n                const distanceFromTunnel = Math.abs(col - tunnelCenter);\r\n                const isInTunnel = distanceFromTunnel <= tunnelWidth / 2;\r\n                \r\n                if (!isInTunnel || (row % 2 === 0 && Math.random() < 0.3)) {\r\n                    const position = this.getGridPosition(row, col);\r\n                    const brickType = this.selectBrickType(params, row, col);\r\n                    \r\n                    layout.push({\r\n                        position,\r\n                        brickType,\r\n                        health: baseHealth + Math.floor(distanceFromTunnel * 0.5),\r\n                        specialEffects: [],\r\n                        difficultyMultiplier: 1.0 + (distanceFromTunnel * 0.1)\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        \r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 波浪布局\r\n     */\r\n    private generateWavesLayout(params: LevelGenerationParams): BrickLayoutData[] {\r\n        const layout: BrickLayoutData[] = [];\r\n        const baseHealth = this.getBaseHealthForDifficulty(params.difficultyTier);\r\n        \r\n        for (let row = 0; row < this.gridHeight; row++) {\r\n            for (let col = 0; col < this.gridWidth; col++) {\r\n                const waveHeight = Math.sin((col / this.gridWidth) * Math.PI * 2) * 2;\r\n                const targetRow = Math.floor(this.gridHeight / 2 + waveHeight);\r\n                \r\n                if (Math.abs(row - targetRow) <= 1 && Math.random() < 0.8) {\r\n                    const position = this.getGridPosition(row, col);\r\n                    const brickType = this.selectBrickType(params, row, col);\r\n                    \r\n                    layout.push({\r\n                        position,\r\n                        brickType,\r\n                        health: baseHealth + Math.abs(row - targetRow),\r\n                        specialEffects: [],\r\n                        difficultyMultiplier: 1.0 + Math.abs(waveHeight * 0.1)\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        \r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 应用难度修饰符\r\n     */\r\n    private applyDifficultyModifiers(layout: BrickLayoutData[], params: LevelGenerationParams): BrickLayoutData[] {\r\n        const difficultyMultiplier = this.getDifficultyMultiplier(params);\r\n        \r\n        return layout.map(brick => ({\r\n            ...brick,\r\n            health: Math.ceil(brick.health * difficultyMultiplier),\r\n            difficultyMultiplier: brick.difficultyMultiplier * difficultyMultiplier\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * 应用特殊修饰符\r\n     */\r\n    private applySpecialModifiers(layout: BrickLayoutData[], params: LevelGenerationParams): BrickLayoutData[] {\r\n        params.specialModifiers.forEach(modifier => {\r\n            switch (modifier) {\r\n                case 'electric_storm':\r\n                    layout = this.applyElectricStorm(layout);\r\n                    break;\r\n                case 'fire_zone':\r\n                    layout = this.applyFireZone(layout);\r\n                    break;\r\n                case 'ice_field':\r\n                    layout = this.applyIceField(layout);\r\n                    break;\r\n                case 'explosive_cluster':\r\n                    layout = this.applyExplosiveCluster(layout);\r\n                    break;\r\n                case 'regeneration_field':\r\n                    layout = this.applyRegenerationField(layout);\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 电流风暴修饰符\r\n     */\r\n    private applyElectricStorm(layout: BrickLayoutData[]): BrickLayoutData[] {\r\n        const electricCount = Math.floor(layout.length * 0.2);\r\n        const shuffled = [...layout].sort(() => Math.random() - 0.5);\r\n        \r\n        for (let i = 0; i < electricCount && i < shuffled.length; i++) {\r\n            shuffled[i].brickType = BrickType.ELECTRIC;\r\n            shuffled[i].specialEffects.push('chain_lightning');\r\n        }\r\n        \r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 火焰区域修饰符\r\n     */\r\n    private applyFireZone(layout: BrickLayoutData[]): BrickLayoutData[] {\r\n        const centerX = this.gridWidth / 2;\r\n        const centerY = this.gridHeight / 2;\r\n        \r\n        return layout.map(brick => {\r\n            const gridPos = this.getGridFromPosition(brick.position);\r\n            const distance = Math.sqrt(Math.pow(gridPos.col - centerX, 2) + Math.pow(gridPos.row - centerY, 2));\r\n            \r\n            if (distance <= 2) {\r\n                brick.brickType = BrickType.FIRE;\r\n                brick.specialEffects.push('burn_aura');\r\n            }\r\n            \r\n            return brick;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 冰霜领域修饰符\r\n     */\r\n    private applyIceField(layout: BrickLayoutData[]): BrickLayoutData[] {\r\n        return layout.map((brick, index) => {\r\n            if (index % 3 === 0) {\r\n                brick.brickType = BrickType.ICE;\r\n                brick.specialEffects.push('slow_aura');\r\n            }\r\n            return brick;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 爆炸集群修饰符\r\n     */\r\n    private applyExplosiveCluster(layout: BrickLayoutData[]): BrickLayoutData[] {\r\n        const explosiveCount = Math.floor(layout.length * 0.15);\r\n        const shuffled = [...layout].sort(() => Math.random() - 0.5);\r\n        \r\n        for (let i = 0; i < explosiveCount && i < shuffled.length; i++) {\r\n            shuffled[i].brickType = BrickType.EXPLOSIVE;\r\n            shuffled[i].specialEffects.push('cluster_bomb');\r\n        }\r\n        \r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 再生领域修饰符\r\n     */\r\n    private applyRegenerationField(layout: BrickLayoutData[]): BrickLayoutData[] {\r\n        const regenCount = Math.floor(layout.length * 0.1);\r\n        const shuffled = [...layout].sort(() => Math.random() - 0.5);\r\n        \r\n        for (let i = 0; i < regenCount && i < shuffled.length; i++) {\r\n            shuffled[i].brickType = BrickType.REGENERATING;\r\n            shuffled[i].specialEffects.push('area_regen');\r\n        }\r\n        \r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 工具方法\r\n     */\r\n    private getGridPosition(row: number, col: number): Vec3 {\r\n        const x = this.startX + col * (this.brickWidth + this.brickSpacing);\r\n        const y = this.startY - row * (this.brickHeight + this.brickSpacing);\r\n        return new Vec3(x, y, 0);\r\n    }\r\n\r\n    private getGridFromPosition(position: Vec3): { row: number, col: number } {\r\n        const col = Math.round((position.x - this.startX) / (this.brickWidth + this.brickSpacing));\r\n        const row = Math.round((this.startY - position.y) / (this.brickHeight + this.brickSpacing));\r\n        return { row, col };\r\n    }\r\n\r\n    private getBaseHealthForDifficulty(tier: DifficultyTier): number {\r\n        switch (tier) {\r\n            case DifficultyTier.EASY: return 1;\r\n            case DifficultyTier.NORMAL: return 2;\r\n            case DifficultyTier.HARD: return 3;\r\n            case DifficultyTier.NIGHTMARE: return 5;\r\n            default: return 2;\r\n        }\r\n    }\r\n\r\n    private getBrickSpawnChance(nodeType: MapNodeType, row: number, col: number): number {\r\n        const baseChance = {\r\n            [MapNodeType.COMBAT]: 0.85,\r\n            [MapNodeType.ELITE]: 0.9,\r\n            [MapNodeType.BOSS]: 1.0,\r\n            [MapNodeType.TREASURE]: 0.6,\r\n            [MapNodeType.SHOP]: 0.4,\r\n            [MapNodeType.REST]: 0.3,\r\n            [MapNodeType.EVENT]: 0.7,\r\n            [MapNodeType.SECRET]: 0.95,\r\n            [MapNodeType.MINI_BOSS]: 0.88,\r\n            [MapNodeType.PUZZLE]: 0.75,\r\n            [MapNodeType.GAUNTLET]: 0.95,\r\n            [MapNodeType.FINAL_BOSS]: 1.0\r\n        };\r\n        \r\n        return baseChance[nodeType] || 0.8;\r\n    }\r\n\r\n    private selectBrickType(params: LevelGenerationParams, row: number, col: number): BrickType {\r\n        const difficultyFactor = this.getDifficultyMultiplier(params);\r\n        const random = Math.random();\r\n        \r\n        // 根据难度和位置选择砖块类型\r\n        if (params.levelType === LevelType.BOSS || params.nodeType === MapNodeType.BOSS) {\r\n            if (random < 0.3) return BrickType.REINFORCED;\r\n            if (random < 0.5) return BrickType.ELECTRIC;\r\n            if (random < 0.7) return BrickType.EXPLOSIVE;\r\n            return BrickType.NORMAL;\r\n        }\r\n        \r\n        // 前排砖块更容易是强化型\r\n        const frontRowBonus = (this.gridHeight - row) * 0.1;\r\n        const specialChance = (difficultyFactor - 1.0) * 0.5 + frontRowBonus;\r\n        \r\n        if (random < specialChance * 0.2) return BrickType.REINFORCED;\r\n        if (random < specialChance * 0.4) return BrickType.ELECTRIC;\r\n        if (random < specialChance * 0.6) return BrickType.EXPLOSIVE;\r\n        if (random < specialChance * 0.8) return BrickType.EXPERIENCE;\r\n        \r\n        return BrickType.NORMAL;\r\n    }\r\n\r\n    private getDifficultyMultiplier(params: LevelGenerationParams): number {\r\n        let multiplier = 1.0;\r\n        \r\n        // 章节难度\r\n        multiplier += (params.chapterNumber - 1) * 0.5;\r\n        \r\n        // 层数难度\r\n        multiplier += params.floorNumber * 0.1;\r\n        \r\n        // 难度级别\r\n        switch (params.difficultyTier) {\r\n            case DifficultyTier.EASY: multiplier *= 0.8; break;\r\n            case DifficultyTier.NORMAL: multiplier *= 1.0; break;\r\n            case DifficultyTier.HARD: multiplier *= 1.3; break;\r\n            case DifficultyTier.NIGHTMARE: multiplier *= 1.8; break;\r\n        }\r\n        \r\n        // 节点类型\r\n        switch (params.nodeType) {\r\n            case MapNodeType.ELITE: multiplier *= 1.4; break;\r\n            case MapNodeType.BOSS: multiplier *= 2.0; break;\r\n            case MapNodeType.MINI_BOSS: multiplier *= 1.6; break;\r\n            case MapNodeType.GAUNTLET: multiplier *= 1.5; break;\r\n            case MapNodeType.FINAL_BOSS: multiplier *= 3.0; break;\r\n        }\r\n        \r\n        return multiplier;\r\n    }\r\n\r\n    /**\r\n     * 获取推荐的布局模式\r\n     */\r\n    public getRecommendedLayoutPattern(params: LevelGenerationParams): LevelLayoutPattern {\r\n        // 根据关卡类型和难度推荐布局\r\n        if (params.levelType === LevelType.BOSS) {\r\n            return LevelLayoutPattern.FORTRESS;\r\n        }\r\n        \r\n        if (params.nodeType === MapNodeType.ELITE) {\r\n            const patterns = [LevelLayoutPattern.SPIRAL, LevelLayoutPattern.DIAMOND, LevelLayoutPattern.FORTRESS];\r\n            return patterns[Math.floor(Math.random() * patterns.length)];\r\n        }\r\n        \r\n        if (params.floorNumber % 5 === 0) {\r\n            return LevelLayoutPattern.PYRAMID;\r\n        }\r\n        \r\n        const allPatterns = Object.values(LevelLayoutPattern);\r\n        return allPatterns[Math.floor(Math.random() * allPatterns.length)];\r\n    }\r\n\r\n    /**\r\n     * 获取特殊修饰符建议\r\n     */\r\n    public getRecommendedModifiers(params: LevelGenerationParams): string[] {\r\n        const modifiers: string[] = [];\r\n        \r\n        // 根据章节添加主题修饰符\r\n        if (params.chapterNumber === 2) {\r\n            modifiers.push('ice_field');\r\n        } else if (params.chapterNumber === 3) {\r\n            modifiers.push('fire_zone');\r\n        }\r\n        \r\n        // 根据难度添加修饰符\r\n        if (params.difficultyTier === DifficultyTier.HARD) {\r\n            modifiers.push('electric_storm');\r\n        } else if (params.difficultyTier === DifficultyTier.NIGHTMARE) {\r\n            modifiers.push('explosive_cluster', 'regeneration_field');\r\n        }\r\n        \r\n        // 特殊节点修饰符\r\n        if (params.nodeType === MapNodeType.GAUNTLET) {\r\n            modifiers.push('electric_storm', 'fire_zone');\r\n        }\r\n        \r\n        return modifiers;\r\n    }\r\n\n    private generateFallbackLayout(): BrickLayoutData[] {\n        const layout: BrickLayoutData[] = [];\n        const baseHealth = 1;\n        \n        // Generate a simple 4x6 grid as fallback\n        for (let row = 0; row < 4; row++) {\n            for (let col = 0; col < 6; col++) {\n                const position = this.getGridPosition(row, col);\n                \n                layout.push({\n                    position,\n                    brickType: BrickType.NORMAL,\n                    health: baseHealth,\n                    specialEffects: [],\n                    difficultyMultiplier: 1.0\n                });\n            }\n        }\n        \n        return layout;\n    }\n}"]}