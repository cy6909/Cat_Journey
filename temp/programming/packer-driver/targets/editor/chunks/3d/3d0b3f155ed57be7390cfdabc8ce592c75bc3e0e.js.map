{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/managers/CoreController.ts"],"names":["_decorator","Component","Collider2D","Contact2DType","GameManager","ccclass","property","CoreController","_currentCoreHealth","_currentExperience","_coreLevel","_lastDamageTime","_isRegenerating","onLoad","maxCoreHealth","collider","getComponent","on","BEGIN_CONTACT","onBeginContact","update","dt","updateRegeneration","regenDelay","console","log","Math","min","regenRate","updateHealthDisplay","selfCollider","otherCollider","contact","otherNode","node","name","includes","ballScript","damage","getDamage","takeDamage","xpValue","addExperience","destroy","attackDamage","source","showDamageEffect","onCoreDestroyed","healCore","amount","xp","experienceCapacity","levelUpCore","showLevelUpEffect","gameManager","getInstance","showDestroyedEffect","sprite","healthPercent","color","r","g","b","a","originalColor","scheduleOnce","i","getCurrentHealth","getMaxHealth","getCurrentExperience","getExperienceCapacity","getCoreLevel","isRegenerating","getHealthPercent"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, RigidBody2D, Collider2D, Contact2DType, IPhysics2DContact, Vec3 } from 'cc';\r\nimport { GameManager } from '../gameplay/GameManager';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CoreController')\r\nexport class CoreController extends Component {\r\n    @property\r\n    public maxCoreHealth: number = 10;\r\n    \r\n    @property\r\n    public regenRate: number = 0.1; // Health per second regeneration\r\n    \r\n    @property\r\n    public regenDelay: number = 5.0; // Seconds after damage before regen starts\r\n    \r\n    @property\r\n    public experienceCapacity: number = 100; // XP needed for core upgrade\r\n    \r\n    private _currentCoreHealth: number = 0;\r\n    private _currentExperience: number = 0;\r\n    private _coreLevel: number = 1;\r\n    private _lastDamageTime: number = 0;\r\n    private _isRegenerating: boolean = false;\r\n    \r\n    protected onLoad(): void {\r\n        this._currentCoreHealth = this.maxCoreHealth;\r\n        \r\n        const collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n        }\r\n    }\r\n    \r\n    protected update(dt: number): void {\r\n        this.updateRegeneration(dt);\r\n        this._lastDamageTime += dt;\r\n    }\r\n    \r\n    private updateRegeneration(dt: number): void {\r\n        if (this._lastDamageTime >= this.regenDelay && this._currentCoreHealth < this.maxCoreHealth) {\r\n            if (!this._isRegenerating) {\r\n                this._isRegenerating = true;\r\n                console.log('Core regeneration started');\r\n            }\r\n            \r\n            this._currentCoreHealth = Math.min(\r\n                this.maxCoreHealth,\r\n                this._currentCoreHealth + this.regenRate * dt\r\n            );\r\n            \r\n            this.updateHealthDisplay();\r\n        } else {\r\n            this._isRegenerating = false;\r\n        }\r\n    }\r\n    \r\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null): void {\r\n        const otherNode = otherCollider.node;\r\n        \r\n        // Ball hit core directly (missed paddle)\r\n        if (otherNode.name.includes('Ball')) {\r\n            const ballScript = otherNode.getComponent('Ball');\r\n            const damage = ballScript ? (ballScript as any).getDamage() : 1;\r\n            this.takeDamage(damage, 'Ball impact');\r\n        }\r\n        \r\n        // Experience orb collection\r\n        if (otherNode.name.includes('ExperienceOrb')) {\r\n            const xpValue = 10; // Could be configurable per orb type\r\n            this.addExperience(xpValue);\r\n            otherNode.destroy();\r\n        }\r\n        \r\n        // Boss attack hit core\r\n        if (otherNode.name.includes('BossAttack')) {\r\n            const attackDamage = 2; // Boss attacks are stronger\r\n            this.takeDamage(attackDamage, 'Boss attack');\r\n            otherNode.destroy();\r\n        }\r\n    }\r\n    \r\n    public takeDamage(damage: number, source: string = 'Unknown'): void {\r\n        this._currentCoreHealth -= damage;\r\n        this._lastDamageTime = 0; // Reset regen timer\r\n        this._isRegenerating = false;\r\n        \r\n        console.log(`Core takes ${damage} damage from ${source}. Health: ${this._currentCoreHealth}/${this.maxCoreHealth}`);\r\n        \r\n        this.updateHealthDisplay();\r\n        this.showDamageEffect();\r\n        \r\n        if (this._currentCoreHealth <= 0) {\r\n            this.onCoreDestroyed();\r\n        }\r\n    }\r\n    \r\n    public healCore(amount: number): void {\r\n        this._currentCoreHealth = Math.min(this.maxCoreHealth, this._currentCoreHealth + amount);\r\n        console.log(`Core healed by ${amount}. Health: ${this._currentCoreHealth}/${this.maxCoreHealth}`);\r\n        this.updateHealthDisplay();\r\n    }\r\n    \r\n    public addExperience(xp: number): void {\r\n        this._currentExperience += xp;\r\n        console.log(`Core gains ${xp} XP. Total: ${this._currentExperience}/${this.experienceCapacity}`);\r\n        \r\n        if (this._currentExperience >= this.experienceCapacity) {\r\n            this.levelUpCore();\r\n        }\r\n    }\r\n    \r\n    private levelUpCore(): void {\r\n        this._coreLevel++;\r\n        this._currentExperience = 0;\r\n        \r\n        // Increase core stats on level up\r\n        this.maxCoreHealth += 2;\r\n        this._currentCoreHealth = this.maxCoreHealth; // Full heal on level up\r\n        this.regenRate += 0.05;\r\n        \r\n        console.log(`Core leveled up! New level: ${this._coreLevel}`);\r\n        console.log(`Core stats - Health: ${this.maxCoreHealth}, Regen: ${this.regenRate}/sec`);\r\n        \r\n        this.showLevelUpEffect();\r\n        this.updateHealthDisplay();\r\n    }\r\n    \r\n    private onCoreDestroyed(): void {\r\n        console.log('Core destroyed! Game Over!');\r\n        \r\n        const gameManager = GameManager.getInstance();\r\n        if (gameManager) {\r\n            // Core destruction triggers game over\r\n            gameManager.onCoreDestroyed();\r\n        }\r\n        \r\n        this.showDestroyedEffect();\r\n    }\r\n    \r\n    private updateHealthDisplay(): void {\r\n        // Update visual representation of core health\r\n        const sprite = this.getComponent('cc.Sprite');\r\n        if (sprite) {\r\n            // Change color based on health percentage\r\n            const healthPercent = this._currentCoreHealth / this.maxCoreHealth;\r\n            \r\n            if (healthPercent > 0.7) {\r\n                (sprite as any).color = { r: 100, g: 255, b: 100, a: 255 }; // Green\r\n            } else if (healthPercent > 0.3) {\r\n                (sprite as any).color = { r: 255, g: 255, b: 100, a: 255 }; // Yellow\r\n            } else {\r\n                (sprite as any).color = { r: 255, g: 100, b: 100, a: 255 }; // Red\r\n            }\r\n            \r\n            // Regeneration glow effect\r\n            if (this._isRegenerating) {\r\n                (sprite as any).color = { r: 150, g: 255, b: 255, a: 255 }; // Cyan glow\r\n            }\r\n        }\r\n    }\r\n    \r\n    private showDamageEffect(): void {\r\n        // Flash effect when taking damage\r\n        const sprite = this.getComponent('cc.Sprite');\r\n        if (sprite) {\r\n            const originalColor = (sprite as any).color;\r\n            (sprite as any).color = { r: 255, g: 50, b: 50, a: 255 };\r\n            \r\n            this.scheduleOnce(() => {\r\n                (sprite as any).color = originalColor;\r\n            }, 0.2);\r\n        }\r\n    }\r\n    \r\n    private showLevelUpEffect(): void {\r\n        // Bright flash for level up\r\n        const sprite = this.getComponent('cc.Sprite');\r\n        if (sprite) {\r\n            (sprite as any).color = { r: 255, g: 255, b: 255, a: 255 };\r\n            \r\n            // Pulse effect\r\n            for (let i = 0; i < 3; i++) {\r\n                this.scheduleOnce(() => {\r\n                    (sprite as any).color = { r: 255, g: 255, b: 100, a: 255 };\r\n                }, i * 0.2);\r\n                \r\n                this.scheduleOnce(() => {\r\n                    (sprite as any).color = { r: 255, g: 255, b: 255, a: 255 };\r\n                }, i * 0.2 + 0.1);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private showDestroyedEffect(): void {\r\n        // Destruction effect - fade to dark\r\n        const sprite = this.getComponent('cc.Sprite');\r\n        if (sprite) {\r\n            (sprite as any).color = { r: 50, g: 50, b: 50, a: 255 };\r\n        }\r\n    }\r\n    \r\n    // Public getters for UI and game logic\r\n    public getCurrentHealth(): number {\r\n        return this._currentCoreHealth;\r\n    }\r\n    \r\n    public getMaxHealth(): number {\r\n        return this.maxCoreHealth;\r\n    }\r\n    \r\n    public getCurrentExperience(): number {\r\n        return this._currentExperience;\r\n    }\r\n    \r\n    public getExperienceCapacity(): number {\r\n        return this.experienceCapacity;\r\n    }\r\n    \r\n    public getCoreLevel(): number {\r\n        return this._coreLevel;\r\n    }\r\n    \r\n    public isRegenerating(): boolean {\r\n        return this._isRegenerating;\r\n    }\r\n    \r\n    public getHealthPercent(): number {\r\n        return this._currentCoreHealth / this.maxCoreHealth;\r\n    }\r\n}"]}