{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/powerups/PowerUp.ts"],"names":["_decorator","Component","Collider2D","Contact2DType","Sprite","Color","UITransform","Enum","GameManager","ccclass","property","PowerUpType","PowerUp","type","_isCollected","_sprite","onLoad","getComponent","initializePowerUpVisual","collider","on","BEGIN_CONTACT","onBeginContact","start","console","log","update","dt","node","isValid","currentPos","position","newY","y","fallSpeed","setPosition","x","z","destroy","initializePhysics","transform","setContentSize","powerUpType","MULTI_BALL","color","LASER_PADDLE","LARGER_PADDLE","SMALLER_PADDLE","FASTER_BALL","SLOWER_BALL","toString","getPowerUpTypeName","getPowerUpDescription","onDestroy","off","selfCollider","otherCollider","name","collectPowerUp","activateEffect","duration","scheduleOnce","deactivateEffect","getGameManager","getInstance"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Collider2D, Contact2DType, Sprite, Color, UITransform, Vec3, Enum } from 'cc';\r\nimport { GameManager } from '../gameplay/GameManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum PowerUpType {\r\n    MULTI_BALL = 0,\r\n    LASER_PADDLE = 1,\r\n    LARGER_PADDLE = 2,\r\n    SMALLER_PADDLE = 3,\r\n    FASTER_BALL = 4,\r\n    SLOWER_BALL = 5\r\n}\r\n\r\n@ccclass('PowerUp')\r\nexport abstract class PowerUp extends Component {\r\n    @property\r\n    public fallSpeed: number = 200;\r\n\r\n    @property\r\n    public duration: number = 10.0;\r\n    \r\n    @property({type: Enum(PowerUpType)})\r\n    public powerUpType: PowerUpType = PowerUpType.MULTI_BALL;\r\n\r\n    private _isCollected: boolean = false;\r\n    private _sprite: Sprite | null = null;\r\n\r\n    protected onLoad(): void {\r\n        this._sprite = this.getComponent(Sprite);\r\n        \r\n        // Initialize programmatic visual appearance\r\n        this.initializePowerUpVisual();\r\n        \r\n        const collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n        }\r\n    }\r\n    \r\n    protected start(): void {\r\n        // ‰ΩøÁî®ÁÆÄÂçïÁöÑ‰ΩçÁΩÆÁßªÂä®‰ª£ÊõøÁâ©ÁêÜÈÄüÂ∫¶ÔºåÈÅøÂÖçÁâ©ÁêÜ‰∏ñÁïåÂàùÂßãÂåñÈóÆÈ¢ò\r\n        console.log(`PowerUp started, using position-based movement`);\r\n    }\r\n    \r\n    protected update(dt: number): void {\r\n        // ‰ΩøÁî®ÁÆÄÂçïÁöÑ‰ΩçÁΩÆÊõ¥Êñ∞ÂÆûÁé∞ÊéâËêΩÊïàÊûú\r\n        if (this.node && this.node.isValid) {\r\n            const currentPos = this.node.position;\r\n            const newY = currentPos.y - this.fallSpeed * dt;\r\n            this.node.setPosition(currentPos.x, newY, currentPos.z);\r\n            \r\n            // Ê£ÄÊü•ÊòØÂê¶ÊéâÂá∫Â±èÂπïÂ∫ïÈÉ®\r\n            if (newY < -500) { // Â±èÂπïÂ∫ïÈÉ®Â§ßÁ∫¶ÊòØ-480\r\n                this.node.destroy();\r\n            }\r\n        }\r\n    }\r\n    \r\n    private initializePhysics(): void {\r\n        // ‰∏çÂÜçÈúÄË¶ÅËÆæÁΩÆlinearVelocityÔºå‰ΩøÁî®‰ΩçÁΩÆÊõ¥Êñ∞\r\n        console.log(`PowerUp using position-based movement, no physics velocity needed`);\r\n    }\r\n    \r\n    /**\r\n     * Á®ãÂ∫èÂåñÁîüÊàêPowerUpËßÜËßâÊïàÊûú - ÁÆÄÂçïÂá†‰ΩïÂΩ¢Áä∂ÊñπÊ°à\r\n     * Following the discussion.md approach: simple geometric shapes instead of complex sprites\r\n     */\r\n    protected initializePowerUpVisual(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        // Set base size for all power-ups\r\n        const transform = this.node.getComponent(UITransform);\r\n        if (transform) {\r\n            transform.setContentSize(32, 32); // Standard 32x32 size\r\n        }\r\n        \r\n        // Generate geometric shape based on power-up type\r\n        switch (this.powerUpType) {\r\n            case PowerUpType.MULTI_BALL:\r\n                // Yellow circle ‚≠ê - represents multiple balls\r\n                this._sprite.color = new Color(255, 255, 0, 255); // Bright yellow\r\n                // Note: Sprite shape determined by SpriteFrame, color makes it distinctive\r\n                break;\r\n                \r\n            case PowerUpType.LASER_PADDLE:\r\n                // Red rectangle üî¥ - represents laser weapon\r\n                this._sprite.color = new Color(255, 0, 0, 255); // Bright red\r\n                if (transform) {\r\n                    transform.setContentSize(40, 20); // Rectangle shape\r\n                }\r\n                break;\r\n                \r\n            case PowerUpType.LARGER_PADDLE:\r\n                // Green plus/expand shape - represents paddle enlargement\r\n                this._sprite.color = new Color(0, 255, 0, 255); // Bright green\r\n                if (transform) {\r\n                    transform.setContentSize(36, 36); // Slightly larger\r\n                }\r\n                break;\r\n                \r\n            case PowerUpType.SMALLER_PADDLE:\r\n                // Orange minus/contract shape - represents paddle shrinking (negative effect)\r\n                this._sprite.color = new Color(255, 165, 0, 255); // Orange warning\r\n                if (transform) {\r\n                    transform.setContentSize(24, 24); // Slightly smaller\r\n                }\r\n                break;\r\n                \r\n            case PowerUpType.FASTER_BALL:\r\n                // Cyan arrow/speed lines - represents acceleration\r\n                this._sprite.color = new Color(0, 255, 255, 255); // Cyan\r\n                break;\r\n                \r\n            case PowerUpType.SLOWER_BALL:\r\n                // Blue snail/slow effect - represents deceleration\r\n                this._sprite.color = new Color(0, 100, 255, 255); // Blue\r\n                break;\r\n        }\r\n        \r\n        console.log(`PowerUp visual initialized: Type ${PowerUpType[this.powerUpType]}, Color: ${this._sprite.color.toString()}`);\r\n    }\r\n    \r\n    /**\r\n     * Get power-up type name for debugging and UI display\r\n     */\r\n    public getPowerUpTypeName(): string {\r\n        return PowerUpType[this.powerUpType] || 'UNKNOWN';\r\n    }\r\n    \r\n    /**\r\n     * Get power-up description for player feedback\r\n     */\r\n    public getPowerUpDescription(): string {\r\n        switch (this.powerUpType) {\r\n            case PowerUpType.MULTI_BALL:\r\n                return \"Spawns 2 additional balls\";\r\n            case PowerUpType.LASER_PADDLE:\r\n                return \"Paddle can shoot lasers for 10 seconds\";\r\n            case PowerUpType.LARGER_PADDLE:\r\n                return \"Paddle becomes larger\";\r\n            case PowerUpType.SMALLER_PADDLE:\r\n                return \"Paddle becomes smaller (negative effect)\";\r\n            case PowerUpType.FASTER_BALL:\r\n                return \"Ball moves faster\";\r\n            case PowerUpType.SLOWER_BALL:\r\n                return \"Ball moves slower\";\r\n            default:\r\n                return \"Unknown power-up effect\";\r\n        }\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        const collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.off(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n        }\r\n    }\r\n\r\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D): void {\r\n        if (this._isCollected) return;\r\n\r\n        if (otherCollider.node.name === 'Paddle' || otherCollider.getComponent('PaddleController')) {\r\n            this.collectPowerUp();\r\n        } else if (otherCollider.getComponent('DeathZone')) {\r\n            this.node.destroy();\r\n        }\r\n    }\r\n\r\n    private collectPowerUp(): void {\r\n        if (this._isCollected) return;\r\n        \r\n        this._isCollected = true;\r\n        console.log(`Collected power-up: ${this.getPowerUpTypeName()} - ${this.getPowerUpDescription()}`);\r\n        \r\n        this.activateEffect();\r\n        \r\n        if (this.duration > 0) {\r\n            this.scheduleOnce(() => {\r\n                this.deactivateEffect();\r\n                console.log(`Power-up expired: ${this.getPowerUpTypeName()}`);\r\n            }, this.duration);\r\n        }\r\n\r\n        this.node.destroy();\r\n    }\r\n\r\n    protected abstract activateEffect(): void;\r\n\r\n    protected deactivateEffect(): void {\r\n        // Default implementation - override in derived classes if needed\r\n    }\r\n\r\n    protected getGameManager(): GameManager | null {\r\n        return GameManager.getInstance();\r\n    }\r\n}"]}