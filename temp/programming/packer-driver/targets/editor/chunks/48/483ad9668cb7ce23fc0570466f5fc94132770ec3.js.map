{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/gameplay/EnhancedBrick.ts"],"names":["_decorator","Component","Collider2D","Contact2DType","Color","Sprite","tween","Vec3","Prefab","instantiate","RigidBody2D","Vec2","Enum","GameManager","RelicManager","ccclass","property","BrickType","EnhancedBrick","type","_maxHealth","_sprite","_originalColor","_lastHitTime","_isElectric","_isShielded","_regenerationTimer","_electricChainProcessed","_explosionProcessed","onLoad","health","getComponent","color","clone","collider","on","BEGIN_CONTACT","onBeginContact","initializeBrickType","update","dt","brickType","REGENERATING","Math","min","regenerationRate","updateVisualState","updateTimeBasedEffects","NORMAL","setBrickColor","RED","REINFORCED","BLUE","scoreValue","EXPLOSIVE","YELLOW","ELECTRIC","EXPERIENCE","GREEN","experienceValue","PHASE","MAGNETIC","REFLECTIVE","POISON","ICE","FIRE","SPLITTING","TELEPORT","SHIELD","GRAVITY","TIME","HEALING","CURSED","CRYSTAL","RUBBER","METAL","VOID","LIGHT","DARK","selfCollider","otherCollider","contact","console","log","node","name","ball","random","phaseProbability","showPhaseEffect","showShieldEffect","applyPreHitEffects","takeDamage","getWorldPosition","ballCollider","applyMagneticEffect","applyIceEffect","applyFireEffect","applyGravityEffect","applyTimeEffect","damage","impactPosition","onDestroyed","showDamageEffect","gameManager","getInstance","relicManager","applyDestructionEffects","hasRelic","explodeAdjacent","brickPosition","dropsExperience","onBrickDestroyed","warn","destroy","createExplosion","triggerElectricChain","createSplitBricks","teleportBall","healPaddle","applyCurse","triggerCrystalChain","consumeBall","center","allBricks","parent","getComponentsInChildren","affectedCount","brick","distance","explosionRadius","max","floor","showExplosionEffect","nearbyBricks","findNearbyBricks","electricChainDistance","showElectricEffect","length","ballRigidBody","direction","subtract","normalize","force","multiplyScalar","x","y","magneticForce","applyForceToCenter","setSpeedMultiplier","paddle","getComponentInChildren","instantRepair","dropExperienceOrb","experienceOrbPrefab","orb","setParent","setWorldPosition","radius","nearby","push","healthRatio","currentColor","r","g","b","sparkleEffect","pulseEffect","to","WHITE","start","TRANSPARENT","CYAN","currentHealth","maxHealth","isDestroyed","setShielded","shielded"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Collider2D, Contact2DType, IPhysics2DContact, Color, Sprite, tween, Vec3, Prefab, instantiate, RigidBody2D, Vec2, Enum } from 'cc';\r\nimport { GameManager } from './GameManager';\r\nimport { RelicManager } from '../managers/RelicManager';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum BrickType {\r\n    NORMAL = 0,\r\n    REINFORCED = 1,        // 需要多次击打\r\n    EXPLOSIVE = 2,         // 爆炸砖块\r\n    ELECTRIC = 3,          // 导电砖块\r\n    EXPERIENCE = 4,        // 经验砖块\r\n    REGENERATING = 5,      // 自我修复砖块\r\n    PHASE = 6,            // 相位砖块(有时穿透)\r\n    MAGNETIC = 7,          // 磁性砖块(吸引球)\r\n    REFLECTIVE = 8,        // 反射砖块(改变球方向)\r\n    POISON = 9,           // 毒性砖块(持续伤害)\r\n    ICE = 10,             // 冰冻砖块(减慢球速)\r\n    FIRE = 11,            // 火焰砖块(加速球)\r\n    SPLITTING = 12,       // 分裂砖块(分裂成多个)\r\n    TELEPORT = 13,        // 传送砖块(球随机传送)\r\n    SHIELD = 14,          // 护盾砖块(保护周围砖块)\r\n    GRAVITY = 15,         // 重力砖块(改变重力)\r\n    TIME = 16,            // 时间砖块(减慢/加速时间)\r\n    HEALING = 17,         // 治疗砖块(修复挡板)\r\n    CURSED = 18,          // 诅咒砖块(负面效果)\r\n    CRYSTAL = 19,         // 水晶砖块(连锁反应)\r\n    RUBBER = 20,          // 橡胶砖块(超强反弹)\r\n    METAL = 21,           // 金属砖块(反弹伤害)\r\n    VOID = 22,            // 虚空砖块(吞噬球)\r\n    LIGHT = 23,           // 光明砖块(照亮区域)\r\n    DARK = 24             // 黑暗砖块(减少视野)\r\n}\r\n\r\n@ccclass('EnhancedBrick')\r\nexport class EnhancedBrick extends Component {\r\n    @property({type: Enum(BrickType)})\r\n    public brickType: BrickType = BrickType.NORMAL;\r\n    \r\n    @property\r\n    public health: number = 1;\r\n    \r\n    @property  \r\n    public scoreValue: number = 10;\r\n    \r\n    @property\r\n    public experienceValue: number = 5;\r\n    \r\n    @property({type: Prefab})\r\n    public experienceOrbPrefab: Prefab | null = null;\r\n    \r\n    // Type-specific properties\r\n    @property\r\n    public explosionRadius: number = 100;\r\n    \r\n    @property\r\n    public electricChainDistance: number = 80;\r\n    \r\n    @property\r\n    public magneticForce: number = 300;\r\n    \r\n    @property\r\n    public regenerationRate: number = 0.1; // Health per second\r\n    \r\n    @property\r\n    public phaseProbability: number = 0.3; // 30% chance to phase\r\n    \r\n    private _maxHealth: number = 0;\r\n    private _sprite: Sprite | null = null;\r\n    private _originalColor: Color = new Color();\r\n    private _lastHitTime: number = 0;\r\n    private _isElectric: boolean = false;\r\n    private _isShielded: boolean = false;\r\n    private _regenerationTimer: number = 0;\r\n    private _electricChainProcessed: boolean = false;  // 防止电击链无限递归\r\n    private _explosionProcessed: boolean = false;      // 防止爆炸链无限递归\r\n    \r\n    protected onLoad(): void {\r\n        this._maxHealth = this.health;\r\n        this._sprite = this.getComponent(Sprite);\r\n        \r\n        if (this._sprite) {\r\n            this._originalColor = this._sprite.color.clone();\r\n        }\r\n        \r\n        const collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n        }\r\n        \r\n        this.initializeBrickType();\r\n    }\r\n    \r\n    protected update(dt: number): void {\r\n        this._lastHitTime += dt;\r\n        \r\n        // Handle regenerating bricks\r\n        if (this.brickType === BrickType.REGENERATING && this.health < this._maxHealth) {\r\n            this._regenerationTimer += dt;\r\n            if (this._regenerationTimer >= 1.0) {\r\n                this.health = Math.min(this._maxHealth, this.health + this.regenerationRate);\r\n                this.updateVisualState();\r\n                this._regenerationTimer = 0;\r\n            }\r\n        }\r\n        \r\n        // Handle time-based effects\r\n        this.updateTimeBasedEffects(dt);\r\n    }\r\n    \r\n    public initializeBrickType(): void {\r\n        switch (this.brickType) {\r\n            case BrickType.NORMAL:\r\n                this.setBrickColor(Color.RED);\r\n                break;\r\n            case BrickType.REINFORCED:\r\n                this.health = 3;\r\n                this._maxHealth = 3;\r\n                this.setBrickColor(Color.BLUE);\r\n                this.scoreValue = 30;\r\n                break;\r\n            case BrickType.EXPLOSIVE:\r\n                this.setBrickColor(Color.YELLOW);\r\n                this.scoreValue = 25;\r\n                break;\r\n            case BrickType.ELECTRIC:\r\n                this.setBrickColor(new Color(0, 255, 255)); // Cyan\r\n                this.scoreValue = 20;\r\n                break;\r\n            case BrickType.EXPERIENCE:\r\n                this.setBrickColor(Color.GREEN);\r\n                this.experienceValue = 20;\r\n                break;\r\n            case BrickType.REGENERATING:\r\n                this.health = 2;\r\n                this._maxHealth = 2;\r\n                this.setBrickColor(new Color(255, 0, 255)); // Magenta\r\n                break;\r\n            case BrickType.PHASE:\r\n                this.setBrickColor(new Color(128, 128, 255)); // Light blue\r\n                break;\r\n            case BrickType.MAGNETIC:\r\n                this.setBrickColor(new Color(128, 0, 128)); // Purple\r\n                break;\r\n            case BrickType.REFLECTIVE:\r\n                this.setBrickColor(new Color(255, 215, 0)); // Gold\r\n                this.scoreValue = 15;\r\n                break;\r\n            case BrickType.POISON:\r\n                this.setBrickColor(new Color(128, 255, 0)); // Lime green\r\n                this.scoreValue = 18;\r\n                break;\r\n            case BrickType.ICE:\r\n                this.setBrickColor(new Color(200, 255, 255)); // Light cyan\r\n                break;\r\n            case BrickType.FIRE:\r\n                this.setBrickColor(new Color(255, 100, 0)); // Orange\r\n                break;\r\n            case BrickType.SPLITTING:\r\n                this.setBrickColor(new Color(255, 182, 193)); // Light pink\r\n                this.scoreValue = 22;\r\n                break;\r\n            case BrickType.TELEPORT:\r\n                this.setBrickColor(new Color(138, 43, 226)); // Blue violet\r\n                this.scoreValue = 35;\r\n                break;\r\n            case BrickType.SHIELD:\r\n                this.setBrickColor(new Color(192, 192, 192)); // Silver\r\n                this.health = 2;\r\n                this._maxHealth = 2;\r\n                this.scoreValue = 40;\r\n                break;\r\n            case BrickType.GRAVITY:\r\n                this.setBrickColor(new Color(75, 0, 130)); // Indigo\r\n                this.scoreValue = 50;\r\n                break;\r\n            case BrickType.TIME:\r\n                this.setBrickColor(new Color(255, 20, 147)); // Deep pink\r\n                this.scoreValue = 45;\r\n                break;\r\n            case BrickType.HEALING:\r\n                this.setBrickColor(new Color(144, 238, 144)); // Light green\r\n                this.scoreValue = 12;\r\n                break;\r\n            case BrickType.CURSED:\r\n                this.setBrickColor(new Color(128, 0, 0)); // Maroon\r\n                this.scoreValue = 5;\r\n                break;\r\n            case BrickType.CRYSTAL:\r\n                this.setBrickColor(new Color(230, 230, 250)); // Lavender\r\n                this.scoreValue = 30;\r\n                break;\r\n            case BrickType.RUBBER:\r\n                this.setBrickColor(new Color(255, 105, 180)); // Hot pink\r\n                this.scoreValue = 8;\r\n                break;\r\n            case BrickType.METAL:\r\n                this.health = 4;\r\n                this._maxHealth = 4;\r\n                this.setBrickColor(new Color(169, 169, 169)); // Dark gray\r\n                this.scoreValue = 50;\r\n                break;\r\n            case BrickType.VOID:\r\n                this.setBrickColor(new Color(25, 25, 112)); // Midnight blue\r\n                this.scoreValue = 100;\r\n                break;\r\n            case BrickType.LIGHT:\r\n                this.setBrickColor(new Color(255, 255, 224)); // Light yellow\r\n                this.scoreValue = 15;\r\n                break;\r\n            case BrickType.DARK:\r\n                this.setBrickColor(new Color(47, 79, 79)); // Dark slate gray\r\n                this.scoreValue = 25;\r\n                break;\r\n        }\r\n    }\r\n    \r\n    private setBrickColor(color: Color): void {\r\n        if (this._sprite) {\r\n            this._sprite.color = color;\r\n            this._originalColor = color.clone();\r\n        }\r\n    }\r\n    \r\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null): void {\r\n        console.log('🔥 Brick collision detected with:', otherCollider.node.name); // 调试日志\r\n        \r\n        // 检查是否是Ball - 兼容两种组件名称\r\n        const ball = otherCollider.getComponent('Ball') || otherCollider.getComponent('EnhancedBall');\r\n        if (!ball) {\r\n            console.log('⚠️ Not a ball collision, skipping');\r\n            return;\r\n        }\r\n        \r\n        console.log('✅ Ball detected, processing collision');\r\n        \r\n        // Handle phase bricks\r\n        if (this.brickType === BrickType.PHASE && Math.random() < this.phaseProbability) {\r\n            console.log('Ball phased through brick!');\r\n            this.showPhaseEffect();\r\n            return; // Ball passes through\r\n        }\r\n        \r\n        // Handle shielded bricks\r\n        if (this._isShielded) {\r\n            console.log('Attack blocked by shield!');\r\n            this.showShieldEffect();\r\n            return;\r\n        }\r\n        \r\n        // Apply brick-specific pre-hit effects\r\n        this.applyPreHitEffects(ball, otherCollider);\r\n        \r\n        // Take damage\r\n        this.takeDamage(1, otherCollider.node.getWorldPosition());\r\n    }\r\n    \r\n    private applyPreHitEffects(ball: any, ballCollider: Collider2D): void {\r\n        switch (this.brickType) {\r\n            case BrickType.MAGNETIC:\r\n                this.applyMagneticEffect(ballCollider);\r\n                break;\r\n            case BrickType.ICE:\r\n                this.applyIceEffect(ball);\r\n                break;\r\n            case BrickType.FIRE:\r\n                this.applyFireEffect(ball);\r\n                break;\r\n            case BrickType.GRAVITY:\r\n                this.applyGravityEffect();\r\n                break;\r\n            case BrickType.TIME:\r\n                this.applyTimeEffect();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public takeDamage(damage: number, impactPosition?: Vec3): void {\r\n        console.log(`🎯 Brick taking ${damage} damage. Health: ${this.health} -> ${this.health - damage}`);\r\n        \r\n        this.health -= damage;\r\n        this._lastHitTime = 0;\r\n        \r\n        if (this.health <= 0) {\r\n            console.log('💥 Brick health depleted, destroying...');\r\n            this.onDestroyed(impactPosition);\r\n        } else {\r\n            console.log(`🔧 Brick damaged but not destroyed. Remaining health: ${this.health}`);\r\n            this.showDamageEffect();\r\n            this.updateVisualState();\r\n        }\r\n    }\r\n    \r\n    private onDestroyed(impactPosition?: Vec3): void {\r\n        console.log('🧱 Brick destruction started');\r\n        \r\n        const gameManager = GameManager.getInstance();\r\n        const relicManager = RelicManager.getInstance();\r\n        \r\n        // Apply post-destruction effects before notifying GameManager\r\n        this.applyDestructionEffects(impactPosition);\r\n        \r\n        // Check for explosive bricks relic\r\n        if (relicManager && (relicManager as any).hasRelic) {\r\n            (relicManager as any).hasRelic('ExplosiveBricks');\r\n            this.explodeAdjacent(impactPosition);\r\n        }\r\n        \r\n        // Notify GameManager (handles score, level completion, power-ups)\r\n        const brickPosition = this.node.getWorldPosition();\r\n        const dropsExperience = this.brickType === BrickType.EXPERIENCE || Math.random() < 0.3;\r\n        \r\n        if (gameManager) {\r\n            console.log(`📈 Notifying GameManager: score=${this.scoreValue}, drops=${dropsExperience}`);\r\n            gameManager.onBrickDestroyed(this.scoreValue, brickPosition, dropsExperience);\r\n        } else {\r\n            console.warn('⚠️ GameManager not found, cannot update score');\r\n        }\r\n        \r\n        // Destroy the brick\r\n        console.log('🗑️ Destroying brick node');\r\n        this.node.destroy();\r\n    }\r\n    \r\n    private applyDestructionEffects(impactPosition?: Vec3): void {\r\n        switch (this.brickType) {\r\n            case BrickType.EXPLOSIVE:\r\n                this.createExplosion(impactPosition);\r\n                break;\r\n            case BrickType.ELECTRIC:\r\n                this.triggerElectricChain();\r\n                break;\r\n            case BrickType.SPLITTING:\r\n                this.createSplitBricks();\r\n                break;\r\n            case BrickType.TELEPORT:\r\n                this.teleportBall();\r\n                break;\r\n            case BrickType.HEALING:\r\n                this.healPaddle();\r\n                break;\r\n            case BrickType.CURSED:\r\n                this.applyCurse();\r\n                break;\r\n            case BrickType.CRYSTAL:\r\n                this.triggerCrystalChain();\r\n                break;\r\n            case BrickType.VOID:\r\n                this.consumeBall();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    private createExplosion(center?: Vec3): void {\r\n        // 防止无限递归: 如果已经处理过，直接返回\r\n        if (this._explosionProcessed) {\r\n            return;\r\n        }\r\n\r\n        // 标记为已处理\r\n        this._explosionProcessed = true;\r\n\r\n        if (!center) center = this.node.getWorldPosition();\r\n\r\n        // Find all bricks within explosion radius\r\n        const allBricks = this.node.parent?.getComponentsInChildren(EnhancedBrick) || [];\r\n\r\n        let affectedCount = 0;\r\n        for (const brick of allBricks) {\r\n            if (brick === this) continue;\r\n\r\n            const distance = Vec3.distance(center, brick.node.getWorldPosition());\r\n            if (distance <= this.explosionRadius) {\r\n                // Damage decreases with distance\r\n                const damage = Math.max(1, Math.floor(3 * (1 - distance / this.explosionRadius)));\r\n                brick.takeDamage(damage);\r\n                brick.showExplosionEffect();\r\n                affectedCount++;\r\n            }\r\n        }\r\n\r\n        console.log(`Explosion at ${center} with radius ${this.explosionRadius}, affected ${affectedCount} bricks`);\r\n    }\r\n    \r\n    private triggerElectricChain(): void {\r\n        // 防止无限递归: 如果已经处理过，直接返回\r\n        if (this._electricChainProcessed) {\r\n            return;\r\n        }\r\n\r\n        // 标记为已处理\r\n        this._electricChainProcessed = true;\r\n\r\n        const nearbyBricks = this.findNearbyBricks(this.electricChainDistance);\r\n\r\n        for (const brick of nearbyBricks) {\r\n            // 只传播给未处理过的电击砖\r\n            if (brick.brickType === BrickType.ELECTRIC && !brick._electricChainProcessed) {\r\n                brick._electricChainProcessed = true;  // 先标记，防止循环\r\n                brick.takeDamage(1);\r\n                brick.showElectricEffect();\r\n            }\r\n        }\r\n\r\n        console.log(`Electric chain triggered, affected ${nearbyBricks.length} bricks`);\r\n    }\r\n    \r\n    private applyMagneticEffect(ballCollider: Collider2D): void {\r\n        const ballRigidBody = ballCollider.getComponent(RigidBody2D);\r\n        if (!ballRigidBody) return;\r\n        \r\n        const direction = Vec3.subtract(new Vec3(), this.node.getWorldPosition(), ballCollider.node.getWorldPosition()).normalize();\r\n        const force = Vec2.multiplyScalar(new Vec2(), new Vec2(direction.x, direction.y), this.magneticForce);\r\n        \r\n        ballRigidBody.applyForceToCenter(force, true);\r\n        console.log('Magnetic force applied to ball');\r\n    }\r\n    \r\n    private applyIceEffect(ball: any): void {\r\n        // Slow down the ball temporarily\r\n        if (ball && ball.setSpeedMultiplier) {\r\n            ball.setSpeedMultiplier(0.5, 3.0); // 50% speed for 3 seconds\r\n            console.log('Ball slowed by ice brick');\r\n        }\r\n    }\r\n    \r\n    private applyFireEffect(ball: any): void {\r\n        // Speed up the ball temporarily  \r\n        if (ball && ball.setSpeedMultiplier) {\r\n            ball.setSpeedMultiplier(1.5, 3.0); // 150% speed for 3 seconds\r\n            console.log('Ball accelerated by fire brick');\r\n        }\r\n    }\r\n    \r\n    private healPaddle(): void {\r\n        const paddle = this.node.parent?.getComponentInChildren('EnhancedPaddleController') as any;\r\n        if (paddle && paddle.instantRepair) {\r\n            paddle.instantRepair(25);\r\n            console.log('Paddle healed by healing brick');\r\n        }\r\n    }\r\n    \r\n    private dropExperienceOrb(): void {\r\n        if (!this.experienceOrbPrefab) return;\r\n        \r\n        const orb = instantiate(this.experienceOrbPrefab);\r\n        orb.setParent(this.node.parent);\r\n        orb.setWorldPosition(this.node.getWorldPosition());\r\n        \r\n        console.log(`Dropped experience orb worth ${this.experienceValue} XP`);\r\n    }\r\n    \r\n    private findNearbyBricks(radius: number): EnhancedBrick[] {\r\n        const allBricks = this.node.parent?.getComponentsInChildren(EnhancedBrick) || [];\r\n        const nearby: EnhancedBrick[] = [];\r\n        \r\n        for (const brick of allBricks) {\r\n            if (brick === this) continue;\r\n            \r\n            const distance = Vec3.distance(this.node.getWorldPosition(), brick.node.getWorldPosition());\r\n            if (distance <= radius) {\r\n                nearby.push(brick);\r\n            }\r\n        }\r\n        \r\n        return nearby;\r\n    }\r\n    \r\n    private updateVisualState(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        const healthRatio = this.health / this._maxHealth;\r\n        const currentColor = this._originalColor.clone();\r\n        \r\n        // Darken based on damage\r\n        currentColor.r = Math.floor(currentColor.r * healthRatio);\r\n        currentColor.g = Math.floor(currentColor.g * healthRatio);  \r\n        currentColor.b = Math.floor(currentColor.b * healthRatio);\r\n        \r\n        this._sprite.color = currentColor;\r\n    }\r\n    \r\n    private updateTimeBasedEffects(dt: number): void {\r\n        // Add time-based visual effects for special bricks\r\n        switch (this.brickType) {\r\n            case BrickType.ELECTRIC:\r\n                if (this._isElectric) {\r\n                    this.sparkleEffect(dt);\r\n                }\r\n                break;\r\n            case BrickType.MAGNETIC:\r\n                this.pulseEffect(dt);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    // Visual effect methods\r\n    private showDamageEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.1, { color: Color.WHITE })\r\n            .to(0.1, { color: this._sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private showPhaseEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.2, { color: Color.TRANSPARENT })\r\n            .to(0.2, { color: this._originalColor })\r\n            .start();\r\n    }\r\n    \r\n    private showExplosionEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.1, { color: Color.YELLOW })\r\n            .to(0.1, { color: this._sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private showElectricEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.05, { color: Color.WHITE })\r\n            .to(0.05, { color: Color.CYAN })\r\n            .to(0.05, { color: this._sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private showShieldEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.1, { color: Color.BLUE })\r\n            .to(0.1, { color: this._sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private sparkleEffect(dt: number): void {\r\n        // Implement sparkling effect for electric bricks\r\n    }\r\n    \r\n    private pulseEffect(dt: number): void {\r\n        // Implement pulsing effect for magnetic bricks  \r\n    }\r\n    \r\n    // Additional effect implementations would go here...\r\n    private createSplitBricks(): void { console.log('Brick split into smaller pieces'); }\r\n    private teleportBall(): void { console.log('Ball teleported to random location'); }\r\n    private applyCurse(): void { console.log('Curse applied to player'); }\r\n    private triggerCrystalChain(): void { console.log('Crystal chain reaction triggered'); }\r\n    private consumeBall(): void { console.log('Ball consumed by void brick'); }\r\n    private applyGravityEffect(): void { console.log('Gravity modified'); }\r\n    private applyTimeEffect(): void { console.log('Time flow modified'); }\r\n    private explodeAdjacent(center?: Vec3): void { \r\n        // Implementation from original Brick.ts\r\n        this.createExplosion(center);\r\n    }\r\n    \r\n    // Public accessors\r\n    public get currentHealth(): number { return this.health; }\r\n    public get maxHealth(): number { return this._maxHealth; }\r\n    public get isDestroyed(): boolean { return this.health <= 0; }\r\n    \r\n    // Shield system\r\n    public setShielded(shielded: boolean): void {\r\n        this._isShielded = shielded;\r\n        if (shielded && this._sprite) {\r\n            this._sprite.color = new Color(this._sprite.color.r, this._sprite.color.g, this._sprite.color.b, 200);\r\n        }\r\n    }\r\n}"]}