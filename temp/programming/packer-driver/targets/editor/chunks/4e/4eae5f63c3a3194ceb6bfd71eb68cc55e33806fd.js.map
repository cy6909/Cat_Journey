{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/gameplay/LayoutGenerator.ts"],"names":["LayoutGenerator","StandardGridLayout","SymmetricPatternLayout","ClusterRandomLayout","FortressLayout","LayeredDefenseLayout","BrickType","generateLayout","config","layoutType","generateNormalLayout","generateSpecialLayout","layoutTypes","selectedType","Math","floor","random","length","generate","bricks","gridRows","gridCols","density","row","col","push","type","NORMAL","health","baseHealth","patterns","selectedPattern","generateTriangle","generateDiamond","generateCross","centerCol","width","startCol","i","centerRow","distanceFromCenter","abs","thickness","offset","exists","some","b","clusterCount","clusterSize","c","offsetRow","offsetCol","wallThickness","wallHealth","gateWidth","gatePosition","min","REINFORCED","innerStartRow","innerDensity","EXPERIENCE","layers","PHASE","rows","REGENERATING","currentRow","layer","r"],"mappings":"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","sourcesContent":["import { BrickType } from \"./EnhancedBrick\";\r\nimport { DifficultyConfig } from \"./DifficultySystem\";\r\n\r\n/**\r\n * 砖块数据 - 用于布局生成\r\n */\r\nexport interface BrickData {\r\n    type: BrickType;\r\n    health: number;\r\n    row: number;\r\n    col: number;\r\n}\r\n\r\n/**\r\n * 布局模板接口\r\n */\r\nexport interface ILayoutTemplate {\r\n    generate(config: DifficultyConfig): BrickData[];\r\n}\r\n\r\n/**\r\n * 布局生成器 - 根据难度配置生成砖块布局\r\n */\r\nexport class LayoutGenerator {\r\n    /**\r\n     * 根据难度配置选择并生成布局\r\n     */\r\n    public static generateLayout(config: DifficultyConfig): BrickData[] {\r\n        if (config.layoutType === 'normal') {\r\n            return this.generateNormalLayout(config);\r\n        } else {\r\n            return this.generateSpecialLayout(config);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生成Normal布局 (关卡1-9)\r\n     */\r\n    private static generateNormalLayout(config: DifficultyConfig): BrickData[] {\r\n        // 随机选择Normal布局类型\r\n        const layoutTypes = ['STANDARD_GRID', 'SYMMETRIC_PATTERN', 'CLUSTER_RANDOM'];\r\n        const selectedType = layoutTypes[Math.floor(Math.random() * layoutTypes.length)];\r\n\r\n        switch (selectedType) {\r\n            case 'STANDARD_GRID':\r\n                return new StandardGridLayout().generate(config);\r\n            case 'SYMMETRIC_PATTERN':\r\n                return new SymmetricPatternLayout().generate(config);\r\n            case 'CLUSTER_RANDOM':\r\n                return new ClusterRandomLayout().generate(config);\r\n            default:\r\n                return new StandardGridLayout().generate(config);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生成Special布局 (关卡10+)\r\n     */\r\n    private static generateSpecialLayout(config: DifficultyConfig): BrickData[] {\r\n        // 随机选择Special布局类型\r\n        const layoutTypes = ['FORTRESS', 'LAYERED_DEFENSE'];\r\n        const selectedType = layoutTypes[Math.floor(Math.random() * layoutTypes.length)];\r\n\r\n        switch (selectedType) {\r\n            case 'FORTRESS':\r\n                return new FortressLayout().generate(config);\r\n            case 'LAYERED_DEFENSE':\r\n                return new LayeredDefenseLayout().generate(config);\r\n            default:\r\n                return new FortressLayout().generate(config);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 标准网格布局 - 矩形阵列 + 随机空缺\r\n */\r\nclass StandardGridLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, density } = config;\r\n\r\n        for (let row = 0; row < gridRows; row++) {\r\n            for (let col = 0; col < gridCols; col++) {\r\n                // 根据密度随机决定是否放置砖块\r\n                if (Math.random() > density) continue;\r\n\r\n                bricks.push({\r\n                    type: BrickType.NORMAL,  // 默认类型，后续会被difficulty系统修改\r\n                    health: config.baseHealth,\r\n                    row,\r\n                    col\r\n                });\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 对称图案布局 - 三角形/菱形/十字形\r\n */\r\nclass SymmetricPatternLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const patterns = ['triangle', 'diamond', 'cross'];\r\n        const selectedPattern = patterns[Math.floor(Math.random() * patterns.length)];\r\n\r\n        switch (selectedPattern) {\r\n            case 'triangle':\r\n                return this.generateTriangle(config);\r\n            case 'diamond':\r\n                return this.generateDiamond(config);\r\n            case 'cross':\r\n                return this.generateCross(config);\r\n            default:\r\n                return this.generateTriangle(config);\r\n        }\r\n    }\r\n\r\n    private generateTriangle(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n        const centerCol = Math.floor(gridCols / 2);\r\n\r\n        for (let row = 0; row < gridRows; row++) {\r\n            const width = row + 1;  // 每行宽度递增\r\n            const startCol = centerCol - Math.floor(width / 2);\r\n\r\n            for (let i = 0; i < width && startCol + i < gridCols; i++) {\r\n                bricks.push({\r\n                    type: BrickType.NORMAL,\r\n                    health: baseHealth,\r\n                    row,\r\n                    col: startCol + i\r\n                });\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n\r\n    private generateDiamond(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n        const centerRow = Math.floor(gridRows / 2);\r\n        const centerCol = Math.floor(gridCols / 2);\r\n\r\n        for (let row = 0; row < gridRows; row++) {\r\n            const distanceFromCenter = Math.abs(row - centerRow);\r\n            const width = (centerRow + 1) - distanceFromCenter;\r\n\r\n            const startCol = centerCol - Math.floor(width / 2);\r\n\r\n            for (let i = 0; i < width && startCol + i >= 0 && startCol + i < gridCols; i++) {\r\n                bricks.push({\r\n                    type: BrickType.NORMAL,\r\n                    health: baseHealth,\r\n                    row,\r\n                    col: startCol + i\r\n                });\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n\r\n    private generateCross(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n        const centerRow = Math.floor(gridRows / 2);\r\n        const centerCol = Math.floor(gridCols / 2);\r\n        const thickness = 2;  // 十字粗细\r\n\r\n        // 竖线\r\n        for (let row = 0; row < gridRows; row++) {\r\n            for (let offset = -thickness; offset <= thickness; offset++) {\r\n                const col = centerCol + offset;\r\n                if (col >= 0 && col < gridCols) {\r\n                    bricks.push({\r\n                        type: BrickType.NORMAL,\r\n                        health: baseHealth,\r\n                        row,\r\n                        col\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // 横线\r\n        for (let col = 0; col < gridCols; col++) {\r\n            for (let offset = -thickness; offset <= thickness; offset++) {\r\n                const row = centerRow + offset;\r\n                if (row >= 0 && row < gridRows) {\r\n                    // 避免重复添加中心交叉部分\r\n                    const exists = bricks.some(b => b.row === row && b.col === col);\r\n                    if (!exists) {\r\n                        bricks.push({\r\n                            type: BrickType.NORMAL,\r\n                            health: baseHealth,\r\n                            row,\r\n                            col\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 随机团块布局 - 分散的砖块团\r\n */\r\nclass ClusterRandomLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n        const clusterCount = 4 + Math.floor(Math.random() * 3);  // 4-6个团块\r\n        const clusterSize = 12 + Math.floor(Math.random() * 7);  // 12-18个砖块/团\r\n\r\n        for (let c = 0; c < clusterCount; c++) {\r\n            const centerRow = Math.floor(Math.random() * gridRows);\r\n            const centerCol = Math.floor(Math.random() * gridCols);\r\n\r\n            for (let i = 0; i < clusterSize; i++) {\r\n                const offsetRow = Math.floor(Math.random() * 5) - 2;  // -2 to 2\r\n                const offsetCol = Math.floor(Math.random() * 5) - 2;\r\n\r\n                const row = centerRow + offsetRow;\r\n                const col = centerCol + offsetCol;\r\n\r\n                if (row >= 0 && row < gridRows && col >= 0 && col < gridCols) {\r\n                    // 避免重复\r\n                    const exists = bricks.some(b => b.row === row && b.col === col);\r\n                    if (!exists) {\r\n                        bricks.push({\r\n                            type: BrickType.NORMAL,\r\n                            health: baseHealth,\r\n                            row,\r\n                            col\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 堡垒布局 - 外墙+小孔+内部密集区\r\n */\r\nclass FortressLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n\r\n        // 外墙参数\r\n        const wallThickness = 2;\r\n        const wallHealth = baseHealth + 2;  // 外墙更厚\r\n        const gateWidth = 3;\r\n        const gatePosition = Math.floor(Math.random() * (gridCols - gateWidth - wallThickness * 2)) + wallThickness;\r\n\r\n        // 生成外墙\r\n        for (let row = 0; row < Math.min(wallThickness + 2, gridRows); row++) {\r\n            for (let col = 0; col < gridCols; col++) {\r\n                // 顶部墙 + 门洞\r\n                if (row < wallThickness) {\r\n                    if (col < gatePosition || col >= gatePosition + gateWidth) {\r\n                        bricks.push({\r\n                            type: BrickType.REINFORCED,\r\n                            health: wallHealth,\r\n                            row,\r\n                            col\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 内部密集区 (高价值砖块)\r\n        const innerStartRow = wallThickness + 2;\r\n        const innerDensity = 0.8;\r\n\r\n        for (let row = innerStartRow; row < gridRows; row++) {\r\n            for (let col = 2; col < gridCols - 2; col++) {\r\n                if (Math.random() < innerDensity) {\r\n                    bricks.push({\r\n                        type: BrickType.EXPERIENCE,  // 内部多放经验砖\r\n                        health: baseHealth,\r\n                        row,\r\n                        col\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 分层防御布局 - 不同类型砖块分层\r\n */\r\nclass LayeredDefenseLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n\r\n        // 定义层级\r\n        const layers = [\r\n            { type: BrickType.PHASE, health: 1, rows: 2 },           // 相位砖前排\r\n            { type: BrickType.REGENERATING, health: baseHealth + 1, rows: 2 }, // 再生砖中排\r\n            { type: BrickType.NORMAL, health: baseHealth, rows: gridRows - 4 }  // 普通砖后排\r\n        ];\r\n\r\n        let currentRow = 0;\r\n\r\n        for (const layer of layers) {\r\n            for (let r = 0; r < layer.rows && currentRow < gridRows; r++) {\r\n                for (let col = 0; col < gridCols; col++) {\r\n                    bricks.push({\r\n                        type: layer.type,\r\n                        health: layer.health,\r\n                        row: currentRow,\r\n                        col\r\n                    });\r\n                }\r\n                currentRow++;\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n"]}