{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/managers/SaveManager.ts"],"names":["_decorator","Component","sys","ccclass","property","SaveManager","_playerProgress","_currentRunProgress","_autoSaveTimer","_hasUnsavedChanges","getInstance","_instance","onLoad","onDestroy","start","loadPlayerProgress","scheduleAutoSave","update","deltaTime","autoSaveInterval","autoSave","initializeNewProgress","now","Date","currentChapter","currentFloor","currentRun","unlockedChapters","unlockedRelics","unlockedPaddleTypes","unlockedBallTypes","unlockedCoreTypes","totalPlayTime","totalScore","highestScore","totalBricksDestroyed","totalLevelsCompleted","totalDeaths","defeatedBosses","defeatedHiddenBosses","achievements","achievementProgress","currency","coins","gems","energy","experience","purchaseHistory","vipStatus","isVip","vipLevel","vipExpireTime","settings","soundVolume","musicVolume","enableNotifications","language","qualityLevel","lastSaveTime","lastLoginTime","createTime","startNewRun","chapterNumber","runId","Math","random","toString","substr","startTime","currentScore","currentLives","currentNodeIndex","completedNodes","mapPath","activeRelics","relicStacks","paddleLevel","paddleExperience","paddleHealth","paddleMaxHealth","coreLevel","coreExperience","coreHealth","coreMaxHealth","ballTypes","ballEffects","ballCount","temporaryBuffs","levelModifiers","bossPhase","isInCombat","markDirty","savePlayerProgress","console","warn","saveData","JSON","stringify","localStorage","setItem","enableCloudSync","saveToCloud","log","error","saveRunProgress","cloudData","loadFromCloud","parse","localData","getItem","loadRunProgress","manualSave","progressSaved","runSaved","key","data","wx","cloud","database","collection","doc","set","timestamp","then","catch","updateScore","score","isNaN","updateCurrency","type","amount","max","unlockRelic","relicType","includes","push","completeLevel","recordDeath","defeatBoss","bossId","isHidden","saveToSlot","slotIndex","maxSaveSlots","playerProgress","runProgress","loadFromSlot","parsed","getSaveSlotInfo","exists","chapter","getPlayerProgress","getCurrentRunProgress","hasUnsavedChanges","validateAndRepairProgress","min","Object","keys","forEach","clearAllSaves","removeItem","i","saveToLocalStorage","loadFromLocalStorage"],"mappings":"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","sourcesContent":["import { _decorator, Component, sys } from 'cc';\r\nimport { MapManager, MapNodeType } from '../managers/MapManager';\r\nimport { RelicManager, RelicType } from '../managers/RelicManager';\r\nimport { MonetizationManager } from '../managers/MonetizationManager';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport interface PlayerProgress {\r\n    // 基本进度\r\n    currentChapter: number;\r\n    currentFloor: number;\r\n    currentRun: number;\r\n    \r\n    // 解锁内容\r\n    unlockedChapters: number[];\r\n    unlockedRelics: RelicType[];\r\n    unlockedPaddleTypes: string[];\r\n    unlockedBallTypes: string[];\r\n    unlockedCoreTypes: string[];\r\n    \r\n    // 统计数据\r\n    totalPlayTime: number;\r\n    totalScore: number;\r\n    highestScore: number;\r\n    totalBricksDestroyed: number;\r\n    totalLevelsCompleted: number;\r\n    totalDeaths: number;\r\n    \r\n    // Boss击败记录\r\n    defeatedBosses: string[];\r\n    defeatedHiddenBosses: string[];\r\n    \r\n    // 成就进度\r\n    achievements: { [key: string]: boolean };\r\n    achievementProgress: { [key: string]: number };\r\n    \r\n    // 货币和购买\r\n    currency: {\r\n        coins: number;\r\n        gems: number;\r\n        energy: number;\r\n        experience: number;\r\n    };\r\n    \r\n    purchaseHistory: string[];\r\n    vipStatus: {\r\n        isVip: boolean;\r\n        vipLevel: number;\r\n        vipExpireTime: number;\r\n    };\r\n    \r\n    // 设置\r\n    settings: {\r\n        soundVolume: number;\r\n        musicVolume: number;\r\n        enableNotifications: boolean;\r\n        language: string;\r\n        qualityLevel: number;\r\n    };\r\n    \r\n    // 时间戳\r\n    lastSaveTime: number;\r\n    lastLoginTime: number;\r\n    createTime: number;\r\n}\r\n\r\nexport interface RunProgress {\r\n    // 当前跑局信息\r\n    runId: string;\r\n    startTime: number;\r\n    currentScore: number;\r\n    currentLives: number;\r\n    \r\n    // 地图进度\r\n    currentChapter: number;\r\n    currentFloor: number;\r\n    currentNodeIndex: number;\r\n    completedNodes: number[];\r\n    mapPath: number[];\r\n    \r\n    // 装备状态\r\n    activeRelics: RelicType[];\r\n    relicStacks: { [key in RelicType]?: number };\r\n    \r\n    // 挡板状态\r\n    paddleLevel: number;\r\n    paddleExperience: number;\r\n    paddleHealth: number;\r\n    paddleMaxHealth: number;\r\n    \r\n    // 核心状态\r\n    coreLevel: number;\r\n    coreExperience: number;\r\n    coreHealth: number;\r\n    coreMaxHealth: number;\r\n    \r\n    // 弹球状态\r\n    ballTypes: string[];\r\n    ballEffects: string[];\r\n    ballCount: number;\r\n    \r\n    // 临时状态\r\n    temporaryBuffs: {\r\n        buffType: string;\r\n        duration: number;\r\n        stackCount: number;\r\n    }[];\r\n    \r\n    // 关卡特殊状态\r\n    levelModifiers: string[];\r\n    bossPhase: number;\r\n    isInCombat: boolean;\r\n}\r\n\r\n@ccclass('SaveManager')\r\nexport class SaveManager extends Component {\r\n    \r\n    @property\r\n    public autoSaveInterval: number = 30; // 自动保存间隔(秒)\r\n    \r\n    @property\r\n    public maxSaveSlots: number = 3; // 最大存档槽位数\r\n    \r\n    @property\r\n    public enableCloudSync: boolean = true; // 云同步功能\r\n\r\n    private static _instance: SaveManager | null = null;\r\n    private _playerProgress: PlayerProgress | null = null;\r\n    private _currentRunProgress: RunProgress | null = null;\r\n    private _autoSaveTimer: number = 0;\r\n    private _hasUnsavedChanges: boolean = false;\r\n\r\n    public static getInstance(): SaveManager | null {\r\n        return SaveManager._instance;\r\n    }\r\n\r\n    protected onLoad(): void {\r\n        if (SaveManager._instance === null) {\r\n            SaveManager._instance = this;\r\n        }\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        if (SaveManager._instance === this) {\r\n            SaveManager._instance = null;\r\n        }\r\n    }\r\n\r\n    protected start(): void {\r\n        this.loadPlayerProgress();\r\n        this.scheduleAutoSave();\r\n    }\r\n\r\n    protected update(deltaTime: number): void {\r\n        this._autoSaveTimer += deltaTime;\r\n        \r\n        if (this._autoSaveTimer >= this.autoSaveInterval && this._hasUnsavedChanges) {\r\n            this.autoSave();\r\n            this._autoSaveTimer = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化新的玩家进度\r\n     */\r\n    public initializeNewProgress(): PlayerProgress {\r\n        const now = Date.now();\r\n        \r\n        return {\r\n            currentChapter: 1,\r\n            currentFloor: 1,\r\n            currentRun: 1,\r\n            \r\n            unlockedChapters: [1],\r\n            unlockedRelics: [],\r\n            unlockedPaddleTypes: ['basic'],\r\n            unlockedBallTypes: ['normal'],\r\n            unlockedCoreTypes: ['standard'],\r\n            \r\n            totalPlayTime: 0,\r\n            totalScore: 0,\r\n            highestScore: 0,\r\n            totalBricksDestroyed: 0,\r\n            totalLevelsCompleted: 0,\r\n            totalDeaths: 0,\r\n            \r\n            defeatedBosses: [],\r\n            defeatedHiddenBosses: [],\r\n            \r\n            achievements: {},\r\n            achievementProgress: {},\r\n            \r\n            currency: {\r\n                coins: 100,\r\n                gems: 0,\r\n                energy: 100,\r\n                experience: 0\r\n            },\r\n            \r\n            purchaseHistory: [],\r\n            vipStatus: {\r\n                isVip: false,\r\n                vipLevel: 0,\r\n                vipExpireTime: 0\r\n            },\r\n            \r\n            settings: {\r\n                soundVolume: 1.0,\r\n                musicVolume: 0.8,\r\n                enableNotifications: true,\r\n                language: 'zh-CN',\r\n                qualityLevel: 2\r\n            },\r\n            \r\n            lastSaveTime: now,\r\n            lastLoginTime: now,\r\n            createTime: now\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 开始新的游戏运行\r\n     */\r\n    public startNewRun(chapterNumber: number = 1): RunProgress {\r\n        const runId = `run_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n        \r\n        this._currentRunProgress = {\r\n            runId,\r\n            startTime: Date.now(),\r\n            currentScore: 0,\r\n            currentLives: 3,\r\n            \r\n            currentChapter: chapterNumber,\r\n            currentFloor: (chapterNumber - 1) * 15 + 1,\r\n            currentNodeIndex: 0,\r\n            completedNodes: [],\r\n            mapPath: [],\r\n            \r\n            activeRelics: [],\r\n            relicStacks: {},\r\n            \r\n            paddleLevel: 1,\r\n            paddleExperience: 0,\r\n            paddleHealth: 100,\r\n            paddleMaxHealth: 100,\r\n            \r\n            coreLevel: 1,\r\n            coreExperience: 0,\r\n            coreHealth: 100,\r\n            coreMaxHealth: 100,\r\n            \r\n            ballTypes: ['normal'],\r\n            ballEffects: [],\r\n            ballCount: 1,\r\n            \r\n            temporaryBuffs: [],\r\n            levelModifiers: [],\r\n            bossPhase: 0,\r\n            isInCombat: false\r\n        };\r\n        \r\n        this.markDirty();\r\n        return this._currentRunProgress;\r\n    }\r\n\r\n    /**\r\n     * 保存玩家进度\r\n     */\r\n    public savePlayerProgress(): boolean {\r\n        try {\r\n            if (!this._playerProgress) {\r\n                console.warn('No player progress to save');\r\n                return false;\r\n            }\r\n            \r\n            this._playerProgress.lastSaveTime = Date.now();\r\n            const saveData = JSON.stringify(this._playerProgress);\r\n            \r\n            // 保存到本地存储\r\n            sys.localStorage.setItem('cat_conquest_progress', saveData);\r\n            \r\n            // 如果启用云同步，保存到云端\r\n            if (this.enableCloudSync) {\r\n                this.saveToCloud('progress', saveData);\r\n            }\r\n            \r\n            console.log('Player progress saved successfully');\r\n            this._hasUnsavedChanges = false;\r\n            return true;\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to save player progress:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 保存当前运行进度\r\n     */\r\n    public saveRunProgress(): boolean {\r\n        try {\r\n            if (!this._currentRunProgress) {\r\n                console.warn('No run progress to save');\r\n                return false;\r\n            }\r\n            \r\n            const saveData = JSON.stringify(this._currentRunProgress);\r\n            \r\n            // 保存到本地存储\r\n            sys.localStorage.setItem('cat_conquest_current_run', saveData);\r\n            \r\n            // 如果启用云同步，保存到云端\r\n            if (this.enableCloudSync) {\r\n                this.saveToCloud('current_run', saveData);\r\n            }\r\n            \r\n            console.log('Run progress saved successfully');\r\n            return true;\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to save run progress:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载玩家进度\r\n     */\r\n    public loadPlayerProgress(): boolean {\r\n        try {\r\n            // 尝试从云端加载\r\n            if (this.enableCloudSync) {\r\n                const cloudData = this.loadFromCloud('progress');\r\n                if (cloudData) {\r\n                    this._playerProgress = JSON.parse(cloudData);\r\n                    console.log('Player progress loaded from cloud');\r\n                    return true;\r\n                }\r\n            }\r\n            \r\n            // 从本地存储加载\r\n            const localData = sys.localStorage.getItem('cat_conquest_progress');\r\n            if (localData) {\r\n                this._playerProgress = JSON.parse(localData);\r\n                console.log('Player progress loaded from local storage');\r\n                return true;\r\n            }\r\n            \r\n            // 没有存档，创建新的进度\r\n            this._playerProgress = this.initializeNewProgress();\r\n            console.log('Created new player progress');\r\n            return true;\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to load player progress:', error);\r\n            this._playerProgress = this.initializeNewProgress();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载运行进度\r\n     */\r\n    public loadRunProgress(): boolean {\r\n        try {\r\n            // 尝试从云端加载\r\n            if (this.enableCloudSync) {\r\n                const cloudData = this.loadFromCloud('current_run');\r\n                if (cloudData) {\r\n                    this._currentRunProgress = JSON.parse(cloudData);\r\n                    console.log('Run progress loaded from cloud');\r\n                    return true;\r\n                }\r\n            }\r\n            \r\n            // 从本地存储加载\r\n            const localData = sys.localStorage.getItem('cat_conquest_current_run');\r\n            if (localData) {\r\n                this._currentRunProgress = JSON.parse(localData);\r\n                console.log('Run progress loaded from local storage');\r\n                return true;\r\n            }\r\n            \r\n            console.log('No run progress found');\r\n            return false;\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to load run progress:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 自动保存\r\n     */\r\n    private autoSave(): void {\r\n        console.log('Auto-saving progress...');\r\n        this.savePlayerProgress();\r\n        \r\n        if (this._currentRunProgress) {\r\n            this.saveRunProgress();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 手动保存\r\n     */\r\n    public manualSave(): boolean {\r\n        console.log('Manual save triggered');\r\n        const progressSaved = this.savePlayerProgress();\r\n        const runSaved = this._currentRunProgress ? this.saveRunProgress() : true;\r\n        \r\n        return progressSaved && runSaved;\r\n    }\r\n\r\n    /**\r\n     * 云同步相关方法\r\n     */\r\n    private saveToCloud(key: string, data: string): void {\r\n        try {\r\n            // 使用微信云存储或其他云服务\r\n            if (typeof wx !== 'undefined' && wx.cloud) {\r\n                wx.cloud.database().collection('cat_conquest_saves').doc(key).set({\r\n                    data: {\r\n                        saveData: data,\r\n                        timestamp: Date.now()\r\n                    }\r\n                }).then(() => {\r\n                    console.log(`Data saved to cloud: ${key}`);\r\n                }).catch((error: any) => {\r\n                    console.error(`Failed to save to cloud: ${key}`, error);\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error('Cloud save error:', error);\r\n        }\r\n    }\r\n\r\n    private loadFromCloud(key: string): string | null {\r\n        try {\r\n            // 这里应该是异步操作，为了简化示例使用同步方式\r\n            // 实际实现中应该使用Promise或回调\r\n            return null;\r\n        } catch (error) {\r\n            console.error('Cloud load error:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 进度更新方法\r\n     */\r\n    public updateScore(score: number): void {\r\n        if (!this._playerProgress) {\r\n            console.warn('Cannot update score: no player progress loaded');\r\n            return;\r\n        }\r\n        \r\n        if (typeof score !== 'number' || isNaN(score) || score < 0) {\r\n            console.warn('Invalid score value:', score);\r\n            return;\r\n        }\r\n        \r\n        this._playerProgress.totalScore += score;\r\n        if (score > this._playerProgress.highestScore) {\r\n            this._playerProgress.highestScore = score;\r\n        }\r\n        \r\n        if (this._currentRunProgress) {\r\n            this._currentRunProgress.currentScore += score;\r\n        }\r\n        \r\n        this.markDirty();\r\n    }\r\n\r\n    public updateCurrency(type: 'coins' | 'gems' | 'energy' | 'experience', amount: number): void {\r\n        if (this._playerProgress) {\r\n            this._playerProgress.currency[type] = Math.max(0, this._playerProgress.currency[type] + amount);\r\n            this.markDirty();\r\n        }\r\n    }\r\n\r\n    public unlockRelic(relicType: RelicType): void {\r\n        if (this._playerProgress && !this._playerProgress.unlockedRelics.includes(relicType)) {\r\n            this._playerProgress.unlockedRelics.push(relicType);\r\n            this.markDirty();\r\n        }\r\n    }\r\n\r\n    public completeLevel(): void {\r\n        if (this._playerProgress) {\r\n            this._playerProgress.totalLevelsCompleted++;\r\n            this.markDirty();\r\n        }\r\n    }\r\n\r\n    public recordDeath(): void {\r\n        if (this._playerProgress) {\r\n            this._playerProgress.totalDeaths++;\r\n            this.markDirty();\r\n        }\r\n    }\r\n\r\n    public defeatBoss(bossId: string, isHidden: boolean = false): void {\r\n        if (this._playerProgress) {\r\n            if (isHidden) {\r\n                if (!this._playerProgress.defeatedHiddenBosses.includes(bossId)) {\r\n                    this._playerProgress.defeatedHiddenBosses.push(bossId);\r\n                }\r\n            } else {\r\n                if (!this._playerProgress.defeatedBosses.includes(bossId)) {\r\n                    this._playerProgress.defeatedBosses.push(bossId);\r\n                }\r\n            }\r\n            this.markDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 存档槽位管理\r\n     */\r\n    public saveToSlot(slotIndex: number): boolean {\r\n        if (slotIndex < 0 || slotIndex >= this.maxSaveSlots) {\r\n            console.error(`Invalid save slot: ${slotIndex}`);\r\n            return false;\r\n        }\r\n        \r\n        try {\r\n            const saveData = {\r\n                playerProgress: this._playerProgress,\r\n                runProgress: this._currentRunProgress,\r\n                timestamp: Date.now()\r\n            };\r\n            \r\n            const key = `cat_conquest_slot_${slotIndex}`;\r\n            sys.localStorage.setItem(key, JSON.stringify(saveData));\r\n            \r\n            console.log(`Game saved to slot ${slotIndex}`);\r\n            return true;\r\n            \r\n        } catch (error) {\r\n            console.error(`Failed to save to slot ${slotIndex}:`, error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public loadFromSlot(slotIndex: number): boolean {\r\n        if (slotIndex < 0 || slotIndex >= this.maxSaveSlots) {\r\n            console.error(`Invalid save slot: ${slotIndex}`);\r\n            return false;\r\n        }\r\n        \r\n        try {\r\n            const key = `cat_conquest_slot_${slotIndex}`;\r\n            const saveData = sys.localStorage.getItem(key);\r\n            \r\n            if (!saveData) {\r\n                console.log(`No save data in slot ${slotIndex}`);\r\n                return false;\r\n            }\r\n            \r\n            const parsed = JSON.parse(saveData);\r\n            this._playerProgress = parsed.playerProgress;\r\n            this._currentRunProgress = parsed.runProgress;\r\n            \r\n            console.log(`Game loaded from slot ${slotIndex}`);\r\n            return true;\r\n            \r\n        } catch (error) {\r\n            console.error(`Failed to load from slot ${slotIndex}:`, error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public getSaveSlotInfo(slotIndex: number): { exists: boolean; timestamp?: number; chapter?: number; score?: number } {\r\n        try {\r\n            const key = `cat_conquest_slot_${slotIndex}`;\r\n            const saveData = sys.localStorage.getItem(key);\r\n            \r\n            if (!saveData) {\r\n                return { exists: false };\r\n            }\r\n            \r\n            const parsed = JSON.parse(saveData);\r\n            return {\r\n                exists: true,\r\n                timestamp: parsed.timestamp,\r\n                chapter: parsed.playerProgress?.currentChapter,\r\n                score: parsed.playerProgress?.totalScore\r\n            };\r\n            \r\n        } catch (error) {\r\n            console.error(`Failed to get slot info ${slotIndex}:`, error);\r\n            return { exists: false };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 工具方法\r\n     */\r\n    private markDirty(): void {\r\n        this._hasUnsavedChanges = true;\r\n    }\r\n\r\n    private scheduleAutoSave(): void {\r\n        // 自动保存在update中处理\r\n        console.log(`Auto-save scheduled every ${this.autoSaveInterval} seconds`);\r\n    }\r\n\r\n    public getPlayerProgress(): PlayerProgress | null {\r\n        return this._playerProgress;\r\n    }\r\n\r\n    public getCurrentRunProgress(): RunProgress | null {\r\n        return this._currentRunProgress;\r\n    }\r\n\r\n    public hasUnsavedChanges(): boolean {\r\n        return this._hasUnsavedChanges;\r\n    }\r\n\r\n    /**\r\n     * 数据验证和修复\r\n     */\r\n    public validateAndRepairProgress(): boolean {\r\n        if (!this._playerProgress) return false;\r\n        \r\n        try {\r\n            // 验证基本数据\r\n            this._playerProgress.currentChapter = Math.max(1, Math.min(3, this._playerProgress.currentChapter));\r\n            this._playerProgress.currentFloor = Math.max(1, Math.min(45, this._playerProgress.currentFloor));\r\n            \r\n            // 验证货币\r\n            Object.keys(this._playerProgress.currency).forEach(key => {\r\n                this._playerProgress!.currency[key as keyof typeof this._playerProgress.currency] = \r\n                    Math.max(0, this._playerProgress!.currency[key as keyof typeof this._playerProgress.currency]);\r\n            });\r\n            \r\n            // 验证设置\r\n            this._playerProgress.settings.soundVolume = Math.max(0, Math.min(1, this._playerProgress.settings.soundVolume));\r\n            this._playerProgress.settings.musicVolume = Math.max(0, Math.min(1, this._playerProgress.settings.musicVolume));\r\n            \r\n            console.log('Progress validation completed');\r\n            this.markDirty();\r\n            return true;\r\n            \r\n        } catch (error) {\r\n            console.error('Progress validation failed:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除存档\r\n     */\r\n    public clearAllSaves(): void {\r\n        try {\r\n            // 清除主要进度\r\n            sys.localStorage.removeItem('cat_conquest_progress');\r\n            sys.localStorage.removeItem('cat_conquest_current_run');\r\n            \r\n            // 清除存档槽位\r\n            for (let i = 0; i < this.maxSaveSlots; i++) {\r\n                sys.localStorage.removeItem(`cat_conquest_slot_${i}`);\r\n            }\r\n            \r\n            // 重置内存数据\r\n            this._playerProgress = this.initializeNewProgress();\r\n            this._currentRunProgress = null;\r\n            this._hasUnsavedChanges = false;\r\n            \r\n            console.log('All saves cleared');\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to clear saves:', error);\r\n        }\r\n    }\r\n\r\n    private saveToLocalStorage(key: string, data: string): boolean {\r\n        try {\r\n            if (!key || !data) {\r\n                console.warn('Invalid localStorage save parameters');\r\n                return false;\r\n            }\r\n            \r\n            // Check localStorage availability\r\n            if (typeof sys === 'undefined' || !sys.localStorage) {\r\n                console.warn('localStorage not available');\r\n                return false;\r\n            }\r\n            \r\n            sys.localStorage.setItem(key, data);\r\n            return true;\r\n            \r\n        } catch (error) {\r\n            console.error('localStorage save failed:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private loadFromLocalStorage(key: string): string | null {\r\n        try {\r\n            if (!key) {\r\n                console.warn('Invalid localStorage load key');\r\n                return null;\r\n            }\r\n            \r\n            // Check localStorage availability\r\n            if (typeof sys === 'undefined' || !sys.localStorage) {\r\n                console.warn('localStorage not available');\r\n                return null;\r\n            }\r\n            \r\n            return sys.localStorage.getItem(key);\r\n            \r\n        } catch (error) {\r\n            console.error('localStorage load failed:', error);\r\n            return null;\r\n        }\r\n    }\r\n}"]}