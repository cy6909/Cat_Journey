{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/gameplay/EnhancedPaddleController.ts"],"names":["_decorator","Component","input","Input","Vec3","UITransform","Canvas","Vec2","Collider2D","Contact2DType","Color","Sprite","Label","tween","RigidBody2D","GameManager","CoreController","ccclass","property","EnhancedPaddleController","type","_canvasComponent","_uiTransform","_camera","_sprite","_rigidBody","_currentDurability","_lastDamageTime","_isRepairing","_originalColor","_level","_experience","_experienceToNextLevel","_speedMultiplier","_durabilityMultiplier","_repairEfficiency","_fixedY","onLoad","getComponent","node","parent","cameraComponent","maxDurability","color","clone","collider","on","BEGIN_CONTACT","onBeginContact","gravityScale","linearDamping","angularDamping","fixedRotation","allowSleep","enabledContactListener","linearVelocity","console","error","setPosition","position","x","z","onEnable","EventType","MOUSE_MOVE","onMouseMove","TOUCH_MOVE","onTouchMove","onDisable","off","update","dt","vel","y","angularVelocity","currentPos","updateRepair","updateVisualState","updateDurabilityLabel","event","updatePaddlePosition","getLocation","screenPos","worldPos","screenToWorld","localPos","convertToNodeSpaceAR","paddleHalfWidth","width","canvasWidth","leftBound","rightBound","clampedX","Math","max","min","selfCollider","otherCollider","contact","tag","takeDamage","durabilityLossPerHit","gainExperience","destroy","damage","actualDamage","getDamageReduction","showDamageEffect","onPaddleDestroyed","repairDelay","repairRate","durabilityRatio","RED","addCriticalFlashEffect","YELLOW","to","WHITE","union","repeatForever","start","addComponent","durabilityLabel","maxDur","floor","currentDur","string","ratio","xp","levelUp","coreController","getComponentInChildren","schedule","TRANSPARENT","enabled","gameManager","getInstance","currentDurability","maxDurabilityValue","level","isDestroyed","instantRepair","amount","fullRepair"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, input, Input, EventTouch, Vec3, UITransform, Canvas, Camera, Vec2, Collider2D, Contact2DType, IPhysics2DContact, Color, Sprite, Label, tween, RigidBody2D } from 'cc';\r\nimport { GameManager } from './GameManager';\r\nimport { CoreController } from '../managers/CoreController';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('EnhancedPaddleController')\r\nexport class EnhancedPaddleController extends Component {\r\n    @property\r\n    public moveSpeed: number = 500;\r\n    \r\n    @property\r\n    public maxDurability: number = 100;\r\n    \r\n    @property\r\n    public durabilityLossPerHit: number = 5;\r\n    \r\n    @property\r\n    public repairRate: number = 2; // Durability per second repair when not taking damage\r\n    \r\n    @property\r\n    public repairDelay: number = 3; // Seconds after damage before repair starts\r\n    \r\n    @property\r\n    public criticalDurabilityThreshold: number = 25; // When paddle becomes \"critical\"\r\n    \r\n    @property({type: Label})\r\n    public durabilityLabel: Label | null = null;\r\n\r\n    private _canvasComponent: Canvas | null = null;\r\n    private _uiTransform: UITransform | null = null;\r\n    private _camera: Camera | null = null;\r\n    private _sprite: Sprite | null = null;\r\n    private _rigidBody: RigidBody2D | null = null; // 🔒 缓存RigidBody引用，每帧清零速度\r\n    \r\n    // Durability system\r\n    private _currentDurability: number = 0;\r\n    private _lastDamageTime: number = 0;\r\n    private _isRepairing: boolean = false;\r\n    private _originalColor: Color = new Color(255, 255, 255, 255);\r\n    private _level: number = 1;\r\n    private _experience: number = 0;\r\n    private _experienceToNextLevel: number = 100;\r\n    \r\n    // Enhanced stats per level\r\n    private _speedMultiplier: number = 1.0;\r\n    private _durabilityMultiplier: number = 1.0;\r\n    private _repairEfficiency: number = 1.0;\r\n    \r\n    // Y轴锁定机制 - 防止Paddle被球推动\r\n    private _fixedY: number = -300; // 固定Y位置，永不改变\r\n    \r\n    protected onLoad(): void {\r\n        this._uiTransform = this.getComponent(UITransform);\r\n        this._canvasComponent = this.node.parent?.getComponent(Canvas) || null;\r\n        this._camera = this._canvasComponent?.cameraComponent || null;\r\n        this._sprite = this.getComponent(Sprite);\r\n        this._currentDurability = this.maxDurability;\r\n\r\n        // 🔒 固定Y位置为-300，永不改变\r\n        this._fixedY = -300;\r\n\r\n        if (this._sprite) {\r\n            this._originalColor = this._sprite.color.clone();\r\n        }\r\n\r\n        const collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n        }\r\n\r\n        // 🔒 关键：获取并缓存RigidBody2D引用，每帧清零速度\r\n        this._rigidBody = this.getComponent(RigidBody2D);\r\n        if (this._rigidBody) {\r\n            this._rigidBody.type = 2; // Kinematic类型\r\n            this._rigidBody.gravityScale = 0;\r\n            this._rigidBody.linearDamping = 0;\r\n            this._rigidBody.angularDamping = 0;\r\n            this._rigidBody.fixedRotation = true;\r\n            this._rigidBody.allowSleep = false; // 防止进入睡眠状态\r\n            this._rigidBody.enabledContactListener = false; // 禁用接触监听避免物理影响\r\n            this._rigidBody.linearVelocity = new Vec2(0, 0);\r\n        } else {\r\n            console.error('❌ Paddle RigidBody2D not found!');\r\n        }\r\n\r\n        // 🔒 立即强制设置位置\r\n        this.node.setPosition(this.node.position.x, this._fixedY, this.node.position.z);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        // 监听鼠标移动事件，直接跟随鼠标X位置\r\n        input.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n        input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        input.off(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n        input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n    }\r\n    \r\n    protected update(dt: number): void {\r\n        // 🔒 每帧第一优先级：强制清零RigidBody2D的速度\r\n        if (this._rigidBody) {\r\n            const vel = this._rigidBody.linearVelocity;\r\n            // 检测是否有异常速度，如果有则清零并输出警告\r\n            if (vel.x !== 0 || vel.y !== 0) {\r\n                this._rigidBody.linearVelocity = new Vec2(0, 0);\r\n            } else {\r\n                // 即使是0也强制设置，确保100%清零\r\n                this._rigidBody.linearVelocity = new Vec2(0, 0);\r\n            }\r\n            this._rigidBody.angularVelocity = 0;\r\n        }\r\n\r\n        // 🔒 每帧第二优先级：强制锁定Y轴位置为-300\r\n        const currentPos = this.node.position;\r\n        this.node.setPosition(currentPos.x, -300, currentPos.z);\r\n\r\n        // 其他更新逻辑\r\n        this.updateRepair(dt);\r\n        this.updateVisualState();\r\n        this.updateDurabilityLabel();\r\n        this._lastDamageTime += dt;\r\n    }\r\n\r\n    private onTouchMove(event: EventTouch): void {\r\n        this.updatePaddlePosition(event.getLocation());\r\n    }\r\n\r\n    private onMouseMove(event: any): void {\r\n        this.updatePaddlePosition(event.getLocation());\r\n    }\r\n\r\n    private updatePaddlePosition(screenPos: Vec2): void {\r\n        if (!this._camera || !this._uiTransform) return;\r\n\r\n        const worldPos = this._camera.screenToWorld(new Vec3(screenPos.x, screenPos.y, 0));\r\n        const localPos = this.node.parent?.getComponent(UITransform)?.convertToNodeSpaceAR(worldPos) || worldPos;\r\n\r\n        const paddleHalfWidth = this._uiTransform.width / 2;\r\n        const canvasWidth = this._canvasComponent?.getComponent(UITransform)?.width || 960;\r\n        const leftBound = -canvasWidth / 2 + paddleHalfWidth;\r\n        const rightBound = canvasWidth / 2 - paddleHalfWidth;\r\n\r\n        const clampedX = Math.max(leftBound, Math.min(rightBound, localPos.x));\r\n\r\n        // 🔒 直接设置位置，Y永远是-300\r\n        this.node.setPosition(clampedX, -300, 0);\r\n    }\r\n    \r\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null): void {\r\n        // Handle collision with ball - this damages the paddle\r\n        if (otherCollider.tag === 1000) { // Ball tag\r\n            this.takeDamage(this.durabilityLossPerHit);\r\n        }\r\n        \r\n        // Handle collision with boss attacks or other damaging entities\r\n        if (otherCollider.tag === 3000) { // Boss attack tag\r\n            this.takeDamage(this.durabilityLossPerHit * 2); // Boss attacks do more damage\r\n        }\r\n        \r\n        // Handle experience orb collection\r\n        if (otherCollider.tag === 4000) { // Experience orb tag\r\n            this.gainExperience(10);\r\n            otherCollider.node.destroy();\r\n        }\r\n    }\r\n    \r\n    public takeDamage(damage: number): void {\r\n        const actualDamage = Math.max(1, damage - this.getDamageReduction());\r\n        this._currentDurability = Math.max(0, this._currentDurability - actualDamage);\r\n        this._lastDamageTime = 0;\r\n        this._isRepairing = false;\r\n        \r\n        // Visual feedback\r\n        this.showDamageEffect();\r\n        \r\n        // Check if paddle is destroyed\r\n        if (this._currentDurability <= 0) {\r\n            this.onPaddleDestroyed();\r\n        }\r\n    }\r\n    \r\n    private updateRepair(dt: number): void {\r\n        if (this._lastDamageTime >= this.repairDelay && this._currentDurability < this.maxDurability * this._durabilityMultiplier) {\r\n            if (!this._isRepairing) {\r\n                this._isRepairing = true;\r\n            }\r\n            \r\n            this._currentDurability = Math.min(\r\n                this.maxDurability * this._durabilityMultiplier,\r\n                this._currentDurability + this.repairRate * this._repairEfficiency * dt\r\n            );\r\n        }\r\n    }\r\n    \r\n    private updateVisualState(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        const durabilityRatio = this._currentDurability / (this.maxDurability * this._durabilityMultiplier);\r\n        \r\n        if (durabilityRatio <= 0.25) {\r\n            // Critical state - red and flashing\r\n            this._sprite.color = Color.RED;\r\n            if (!this.node.getComponent('CriticalFlash')) {\r\n                this.addCriticalFlashEffect();\r\n            }\r\n        } else if (durabilityRatio <= 0.5) {\r\n            // Warning state - orange\r\n            this._sprite.color = Color.YELLOW;\r\n        } else if (durabilityRatio <= 0.75) {\r\n            // Slightly damaged - light yellow\r\n            this._sprite.color = new Color(255, 255, 200, 255);\r\n        } else {\r\n            // Healthy state\r\n            this._sprite.color = this._originalColor;\r\n        }\r\n    }\r\n    \r\n    private addCriticalFlashEffect(): void {\r\n        if (this._sprite && this._sprite.color) {\r\n            tween(this._sprite)\r\n                .to(0.2, { color: Color.RED })\r\n                .to(0.2, { color: Color.WHITE })\r\n                .union()\r\n                .repeatForever()\r\n                .start();\r\n        }\r\n        \r\n        // Tag to prevent multiple flash effects\r\n        this.node.addComponent('CriticalFlash');\r\n    }\r\n    \r\n    private showDamageEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.1, { color: Color.WHITE })\r\n            .to(0.1, { color: this._sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private updateDurabilityLabel(): void {\r\n        if (!this.durabilityLabel) return;\r\n        \r\n        const maxDur = Math.floor(this.maxDurability * this._durabilityMultiplier);\r\n        const currentDur = Math.floor(this._currentDurability);\r\n        this.durabilityLabel.string = `Paddle: ${currentDur}/${maxDur}`;\r\n        \r\n        // Color code the label\r\n        const ratio = this._currentDurability / (this.maxDurability * this._durabilityMultiplier);\r\n        if (ratio <= 0.25) {\r\n            this.durabilityLabel.color = Color.RED;\r\n        } else if (ratio <= 0.5) {\r\n            this.durabilityLabel.color = Color.YELLOW;\r\n        } else {\r\n            this.durabilityLabel.color = Color.WHITE;\r\n        }\r\n    }\r\n    \r\n    public gainExperience(xp: number): void {\r\n        this._experience += xp;\r\n        \r\n        while (this._experience >= this._experienceToNextLevel) {\r\n            this.levelUp();\r\n        }\r\n    }\r\n    \r\n    private levelUp(): void {\r\n        this._experience -= this._experienceToNextLevel;\r\n        this._level++;\r\n        this._experienceToNextLevel = Math.floor(this._experienceToNextLevel * 1.5);\r\n        \r\n        // Increase stats per level\r\n        this._speedMultiplier += 0.1;\r\n        this._durabilityMultiplier += 0.2;\r\n        this._repairEfficiency += 0.15;\r\n        \r\n        // Heal paddle on level up\r\n        this._currentDurability = Math.min(\r\n            this.maxDurability * this._durabilityMultiplier,\r\n            this._currentDurability + (this.maxDurability * 0.5)\r\n        );\r\n        \r\n    }\r\n    \r\n    private getDamageReduction(): number {\r\n        // Higher level paddles have some damage reduction\r\n        return Math.floor(this._level * 0.5);\r\n    }\r\n    \r\n    private onPaddleDestroyed(): void {\r\n        \r\n        // Find and damage the core directly\r\n        const coreController = this.node.parent?.getComponentInChildren(CoreController);\r\n        if (coreController) {\r\n            // Core takes continuous damage when paddle is destroyed\r\n            this.schedule(() => {\r\n                coreController.takeDamage(5);\r\n            }, 1.0); // Damage core every second\r\n        }\r\n        \r\n        // Hide paddle but don't destroy node (core still needs to function)\r\n        if (this._sprite) {\r\n            this._sprite.color = Color.TRANSPARENT;\r\n        }\r\n        \r\n        // Disable input\r\n        this.enabled = false;\r\n        \r\n        // Notify GameManager\r\n        const gameManager = GameManager.getInstance();\r\n        if (gameManager && (gameManager as any).onPaddleDestroyed) {\r\n            (gameManager as any).onPaddleDestroyed();\r\n        }\r\n    }\r\n    \r\n    // Public accessors\r\n    public get currentDurability(): number { return this._currentDurability; }\r\n    public get maxDurabilityValue(): number { return this.maxDurability * this._durabilityMultiplier; }\r\n    public get level(): number { return this._level; }\r\n    public get isDestroyed(): boolean { return this._currentDurability <= 0; }\r\n    \r\n    // Repair methods for external systems\r\n    public instantRepair(amount: number): void {\r\n        this._currentDurability = Math.min(\r\n            this.maxDurability * this._durabilityMultiplier,\r\n            this._currentDurability + amount\r\n        );\r\n    }\r\n    \r\n    public fullRepair(): void {\r\n        this._currentDurability = this.maxDurability * this._durabilityMultiplier;\r\n    }\r\n}"]}