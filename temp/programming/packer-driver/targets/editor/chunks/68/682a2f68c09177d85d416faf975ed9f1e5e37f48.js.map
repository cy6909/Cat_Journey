{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/gameplay/EnhancedPaddleController.ts"],"names":["_decorator","Component","input","Input","Vec3","UITransform","Canvas","Collider2D","Contact2DType","Color","Sprite","Label","tween","GameManager","CoreController","ccclass","property","EnhancedPaddleController","type","_canvasComponent","_uiTransform","_camera","_sprite","_currentDurability","_lastDamageTime","_isRepairing","_originalColor","_level","_experience","_experienceToNextLevel","_speedMultiplier","_durabilityMultiplier","_repairEfficiency","onLoad","getComponent","node","parent","cameraComponent","maxDurability","color","clone","collider","on","BEGIN_CONTACT","onBeginContact","onEnable","EventType","TOUCH_MOVE","onTouchMove","MOUSE_MOVE","onMouseMove","onDisable","off","update","dt","updateRepair","updateVisualState","updateDurabilityLabel","event","updatePaddlePosition","getLocation","screenPos","worldPos","screenToWorld","x","y","localPos","convertToNodeSpaceAR","paddleHalfWidth","width","canvasWidth","leftBound","rightBound","clampedX","Math","max","min","setPosition","position","z","selfCollider","otherCollider","contact","tag","takeDamage","durabilityLossPerHit","gainExperience","destroy","damage","actualDamage","getDamageReduction","showDamageEffect","onPaddleDestroyed","console","log","repairDelay","repairRate","durabilityRatio","RED","addCriticalFlashEffect","YELLOW","to","WHITE","union","repeatForever","start","addComponent","durabilityLabel","maxDur","floor","currentDur","string","ratio","xp","levelUp","coreController","getComponentInChildren","schedule","TRANSPARENT","enabled","gameManager","getInstance","currentDurability","maxDurabilityValue","level","isDestroyed","instantRepair","amount","fullRepair"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, input, Input, EventTouch, Vec3, UITransform, Canvas, Camera, Vec2, Collider2D, Contact2DType, IPhysics2DContact, Color, Sprite, Label, tween } from 'cc';\r\nimport { GameManager } from './GameManager';\r\nimport { CoreController } from '../managers/CoreController';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('EnhancedPaddleController')\r\nexport class EnhancedPaddleController extends Component {\r\n    @property\r\n    public moveSpeed: number = 500;\r\n    \r\n    @property\r\n    public maxDurability: number = 100;\r\n    \r\n    @property\r\n    public durabilityLossPerHit: number = 5;\r\n    \r\n    @property\r\n    public repairRate: number = 2; // Durability per second repair when not taking damage\r\n    \r\n    @property\r\n    public repairDelay: number = 3; // Seconds after damage before repair starts\r\n    \r\n    @property\r\n    public criticalDurabilityThreshold: number = 25; // When paddle becomes \"critical\"\r\n    \r\n    @property({type: Label})\r\n    public durabilityLabel: Label | null = null;\r\n\r\n    private _canvasComponent: Canvas | null = null;\r\n    private _uiTransform: UITransform | null = null;\r\n    private _camera: Camera | null = null;\r\n    private _sprite: Sprite | null = null;\r\n    \r\n    // Durability system\r\n    private _currentDurability: number = 0;\r\n    private _lastDamageTime: number = 0;\r\n    private _isRepairing: boolean = false;\r\n    private _originalColor: Color = new Color(255, 255, 255, 255);\r\n    private _level: number = 1;\r\n    private _experience: number = 0;\r\n    private _experienceToNextLevel: number = 100;\r\n    \r\n    // Enhanced stats per level\r\n    private _speedMultiplier: number = 1.0;\r\n    private _durabilityMultiplier: number = 1.0;\r\n    private _repairEfficiency: number = 1.0;\r\n    \r\n    protected onLoad(): void {\r\n        this._uiTransform = this.getComponent(UITransform);\r\n        this._canvasComponent = this.node.parent?.getComponent(Canvas) || null;\r\n        this._camera = this._canvasComponent?.cameraComponent || null;\r\n        this._sprite = this.getComponent(Sprite);\r\n        this._currentDurability = this.maxDurability;\r\n        \r\n        if (this._sprite) {\r\n            this._originalColor = this._sprite.color.clone();\r\n        }\r\n        \r\n        const collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n        }\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        input.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        input.off(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n    }\r\n    \r\n    protected update(dt: number): void {\r\n        this.updateRepair(dt);\r\n        this.updateVisualState();\r\n        this.updateDurabilityLabel();\r\n        this._lastDamageTime += dt;\r\n    }\r\n\r\n    private onTouchMove(event: EventTouch): void {\r\n        this.updatePaddlePosition(event.getLocation());\r\n    }\r\n\r\n    private onMouseMove(event: any): void {\r\n        this.updatePaddlePosition(event.getLocation());\r\n    }\r\n\r\n    private updatePaddlePosition(screenPos: Vec2): void {\r\n        if (!this._camera || !this._uiTransform) return;\r\n\r\n        const worldPos = this._camera.screenToWorld(new Vec3(screenPos.x, screenPos.y, 0));\r\n        const localPos = this.node.parent?.getComponent(UITransform)?.convertToNodeSpaceAR(worldPos) || worldPos;\r\n\r\n        const paddleHalfWidth = this._uiTransform.width / 2;\r\n        const canvasWidth = this._canvasComponent?.getComponent(UITransform)?.width || 960;\r\n        const leftBound = -canvasWidth / 2 + paddleHalfWidth;\r\n        const rightBound = canvasWidth / 2 - paddleHalfWidth;\r\n\r\n        const clampedX = Math.max(leftBound, Math.min(rightBound, localPos.x));\r\n        this.node.setPosition(clampedX, this.node.position.y, this.node.position.z);\r\n    }\r\n    \r\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null): void {\r\n        // Handle collision with ball - this damages the paddle\r\n        if (otherCollider.tag === 1000) { // Ball tag\r\n            this.takeDamage(this.durabilityLossPerHit);\r\n        }\r\n        \r\n        // Handle collision with boss attacks or other damaging entities\r\n        if (otherCollider.tag === 3000) { // Boss attack tag\r\n            this.takeDamage(this.durabilityLossPerHit * 2); // Boss attacks do more damage\r\n        }\r\n        \r\n        // Handle experience orb collection\r\n        if (otherCollider.tag === 4000) { // Experience orb tag\r\n            this.gainExperience(10);\r\n            otherCollider.node.destroy();\r\n        }\r\n    }\r\n    \r\n    public takeDamage(damage: number): void {\r\n        const actualDamage = Math.max(1, damage - this.getDamageReduction());\r\n        this._currentDurability = Math.max(0, this._currentDurability - actualDamage);\r\n        this._lastDamageTime = 0;\r\n        this._isRepairing = false;\r\n        \r\n        // Visual feedback\r\n        this.showDamageEffect();\r\n        \r\n        // Check if paddle is destroyed\r\n        if (this._currentDurability <= 0) {\r\n            this.onPaddleDestroyed();\r\n        }\r\n        \r\n        console.log(`Paddle took ${actualDamage} damage. Durability: ${this._currentDurability}/${this.maxDurability * this._durabilityMultiplier}`);\r\n    }\r\n    \r\n    private updateRepair(dt: number): void {\r\n        if (this._lastDamageTime >= this.repairDelay && this._currentDurability < this.maxDurability * this._durabilityMultiplier) {\r\n            if (!this._isRepairing) {\r\n                this._isRepairing = true;\r\n                console.log('Paddle repair started');\r\n            }\r\n            \r\n            this._currentDurability = Math.min(\r\n                this.maxDurability * this._durabilityMultiplier,\r\n                this._currentDurability + this.repairRate * this._repairEfficiency * dt\r\n            );\r\n        }\r\n    }\r\n    \r\n    private updateVisualState(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        const durabilityRatio = this._currentDurability / (this.maxDurability * this._durabilityMultiplier);\r\n        \r\n        if (durabilityRatio <= 0.25) {\r\n            // Critical state - red and flashing\r\n            this._sprite.color = Color.RED;\r\n            if (!this.node.getComponent('CriticalFlash')) {\r\n                this.addCriticalFlashEffect();\r\n            }\r\n        } else if (durabilityRatio <= 0.5) {\r\n            // Warning state - orange\r\n            this._sprite.color = Color.YELLOW;\r\n        } else if (durabilityRatio <= 0.75) {\r\n            // Slightly damaged - light yellow\r\n            this._sprite.color = new Color(255, 255, 200, 255);\r\n        } else {\r\n            // Healthy state\r\n            this._sprite.color = this._originalColor;\r\n        }\r\n    }\r\n    \r\n    private addCriticalFlashEffect(): void {\r\n        if (this._sprite && this._sprite.color) {\r\n            tween(this._sprite)\r\n                .to(0.2, { color: Color.RED })\r\n                .to(0.2, { color: Color.WHITE })\r\n                .union()\r\n                .repeatForever()\r\n                .start();\r\n        }\r\n        \r\n        // Tag to prevent multiple flash effects\r\n        this.node.addComponent('CriticalFlash');\r\n    }\r\n    \r\n    private showDamageEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.1, { color: Color.WHITE })\r\n            .to(0.1, { color: this._sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private updateDurabilityLabel(): void {\r\n        if (!this.durabilityLabel) return;\r\n        \r\n        const maxDur = Math.floor(this.maxDurability * this._durabilityMultiplier);\r\n        const currentDur = Math.floor(this._currentDurability);\r\n        this.durabilityLabel.string = `Paddle: ${currentDur}/${maxDur}`;\r\n        \r\n        // Color code the label\r\n        const ratio = this._currentDurability / (this.maxDurability * this._durabilityMultiplier);\r\n        if (ratio <= 0.25) {\r\n            this.durabilityLabel.color = Color.RED;\r\n        } else if (ratio <= 0.5) {\r\n            this.durabilityLabel.color = Color.YELLOW;\r\n        } else {\r\n            this.durabilityLabel.color = Color.WHITE;\r\n        }\r\n    }\r\n    \r\n    public gainExperience(xp: number): void {\r\n        this._experience += xp;\r\n        console.log(`Paddle gained ${xp} XP. Total: ${this._experience}/${this._experienceToNextLevel}`);\r\n        \r\n        while (this._experience >= this._experienceToNextLevel) {\r\n            this.levelUp();\r\n        }\r\n    }\r\n    \r\n    private levelUp(): void {\r\n        this._experience -= this._experienceToNextLevel;\r\n        this._level++;\r\n        this._experienceToNextLevel = Math.floor(this._experienceToNextLevel * 1.5);\r\n        \r\n        // Increase stats per level\r\n        this._speedMultiplier += 0.1;\r\n        this._durabilityMultiplier += 0.2;\r\n        this._repairEfficiency += 0.15;\r\n        \r\n        // Heal paddle on level up\r\n        this._currentDurability = Math.min(\r\n            this.maxDurability * this._durabilityMultiplier,\r\n            this._currentDurability + (this.maxDurability * 0.5)\r\n        );\r\n        \r\n        console.log(`Paddle leveled up to ${this._level}! Stats increased.`);\r\n    }\r\n    \r\n    private getDamageReduction(): number {\r\n        // Higher level paddles have some damage reduction\r\n        return Math.floor(this._level * 0.5);\r\n    }\r\n    \r\n    private onPaddleDestroyed(): void {\r\n        console.log('Paddle destroyed! Core is now exposed.');\r\n        \r\n        // Find and damage the core directly\r\n        const coreController = this.node.parent?.getComponentInChildren(CoreController);\r\n        if (coreController) {\r\n            // Core takes continuous damage when paddle is destroyed\r\n            this.schedule(() => {\r\n                coreController.takeDamage(5);\r\n            }, 1.0); // Damage core every second\r\n        }\r\n        \r\n        // Hide paddle but don't destroy node (core still needs to function)\r\n        if (this._sprite) {\r\n            this._sprite.color = Color.TRANSPARENT;\r\n        }\r\n        \r\n        // Disable input\r\n        this.enabled = false;\r\n        \r\n        // Notify GameManager\r\n        const gameManager = GameManager.getInstance();\r\n        if (gameManager && (gameManager as any).onPaddleDestroyed) {\r\n            (gameManager as any).onPaddleDestroyed();\r\n        }\r\n    }\r\n    \r\n    // Public accessors\r\n    public get currentDurability(): number { return this._currentDurability; }\r\n    public get maxDurabilityValue(): number { return this.maxDurability * this._durabilityMultiplier; }\r\n    public get level(): number { return this._level; }\r\n    public get isDestroyed(): boolean { return this._currentDurability <= 0; }\r\n    \r\n    // Repair methods for external systems\r\n    public instantRepair(amount: number): void {\r\n        this._currentDurability = Math.min(\r\n            this.maxDurability * this._durabilityMultiplier,\r\n            this._currentDurability + amount\r\n        );\r\n        console.log(`Paddle repaired for ${amount} durability`);\r\n    }\r\n    \r\n    public fullRepair(): void {\r\n        this._currentDurability = this.maxDurability * this._durabilityMultiplier;\r\n        console.log('Paddle fully repaired');\r\n    }\r\n}"]}