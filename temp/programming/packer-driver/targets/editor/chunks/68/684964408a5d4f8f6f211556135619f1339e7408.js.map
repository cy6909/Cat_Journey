{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/core/PaddleController.ts"],"names":["_decorator","Component","input","Input","Vec3","UITransform","Canvas","BoxCollider2D","Sprite","ccclass","property","PaddleController","_currentScale","_currentWidth","_boxCollider","_sprite","_canvasComponent","_uiTransform","_camera","_isTouching","_lastTouchX","_screenWidth","onLoad","getComponent","node","parent","cameraComponent","basePaddleWidth","updatePaddleSize","onEnable","on","EventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","MOUSE_MOVE","onMouseMove","onDisable","off","moveLeft","deltaTime","currentPos","getPosition","newX","x","speed","clampedX","clampToScreenBounds","setPosition","y","z","moveRight","leftBound","boundaryMargin","rightBound","Math","max","min","event","touches","getTouches","length","touch","getLocationX","updatePaddlePosition","getLocation","screenPos","worldPos","screenToWorld","localPos","convertToNodeSpaceAR","position","isTouching","lastTouchX","screenWidth","value","size","width","height","basePaddleHeight","setScale","console","log","setPaddleScale","scale","enlargePaddle","multiplier","shrinkPaddle","resetPaddleSize","getCurrentWidth","getCurrentScale"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, input, Input, EventTouch, Vec3, UITransform, Canvas, Camera, Vec2, Touch, BoxCollider2D, Sprite } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PaddleController')\r\nexport class PaddleController extends Component {\r\n    @property\r\n    public speed: number = 300;\r\n    \r\n    @property\r\n    public basePaddleWidth: number = 120; // 基础宽度\r\n    \r\n    @property  \r\n    public basePaddleHeight: number = 24; // 基础高度\r\n    \r\n    @property\r\n    public boundaryMargin: number = 50;\r\n\r\n    @property\r\n    public moveSpeed: number = 500;\r\n\r\n    // 动态属性\r\n    private _currentScale: number = 1.0; // 当前缩放倍数\r\n    private _currentWidth: number = 120; // 当前实际宽度\r\n    private _boxCollider: BoxCollider2D | null = null;\r\n    private _sprite: Sprite | null = null;\r\n    \r\n    private _canvasComponent: Canvas | null = null;\r\n    private _uiTransform: UITransform | null = null;\r\n    private _camera: Camera | null = null;\r\n    private _isTouching: boolean = false;\r\n    private _lastTouchX: number = 0;\r\n    private _screenWidth: number = 640; // 竖屏宽度640，不是960\r\n    \r\n    protected onLoad(): void {\r\n        this._uiTransform = this.getComponent(UITransform);\r\n        this._canvasComponent = this.node.parent?.getComponent(Canvas) || null;\r\n        this._camera = this._canvasComponent?.cameraComponent || null;\r\n        \r\n        // 获取组件引用\r\n        this._boxCollider = this.getComponent(BoxCollider2D);\r\n        this._sprite = this.getComponent(Sprite);\r\n        \r\n        // 初始化尺寸\r\n        this._currentWidth = this.basePaddleWidth;\r\n        this.updatePaddleSize();\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);\r\n        input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        input.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);\r\n        input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        input.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        input.off(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n    }\r\n\r\n    // 测试需要的移动方法\r\n    public moveLeft(deltaTime: number): void {\r\n        const currentPos = this.node.getPosition();\r\n        const newX = currentPos.x - this.speed * deltaTime;\r\n        const clampedX = this.clampToScreenBounds(newX);\r\n        this.node.setPosition(clampedX, currentPos.y, currentPos.z);\r\n    }\r\n\r\n    public moveRight(deltaTime: number): void {\r\n        const currentPos = this.node.getPosition();\r\n        const newX = currentPos.x + this.speed * deltaTime;\r\n        const clampedX = this.clampToScreenBounds(newX);\r\n        this.node.setPosition(clampedX, currentPos.y, currentPos.z);\r\n    }\r\n\r\n    private clampToScreenBounds(x: number): number {\r\n        const leftBound = -(this._screenWidth / 2) + (this._currentWidth / 2) + this.boundaryMargin;\r\n        const rightBound = (this._screenWidth / 2) - (this._currentWidth / 2) - this.boundaryMargin;\r\n        return Math.max(leftBound, Math.min(rightBound, x));\r\n    }\r\n\r\n    private onTouchStart(event: EventTouch): void {\r\n        const touches = event.getTouches();\r\n        if (touches.length > 0) {\r\n            const touch = touches[0];\r\n            this._isTouching = true;\r\n            this._lastTouchX = touch.getLocationX();\r\n        }\r\n    }\r\n\r\n    private onTouchEnd(event: EventTouch): void {\r\n        this._isTouching = false;\r\n    }\r\n\r\n    private onTouchMove(event: EventTouch): void {\r\n        this.updatePaddlePosition(event.getLocation());\r\n    }\r\n\r\n    private onMouseMove(event: any): void {\r\n        this.updatePaddlePosition(event.getLocation());\r\n    }\r\n\r\n    private updatePaddlePosition(screenPos: Vec2): void {\r\n        if (!this._camera || !this._uiTransform) return;\r\n\r\n        const worldPos = this._camera.screenToWorld(new Vec3(screenPos.x, screenPos.y, 0));\r\n        const localPos = this.node.parent?.getComponent(UITransform)?.convertToNodeSpaceAR(worldPos) || worldPos;\r\n\r\n        const clampedX = this.clampToScreenBounds(localPos.x);\r\n        this.node.setPosition(clampedX, this.node.position.y, this.node.position.z);\r\n    }\r\n\r\n    // 公共访问器供测试使用\r\n    public get isTouching(): boolean {\r\n        return this._isTouching;\r\n    }\r\n\r\n    public get lastTouchX(): number {\r\n        return this._lastTouchX;\r\n    }\r\n\r\n    public get screenWidth(): number {\r\n        return this._screenWidth;\r\n    }\r\n\r\n    public set screenWidth(value: number) {\r\n        this._screenWidth = value;\r\n    }\r\n    \r\n    // ===== 动态尺寸管理系统 =====\r\n    \r\n    /**\r\n     * 更新paddle尺寸 - 同时更新精灵、碰撞器、边界计算\r\n     */\r\n    private updatePaddleSize(): void {\r\n        if (!this._boxCollider || !this._sprite) return;\r\n        \r\n        // 更新碰撞器尺寸\r\n        this._boxCollider.size.width = this.basePaddleWidth * this._currentScale;\r\n        this._boxCollider.size.height = this.basePaddleHeight * this._currentScale;\r\n        \r\n        // 更新精灵缩放 (保持原始精灵比例)\r\n        this.node.setScale(this._currentScale, this._currentScale, 1);\r\n        \r\n        // 更新当前宽度用于边界计算\r\n        this._currentWidth = this.basePaddleWidth * this._currentScale;\r\n        \r\n        console.log(`Paddle size updated: scale=${this._currentScale}, width=${this._currentWidth}`);\r\n    }\r\n    \r\n    /**\r\n     * 设置paddle缩放 - 道具效果调用\r\n     * @param scale 缩放倍数 (1.0=正常, 1.5=150%, 0.8=80%)\r\n     */\r\n    public setPaddleScale(scale: number): void {\r\n        this._currentScale = Math.max(0.3, Math.min(3.0, scale)); // 限制30%-300%\r\n        this.updatePaddleSize();\r\n    }\r\n    \r\n    /**\r\n     * 增加paddle尺寸 - 道具效果\r\n     * @param multiplier 倍数增量 (1.2=增加20%)\r\n     */\r\n    public enlargePaddle(multiplier: number = 1.3): void {\r\n        this.setPaddleScale(this._currentScale * multiplier);\r\n    }\r\n    \r\n    /**\r\n     * 缩小paddle尺寸 - 负面效果\r\n     * @param multiplier 倍数减量 (0.8=减少20%)\r\n     */\r\n    public shrinkPaddle(multiplier: number = 0.7): void {\r\n        this.setPaddleScale(this._currentScale * multiplier);\r\n    }\r\n    \r\n    /**\r\n     * 重置paddle到基础尺寸\r\n     */\r\n    public resetPaddleSize(): void {\r\n        this.setPaddleScale(1.0);\r\n    }\r\n    \r\n    /**\r\n     * 获取当前paddle实际宽度 - 供其他系统使用\r\n     */\r\n    public getCurrentWidth(): number {\r\n        return this._currentWidth;\r\n    }\r\n    \r\n    /**\r\n     * 获取当前缩放倍数\r\n     */\r\n    public getCurrentScale(): number {\r\n        return this._currentScale;\r\n    }\r\n}"]}