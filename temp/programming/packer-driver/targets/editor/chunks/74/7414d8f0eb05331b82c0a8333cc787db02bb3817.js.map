{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/background/ForestThemeBackground.ts"],"names":["_decorator","Component","Sprite","SpriteFrame","Texture2D","Color","UITransform","view","Node","ParticleSystem2D","tween","Vec3","Vec2","ccclass","property","ForestThemeBackground","onLoad","createForestBackground","transform","node","getComponent","console","error","setupNodeSize","createForestGradient","createForestSilhouette","createLeafParticles","createFireflies","createVineDecorations","enableCatCharacter","createForestCat","designSize","getDesignResolutionSize","targetWidth","Math","max","width","targetHeight","height","setContentSize","setAnchorPoint","gradientNode","setParent","layerTransform","addComponent","gradientTexture","createForestGradientTexture","sprite","spriteFrame","texture","sizeMode","SizeMode","CUSTOM","color","WHITE","w","floor","h","reset","format","PixelFormat","RGBA8888","data","Uint8Array","y","ratio","r","forestStartColor","forestEndColor","g","b","x","index","uploadData","silhouetteNode","silhouetteTexture","createForestSilhouetteTexture","i","length","treeZoneStart","treeNoise","forestNoise","treeHeight","intensity","random","particleNode","particleSystem","duration","emissionRate","life","startSize","endSize","startColor","endColor","gravity","speed","speedVar","angle","angleVar","startSpin","endSpin","startSpinVar","leafTexture","createLeafTexture","size","centerX","centerY","dx","dy","distance","sqrt","abs","fireflyCount","createSingleFirefly","fireflyNode","setPosition","fireflyTransform","createFireflyTexture","startFireflyAnimation","alpha","originalPos","position","clone","floatAnimation","repeatForever","to","blinkAnimation","start","log","catNode","setScale","catTransform","createForestCatTexture","startForestCatAnimation","isInCatShape","bodyRadius","schedule","eulerAngles","n","sin"],"mappings":"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","sourcesContent":["import { _decorator, Component, Sprite, SpriteFrame, Texture2D, Color, UITransform, view, Node, ParticleSystem2D, tween, Vec3, Vec2 } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('ForestThemeBackground')\r\nexport class ForestThemeBackground extends Component {\r\n    @property\r\n    public leafParticleCount: number = 20;\r\n    \r\n    @property\r\n    public fireflyCount: number = 15;\r\n    \r\n    @property\r\n    public vineCount: number = 3;\r\n    \r\n    @property\r\n    public enableCatCharacter: boolean = true;\r\n    \r\n    // 森林主题色彩配置\r\n    @property\r\n    public forestStartColor: Color = new Color(45, 90, 39, 255); // #2D5A27\r\n    \r\n    @property\r\n    public forestEndColor: Color = new Color(144, 238, 144, 255); // #90EE90\r\n\r\n    protected onLoad(): void {\r\n        this.createForestBackground();\r\n    }\r\n\r\n    private createForestBackground(): void {\r\n        const transform = this.node.getComponent(UITransform);\r\n        if (!transform) {\r\n            console.error('UITransform component not found');\r\n            return;\r\n        }\r\n\r\n        this.setupNodeSize(transform);\r\n\r\n        // 创建森林主题分层背景\r\n        this.createForestGradient(transform);\r\n        this.createForestSilhouette(transform);\r\n        this.createLeafParticles(transform);\r\n        this.createFireflies(transform);\r\n        this.createVineDecorations(transform);\r\n        \r\n        if (this.enableCatCharacter) {\r\n            this.createForestCat(transform);\r\n        }\r\n    }\r\n\r\n    private setupNodeSize(transform: UITransform): void {\r\n        const designSize = view.getDesignResolutionSize();\r\n        const targetWidth = Math.max(designSize.width, 960);\r\n        const targetHeight = Math.max(designSize.height, 640);\r\n        \r\n        transform.setContentSize(targetWidth, targetHeight);\r\n        transform.setAnchorPoint(0.5, 0.5);\r\n    }\r\n\r\n    private createForestGradient(transform: UITransform): void {\r\n        const gradientNode = new Node('ForestGradient');\r\n        gradientNode.setParent(this.node);\r\n        \r\n        const layerTransform = gradientNode.addComponent(UITransform);\r\n        layerTransform.setContentSize(transform.width, transform.height);\r\n        layerTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const gradientTexture = this.createForestGradientTexture(transform.width, transform.height);\r\n        const sprite = gradientNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = gradientTexture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM;\r\n        sprite.color = Color.WHITE;\r\n    }\r\n\r\n    private createForestGradientTexture(width: number, height: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = Math.max(1, Math.floor(width));\r\n        const h = Math.max(1, Math.floor(height));\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        \r\n        for (let y = 0; y < h; y++) {\r\n            const ratio = y / h;\r\n            // 森林渐变：上方较亮（天空透过树梢），下方较暗（森林深处）\r\n            const r = Math.floor(this.forestStartColor.r + (this.forestEndColor.r - this.forestStartColor.r) * ratio);\r\n            const g = Math.floor(this.forestStartColor.g + (this.forestEndColor.g - this.forestStartColor.g) * ratio);\r\n            const b = Math.floor(this.forestStartColor.b + (this.forestEndColor.b - this.forestStartColor.b) * ratio);\r\n            \r\n            for (let x = 0; x < w; x++) {\r\n                const index = (y * w + x) * 4;\r\n                data[index] = r;     // R\r\n                data[index + 1] = g; // G\r\n                data[index + 2] = b; // B\r\n                data[index + 3] = 255; // A\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private createForestSilhouette(transform: UITransform): void {\r\n        const silhouetteNode = new Node('ForestSilhouette');\r\n        silhouetteNode.setParent(this.node);\r\n        \r\n        const layerTransform = silhouetteNode.addComponent(UITransform);\r\n        layerTransform.setContentSize(transform.width, transform.height);\r\n        layerTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const silhouetteTexture = this.createForestSilhouetteTexture(transform.width, transform.height);\r\n        const sprite = silhouetteNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = silhouetteTexture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM;\r\n        sprite.color = new Color(255, 255, 255, 120); // 半透明\r\n    }\r\n\r\n    private createForestSilhouetteTexture(width: number, height: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = Math.max(1, Math.floor(width));\r\n        const h = Math.max(1, Math.floor(height));\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        \r\n        // 初始化为透明\r\n        for (let i = 0; i < data.length; i += 4) {\r\n            data[i + 3] = 0; // 透明\r\n        }\r\n\r\n        // 绘制树木剪影 - 底部1/3区域\r\n        const treeZoneStart = Math.floor(h * 0.7);\r\n        for (let y = treeZoneStart; y < h; y++) {\r\n            for (let x = 0; x < w; x++) {\r\n                // 使用噪声函数创建不规则的树木轮廓\r\n                const treeNoise = this.forestNoise(x * 0.02, y * 0.02);\r\n                const treeHeight = (h - y) / (h - treeZoneStart);\r\n                \r\n                if (treeNoise > (0.3 - treeHeight * 0.4)) {\r\n                    const index = (y * w + x) * 4;\r\n                    const intensity = 60 + Math.random() * 40; // 深绿色\r\n                    \r\n                    data[index] = intensity * 0.3;     // R\r\n                    data[index + 1] = intensity;       // G\r\n                    data[index + 2] = intensity * 0.4; // B\r\n                    data[index + 3] = 180;             // A\r\n                }\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private createLeafParticles(transform: UITransform): void {\r\n        const particleNode = new Node('LeafParticles');\r\n        particleNode.setParent(this.node);\r\n        \r\n        const layerTransform = particleNode.addComponent(UITransform);\r\n        layerTransform.setContentSize(transform.width, transform.height);\r\n        layerTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const particleSystem = particleNode.addComponent(ParticleSystem2D);\r\n        \r\n        // 配置树叶飘落效果\r\n        particleSystem.duration = -1; // 持续发射\r\n        particleSystem.emissionRate = 3;\r\n        particleSystem.life = 8;\r\n        particleSystem.startSize = 6;\r\n        particleSystem.endSize = 4;\r\n        particleSystem.startColor = new Color(255, 215, 0, 255); // 金黄色\r\n        particleSystem.endColor = new Color(139, 69, 19, 200);   // 棕色\r\n        \r\n        // 重力和运动\r\n        particleSystem.gravity = new Vec2(0, -30);\r\n        particleSystem.speed = 20;\r\n        particleSystem.speedVar = 10;\r\n        particleSystem.angle = 45;\r\n        particleSystem.angleVar = 30;\r\n        \r\n        // 旋转效果\r\n        particleSystem.startSpin = 0;\r\n        particleSystem.endSpin = 180;\r\n        particleSystem.startSpinVar = 90;\r\n        \r\n        // 创建叶子纹理\r\n        const leafTexture = this.createLeafTexture();\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = leafTexture;\r\n        particleSystem.spriteFrame = spriteFrame;\r\n    }\r\n\r\n    private createLeafTexture(): Texture2D {\r\n        const texture = new Texture2D();\r\n        const size = 8;\r\n        \r\n        texture.reset({\r\n            width: size,\r\n            height: size,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(size * size * 4);\r\n        \r\n        // 绘制简单的叶子形状\r\n        for (let y = 0; y < size; y++) {\r\n            for (let x = 0; x < size; x++) {\r\n                const centerX = size / 2;\r\n                const centerY = size / 2;\r\n                const dx = x - centerX;\r\n                const dy = y - centerY;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                \r\n                if (distance < 3 && Math.abs(dx) < 2) {\r\n                    const index = (y * size + x) * 4;\r\n                    data[index] = 34;       // R\r\n                    data[index + 1] = 139;  // G\r\n                    data[index + 2] = 34;   // B\r\n                    data[index + 3] = 255;  // A\r\n                }\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private createFireflies(transform: UITransform): void {\r\n        for (let i = 0; i < this.fireflyCount; i++) {\r\n            this.createSingleFirefly(transform, i);\r\n        }\r\n    }\r\n\r\n    private createSingleFirefly(transform: UITransform, index: number): void {\r\n        const fireflyNode = new Node(`Firefly_${index}`);\r\n        fireflyNode.setParent(this.node);\r\n        \r\n        // 随机位置\r\n        const x = (Math.random() - 0.5) * transform.width * 0.8;\r\n        const y = (Math.random() - 0.5) * transform.height * 0.6;\r\n        fireflyNode.setPosition(x, y, 0);\r\n        \r\n        const fireflyTransform = fireflyNode.addComponent(UITransform);\r\n        fireflyTransform.setContentSize(4, 4);\r\n        fireflyTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const sprite = fireflyNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = this.createFireflyTexture();\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM;\r\n        sprite.color = new Color(255, 255, 100, 255); // 黄色光点\r\n        \r\n        // 添加飘动和闪烁动画\r\n        this.startFireflyAnimation(fireflyNode);\r\n    }\r\n\r\n    private createFireflyTexture(): Texture2D {\r\n        const texture = new Texture2D();\r\n        const size = 4;\r\n        \r\n        texture.reset({\r\n            width: size,\r\n            height: size,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(size * size * 4);\r\n        \r\n        // 创建发光点\r\n        for (let y = 0; y < size; y++) {\r\n            for (let x = 0; x < size; x++) {\r\n                const centerX = size / 2;\r\n                const centerY = size / 2;\r\n                const dx = x - centerX;\r\n                const dy = y - centerY;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                \r\n                if (distance < 1.5) {\r\n                    const index = (y * size + x) * 4;\r\n                    const alpha = Math.max(0, 255 * (1 - distance / 1.5));\r\n                    \r\n                    data[index] = 255;     // R\r\n                    data[index + 1] = 255; // G  \r\n                    data[index + 2] = 0;   // B\r\n                    data[index + 3] = alpha; // A\r\n                }\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private startFireflyAnimation(fireflyNode: Node): void {\r\n        const originalPos = fireflyNode.position.clone();\r\n        \r\n        // 随机飘动路径\r\n        const floatAnimation = tween(fireflyNode)\r\n            .repeatForever(\r\n                tween()\r\n                    .to(3 + Math.random() * 2, { \r\n                        position: new Vec3(\r\n                            originalPos.x + (Math.random() - 0.5) * 100,\r\n                            originalPos.y + (Math.random() - 0.5) * 60,\r\n                            0\r\n                        )\r\n                    })\r\n                    .to(3 + Math.random() * 2, { \r\n                        position: new Vec3(\r\n                            originalPos.x + (Math.random() - 0.5) * 100,\r\n                            originalPos.y + (Math.random() - 0.5) * 60,\r\n                            0\r\n                        )\r\n                    })\r\n                    .to(2 + Math.random(), { position: originalPos })\r\n            );\r\n        \r\n        // 闪烁动画\r\n        const sprite = fireflyNode.getComponent(Sprite);\r\n        if (sprite) {\r\n            const blinkAnimation = tween(sprite)\r\n                .repeatForever(\r\n                    tween()\r\n                        .to(0.5 + Math.random(), { color: new Color(255, 255, 100, 100) })\r\n                        .to(0.5 + Math.random(), { color: new Color(255, 255, 100, 255) })\r\n                );\r\n            blinkAnimation.start();\r\n        }\r\n        \r\n        floatAnimation.start();\r\n    }\r\n\r\n    private createVineDecorations(transform: UITransform): void {\r\n        // 暂时简化，后续可以添加前景藤蔓装饰\r\n        console.log('森林藤蔓装饰 - 待实现');\r\n    }\r\n\r\n    private createForestCat(transform: UITransform): void {\r\n        const catNode = new Node('ForestCat');\r\n        catNode.setParent(this.node);\r\n        \r\n        // 位置：左下角，不干扰游戏区域\r\n        catNode.setPosition(-350, -200, 0);\r\n        catNode.setScale(0.8, 0.8, 1);\r\n        \r\n        const catTransform = catNode.addComponent(UITransform);\r\n        catTransform.setContentSize(64, 64);\r\n        catTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const sprite = catNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = this.createForestCatTexture();\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM;\r\n        sprite.color = Color.WHITE;\r\n        \r\n        // 添加待机动画\r\n        this.startForestCatAnimation(catNode);\r\n    }\r\n\r\n    private createForestCatTexture(): Texture2D {\r\n        const texture = new Texture2D();\r\n        const size = 32;\r\n        \r\n        texture.reset({\r\n            width: size,\r\n            height: size,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(size * size * 4);\r\n        \r\n        // 简化的猫咪像素艺术\r\n        for (let y = 0; y < size; y++) {\r\n            for (let x = 0; x < size; x++) {\r\n                const index = (y * size + x) * 4;\r\n                \r\n                // 基础形状：橘猫轮廓\r\n                if (this.isInCatShape(x, y, size)) {\r\n                    data[index] = 255;     // R - 橘色\r\n                    data[index + 1] = 140; // G\r\n                    data[index + 2] = 0;   // B\r\n                    data[index + 3] = 255; // A\r\n                } else {\r\n                    data[index + 3] = 0; // 透明\r\n                }\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private isInCatShape(x: number, y: number, size: number): boolean {\r\n        const centerX = size / 2;\r\n        const centerY = size / 2;\r\n        const dx = x - centerX;\r\n        const dy = y - centerY;\r\n        \r\n        // 简单的椭圆形作为猫咪身体\r\n        const bodyRadius = size * 0.3;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        return distance < bodyRadius;\r\n    }\r\n\r\n    private startForestCatAnimation(catNode: Node): void {\r\n        // 轻微的上下浮动\r\n        tween(catNode)\r\n            .repeatForever(\r\n                tween()\r\n                    .to(2, { position: new Vec3(-350, -190, 0) })\r\n                    .to(2, { position: new Vec3(-350, -210, 0) })\r\n            )\r\n            .start();\r\n        \r\n        // 偶尔的左右摆动（好奇地看向游戏区域）\r\n        this.schedule(() => {\r\n            tween(catNode)\r\n                .to(0.5, { eulerAngles: new Vec3(0, 0, 5) })\r\n                .to(1, { eulerAngles: new Vec3(0, 0, -5) })\r\n                .to(0.5, { eulerAngles: new Vec3(0, 0, 0) })\r\n                .start();\r\n        }, 8 + Math.random() * 4); // 8-12秒随机\r\n    }\r\n\r\n    private forestNoise(x: number, y: number): number {\r\n        // 森林专用噪声函数 - 创造更有机的形状\r\n        let n = Math.sin(x * 7.234 + y * 3.845) * 0.5;\r\n        n += Math.sin(x * 3.456 + y * 7.123) * 0.3;\r\n        n += Math.sin(x * 1.789 + y * 2.456) * 0.2;\r\n        return (n + 1) / 2; // 归一化到0-1\r\n    }\r\n}"]}