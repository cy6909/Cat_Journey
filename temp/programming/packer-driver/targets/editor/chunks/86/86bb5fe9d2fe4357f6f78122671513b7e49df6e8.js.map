{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/ProceduralLevelGenerator.ts"],"names":["_decorator","Component","Prefab","instantiate","Vec3","EnhancedBrick","BrickType","ccclass","property","LevelType","ProceduralLevelGenerator","type","_baseDifficulty","_currentChapter","_currentLevel","_normalLevelWeights","Map","_eliteLevelWeights","_bossLevelWeights","onLoad","initializeBrickWeights","set","NORMAL","REINFORCED","EXPERIENCE","EXPLOSIVE","ELECTRIC","ICE","FIRE","REGENERATING","PHASE","MAGNETIC","SHIELD","GRAVITY","TELEPORT","TIME","VOID","generateLevel","levelType","chapter","levelNumber","difficulty","calculateDifficulty","generateNormalLevel","ELITE","generateEliteLevel","BOSS","generateBossLevel","HIDDEN_BOSS","generateHiddenBossLevel","chapterMultiplier","levelProgress","brickCount","Math","min","gridWidth","gridHeight","floor","name","specialBrickRatio","bossLevel","eliteLevel","brickTypeWeights","placeBricksFromTemplate","template","parent","bricks","positions","generateBrickPositions","i","length","brickType","selectBrickType","brick","createBrick","setParent","push","count","availablePositions","row","col","x","brickSpacing","y","startY","randomIndex","random","splice","weights","totalWeight","Array","from","values","reduce","sum","weight","entries","position","enhancedBrickPrefab","brickNode","brickComponent","getComponent","baseHealth","getBaseHealthForBrickType","health","max","baseScore","getBaseScoreForBrickType","scoreValue","setWorldPosition","METAL","generateSymmetricPattern","centerX","x1","x2","slice","generateCorridorPattern","isWall","generateSpiralPattern","centerRow","centerCol","currentRow","currentCol","direction","steps","stepCount","directionChanges"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Vec3, math } from 'cc';\r\nimport { EnhancedBrick, BrickType } from './EnhancedBrick';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport interface LevelTemplate {\r\n    name: string;\r\n    difficulty: number;\r\n    brickCount: number;\r\n    specialBrickRatio: number;\r\n    bossLevel: boolean;\r\n    eliteLevel: boolean;\r\n    brickTypeWeights: Map<BrickType, number>;\r\n}\r\n\r\nexport enum LevelType {\r\n    NORMAL = 'normal',\r\n    ELITE = 'elite', \r\n    BOSS = 'boss',\r\n    HIDDEN_BOSS = 'hidden_boss',\r\n    EVENT = 'event',\r\n    SHOP = 'shop',\r\n    TREASURE = 'treasure'\r\n}\r\n\r\n@ccclass('ProceduralLevelGenerator')\r\nexport class ProceduralLevelGenerator extends Component {\r\n    @property({type: Prefab})\r\n    public enhancedBrickPrefab: Prefab | null = null;\r\n    \r\n    @property\r\n    public gridWidth: number = 8;\r\n    \r\n    @property\r\n    public gridHeight: number = 6;\r\n    \r\n    @property\r\n    public brickSpacing: number = 65;\r\n    \r\n    @property\r\n    public startY: number = 200;\r\n    \r\n    // Level difficulty scaling\r\n    private _baseDifficulty: number = 1.0;\r\n    private _currentChapter: number = 1;\r\n    private _currentLevel: number = 1;\r\n    \r\n    // Brick type distribution templates\r\n    private _normalLevelWeights: Map<BrickType, number> = new Map();\r\n    private _eliteLevelWeights: Map<BrickType, number> = new Map();\r\n    private _bossLevelWeights: Map<BrickType, number> = new Map();\r\n    \r\n    protected onLoad(): void {\r\n        this.initializeBrickWeights();\r\n    }\r\n    \r\n    private initializeBrickWeights(): void {\r\n        // Normal level weights (40% normal, 30% reinforced, 20% special, 10% rare)\r\n        this._normalLevelWeights.set(BrickType.NORMAL, 40);\r\n        this._normalLevelWeights.set(BrickType.REINFORCED, 30);\r\n        this._normalLevelWeights.set(BrickType.EXPERIENCE, 15);\r\n        this._normalLevelWeights.set(BrickType.EXPLOSIVE, 5);\r\n        this._normalLevelWeights.set(BrickType.ELECTRIC, 5);\r\n        this._normalLevelWeights.set(BrickType.ICE, 3);\r\n        this._normalLevelWeights.set(BrickType.FIRE, 2);\r\n        \r\n        // Elite level weights (20% normal, 40% reinforced, 30% special, 10% rare)\r\n        this._eliteLevelWeights.set(BrickType.NORMAL, 20);\r\n        this._eliteLevelWeights.set(BrickType.REINFORCED, 40);\r\n        this._eliteLevelWeights.set(BrickType.EXPLOSIVE, 10);\r\n        this._eliteLevelWeights.set(BrickType.ELECTRIC, 8);\r\n        this._eliteLevelWeights.set(BrickType.REGENERATING, 7);\r\n        this._eliteLevelWeights.set(BrickType.PHASE, 5);\r\n        this._eliteLevelWeights.set(BrickType.MAGNETIC, 5);\r\n        this._eliteLevelWeights.set(BrickType.SHIELD, 3);\r\n        this._eliteLevelWeights.set(BrickType.GRAVITY, 2);\r\n        \r\n        // Boss level weights (10% normal, 30% reinforced, 40% special, 20% rare)\r\n        this._bossLevelWeights.set(BrickType.NORMAL, 10);\r\n        this._bossLevelWeights.set(BrickType.REINFORCED, 30);\r\n        this._bossLevelWeights.set(BrickType.EXPLOSIVE, 15);\r\n        this._bossLevelWeights.set(BrickType.ELECTRIC, 10);\r\n        this._bossLevelWeights.set(BrickType.REGENERATING, 10);\r\n        this._bossLevelWeights.set(BrickType.SHIELD, 8);\r\n        this._bossLevelWeights.set(BrickType.PHASE, 7);\r\n        this._bossLevelWeights.set(BrickType.TELEPORT, 5);\r\n        this._bossLevelWeights.set(BrickType.TIME, 3);\r\n        this._bossLevelWeights.set(BrickType.VOID, 2);\r\n    }\r\n    \r\n    public generateLevel(levelType: LevelType, chapter: number, levelNumber: number): LevelTemplate {\r\n        this._currentChapter = chapter;\r\n        this._currentLevel = levelNumber;\r\n        \r\n        const difficulty = this.calculateDifficulty(chapter, levelNumber);\r\n        \r\n        switch (levelType) {\r\n            case LevelType.NORMAL:\r\n                return this.generateNormalLevel(difficulty);\r\n            case LevelType.ELITE:\r\n                return this.generateEliteLevel(difficulty);\r\n            case LevelType.BOSS:\r\n                return this.generateBossLevel(difficulty);\r\n            case LevelType.HIDDEN_BOSS:\r\n                return this.generateHiddenBossLevel(difficulty);\r\n            default:\r\n                return this.generateNormalLevel(difficulty);\r\n        }\r\n    }\r\n    \r\n    private calculateDifficulty(chapter: number, levelNumber: number): number {\r\n        // Base difficulty increases with chapter and level\r\n        const chapterMultiplier = 1 + (chapter - 1) * 0.5;\r\n        const levelProgress = levelNumber / 10; // Assuming 10 levels per chapter\r\n        return this._baseDifficulty * chapterMultiplier * (1 + levelProgress);\r\n    }\r\n    \r\n    private generateNormalLevel(difficulty: number): LevelTemplate {\r\n        const brickCount = Math.min(this.gridWidth * this.gridHeight, \r\n                                   Math.floor(20 + difficulty * 8));\r\n        \r\n        return {\r\n            name: `Normal Level ${this._currentLevel}`,\r\n            difficulty: difficulty,\r\n            brickCount: brickCount,\r\n            specialBrickRatio: Math.min(0.4, 0.2 + difficulty * 0.05),\r\n            bossLevel: false,\r\n            eliteLevel: false,\r\n            brickTypeWeights: this._normalLevelWeights\r\n        };\r\n    }\r\n    \r\n    private generateEliteLevel(difficulty: number): LevelTemplate {\r\n        const brickCount = Math.min(this.gridWidth * this.gridHeight,\r\n                                   Math.floor(30 + difficulty * 10));\r\n        \r\n        return {\r\n            name: `Elite Level ${this._currentLevel}`,\r\n            difficulty: difficulty * 1.3,\r\n            brickCount: brickCount,\r\n            specialBrickRatio: Math.min(0.6, 0.4 + difficulty * 0.1),\r\n            bossLevel: false,\r\n            eliteLevel: true,\r\n            brickTypeWeights: this._eliteLevelWeights\r\n        };\r\n    }\r\n    \r\n    private generateBossLevel(difficulty: number): LevelTemplate {\r\n        const brickCount = Math.floor(this.gridWidth * this.gridHeight * 0.7); // Less bricks for boss fights\r\n        \r\n        return {\r\n            name: `Boss Level ${this._currentLevel}`,\r\n            difficulty: difficulty * 1.5,\r\n            brickCount: brickCount,\r\n            specialBrickRatio: Math.min(0.8, 0.6 + difficulty * 0.1),\r\n            bossLevel: true,\r\n            eliteLevel: false,\r\n            brickTypeWeights: this._bossLevelWeights\r\n        };\r\n    }\r\n    \r\n    private generateHiddenBossLevel(difficulty: number): LevelTemplate {\r\n        const brickCount = Math.floor(this.gridWidth * this.gridHeight * 0.5);\r\n        \r\n        return {\r\n            name: `Hidden Boss ${this._currentLevel}`,\r\n            difficulty: difficulty * 2.0,\r\n            brickCount: brickCount,\r\n            specialBrickRatio: 0.9, // Almost all special bricks\r\n            bossLevel: true,\r\n            eliteLevel: false,\r\n            brickTypeWeights: this._bossLevelWeights\r\n        };\r\n    }\r\n    \r\n    public placeBricksFromTemplate(template: LevelTemplate, parent: Node): Node[] {\r\n        const bricks: Node[] = [];\r\n        const positions = this.generateBrickPositions(template.brickCount);\r\n        \r\n        for (let i = 0; i < positions.length; i++) {\r\n            const brickType = this.selectBrickType(template.brickTypeWeights, template.difficulty);\r\n            const brick = this.createBrick(brickType, positions[i], template.difficulty);\r\n            \r\n            if (brick && parent) {\r\n                brick.setParent(parent);\r\n                bricks.push(brick);\r\n            }\r\n        }\r\n        \r\n        return bricks;\r\n    }\r\n    \r\n    private generateBrickPositions(count: number): Vec3[] {\r\n        const positions: Vec3[] = [];\r\n        const availablePositions: Vec3[] = [];\r\n        \r\n        // Generate all possible positions\r\n        for (let row = 0; row < this.gridHeight; row++) {\r\n            for (let col = 0; col < this.gridWidth; col++) {\r\n                const x = (col - this.gridWidth / 2 + 0.5) * this.brickSpacing;\r\n                const y = this.startY - row * (this.brickSpacing * 0.6);\r\n                availablePositions.push(new Vec3(x, y, 0));\r\n            }\r\n        }\r\n        \r\n        // Randomly select positions\r\n        while (positions.length < count && availablePositions.length > 0) {\r\n            const randomIndex = Math.floor(Math.random() * availablePositions.length);\r\n            positions.push(availablePositions.splice(randomIndex, 1)[0]);\r\n        }\r\n        \r\n        return positions;\r\n    }\r\n    \r\n    private selectBrickType(weights: Map<BrickType, number>, difficulty: number): BrickType {\r\n        const totalWeight = Array.from(weights.values()).reduce((sum, weight) => sum + weight, 0);\r\n        let random = Math.random() * totalWeight;\r\n        \r\n        for (const [brickType, weight] of weights.entries()) {\r\n            random -= weight;\r\n            if (random <= 0) {\r\n                return brickType;\r\n            }\r\n        }\r\n        \r\n        return BrickType.NORMAL; // Fallback\r\n    }\r\n    \r\n    private createBrick(brickType: BrickType, position: Vec3, difficulty: number): Node | null {\r\n        if (!this.enhancedBrickPrefab) return null;\r\n        \r\n        const brickNode = instantiate(this.enhancedBrickPrefab);\r\n        const brickComponent = brickNode.getComponent(EnhancedBrick);\r\n        \r\n        if (brickComponent) {\r\n            brickComponent.brickType = brickType;\r\n            \r\n            // Scale health based on difficulty\r\n            const baseHealth = this.getBaseHealthForBrickType(brickType);\r\n            brickComponent.health = Math.max(1, Math.floor(baseHealth * (1 + difficulty * 0.3)));\r\n            \r\n            // Scale score based on difficulty and brick type\r\n            const baseScore = this.getBaseScoreForBrickType(brickType);\r\n            brickComponent.scoreValue = Math.floor(baseScore * (1 + difficulty * 0.2));\r\n        }\r\n        \r\n        brickNode.setWorldPosition(position);\r\n        return brickNode;\r\n    }\r\n    \r\n    private getBaseHealthForBrickType(brickType: BrickType): number {\r\n        switch (brickType) {\r\n            case BrickType.NORMAL: return 1;\r\n            case BrickType.REINFORCED: return 3;\r\n            case BrickType.REGENERATING: return 2;\r\n            case BrickType.SHIELD: return 4;\r\n            case BrickType.METAL: return 5;\r\n            default: return 1;\r\n        }\r\n    }\r\n    \r\n    private getBaseScoreForBrickType(brickType: BrickType): number {\r\n        switch (brickType) {\r\n            case BrickType.NORMAL: return 10;\r\n            case BrickType.REINFORCED: return 30;\r\n            case BrickType.EXPLOSIVE: return 25;\r\n            case BrickType.ELECTRIC: return 20;\r\n            case BrickType.EXPERIENCE: return 15;\r\n            case BrickType.REGENERATING: return 40;\r\n            case BrickType.PHASE: return 35;\r\n            case BrickType.VOID: return 100;\r\n            default: return 15;\r\n        }\r\n    }\r\n    \r\n    // Pattern generation methods\r\n    public generateSymmetricPattern(template: LevelTemplate): Vec3[] {\r\n        const positions: Vec3[] = [];\r\n        const centerX = this.gridWidth / 2;\r\n        \r\n        for (let row = 0; row < Math.min(this.gridHeight, 4); row++) {\r\n            for (let col = 0; col < Math.floor(this.gridWidth / 2); col++) {\r\n                if (Math.random() < 0.7) { // 70% chance to place brick\r\n                    const x1 = (col - centerX + 0.5) * this.brickSpacing;\r\n                    const x2 = (this.gridWidth - col - 1 - centerX + 0.5) * this.brickSpacing;\r\n                    const y = this.startY - row * (this.brickSpacing * 0.6);\r\n                    \r\n                    positions.push(new Vec3(x1, y, 0));\r\n                    if (col !== Math.floor(this.gridWidth / 2) - 1) { // Don't duplicate center column\r\n                        positions.push(new Vec3(x2, y, 0));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return positions.slice(0, template.brickCount);\r\n    }\r\n    \r\n    public generateCorridorPattern(template: LevelTemplate): Vec3[] {\r\n        const positions: Vec3[] = [];\r\n        \r\n        // Create corridors with walls\r\n        for (let row = 0; row < this.gridHeight; row++) {\r\n            for (let col = 0; col < this.gridWidth; col++) {\r\n                const isWall = col === 0 || col === this.gridWidth - 1 || \r\n                              (row % 2 === 0 && col % 3 === 1);\r\n                \r\n                if (isWall && Math.random() < 0.8) {\r\n                    const x = (col - this.gridWidth / 2 + 0.5) * this.brickSpacing;\r\n                    const y = this.startY - row * (this.brickSpacing * 0.6);\r\n                    positions.push(new Vec3(x, y, 0));\r\n                }\r\n            }\r\n        }\r\n        \r\n        return positions.slice(0, template.brickCount);\r\n    }\r\n    \r\n    public generateSpiralPattern(template: LevelTemplate): Vec3[] {\r\n        const positions: Vec3[] = [];\r\n        const centerRow = Math.floor(this.gridHeight / 2);\r\n        const centerCol = Math.floor(this.gridWidth / 2);\r\n        \r\n        let currentRow = centerRow;\r\n        let currentCol = centerCol;\r\n        let direction = 0; // 0: right, 1: down, 2: left, 3: up\r\n        let steps = 1;\r\n        let stepCount = 0;\r\n        let directionChanges = 0;\r\n        \r\n        while (positions.length < template.brickCount && \r\n               currentRow >= 0 && currentRow < this.gridHeight &&\r\n               currentCol >= 0 && currentCol < this.gridWidth) {\r\n            \r\n            const x = (currentCol - this.gridWidth / 2 + 0.5) * this.brickSpacing;\r\n            const y = this.startY - currentRow * (this.brickSpacing * 0.6);\r\n            positions.push(new Vec3(x, y, 0));\r\n            \r\n            // Move in current direction\r\n            switch (direction) {\r\n                case 0: currentCol++; break; // right\r\n                case 1: currentRow++; break; // down\r\n                case 2: currentCol--; break; // left\r\n                case 3: currentRow--; break; // up\r\n            }\r\n            \r\n            stepCount++;\r\n            \r\n            // Check if we need to change direction\r\n            if (stepCount === steps) {\r\n                direction = (direction + 1) % 4;\r\n                stepCount = 0;\r\n                directionChanges++;\r\n                \r\n                // Increase steps every two direction changes\r\n                if (directionChanges % 2 === 0) {\r\n                    steps++;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return positions;\r\n    }\r\n}"]}