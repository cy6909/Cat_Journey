{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/managers/BossController.ts"],"names":["_decorator","Component","Collider2D","Contact2DType","GameManager","ccclass","property","BossController","_currentHealth","_lastAttackTime","_moveDirection","onLoad","maxHealth","collider","getComponent","on","BEGIN_CONTACT","onBeginContact","start","schedule","performAttack","attackInterval","update","dt","updateMovement","updateAttackTimer","currentPos","node","position","newX","x","moveSpeed","setPosition","y","z","console","log","attackDamage","gameManager","getInstance","scheduleOnce","onCoreAttacked","selfCollider","otherCollider","contact","otherNode","name","includes","ballScript","damage","getDamage","takeDamage","destroy","onDestroyed","showDamageEffect","sprite","color","r","g","b","a","onBossDefeated","scoreValue","unschedule","getCurrentHealth","getMaxHealth","setHealth","health"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, RigidBody2D, Collider2D, Contact2DType, IPhysics2DContact, Vec2, Vec3 } from 'cc';\r\nimport { GameManager } from '../gameplay/GameManager';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BossController')\r\nexport class BossController extends Component {\r\n    @property\r\n    public maxHealth: number = 100;\r\n    \r\n    @property\r\n    public attackDamage: number = 1;\r\n    \r\n    @property\r\n    public attackInterval: number = 5.0;\r\n    \r\n    @property\r\n    public moveSpeed: number = 50;\r\n    \r\n    @property\r\n    public scoreValue: number = 500;\r\n    \r\n    private _currentHealth: number = 0;\r\n    private _lastAttackTime: number = 0;\r\n    private _moveDirection: number = 1;\r\n    \r\n    protected onLoad(): void {\r\n        this._currentHealth = this.maxHealth;\r\n        \r\n        const collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n        }\r\n    }\r\n    \r\n    protected start(): void {\r\n        this.schedule(this.performAttack, this.attackInterval);\r\n    }\r\n    \r\n    protected update(dt: number): void {\r\n        this.updateMovement(dt);\r\n        this.updateAttackTimer(dt);\r\n    }\r\n    \r\n    private updateMovement(dt: number): void {\r\n        const currentPos = this.node.position;\r\n        const newX = currentPos.x + this._moveDirection * this.moveSpeed * dt;\r\n        \r\n        // Bounce off screen edges\r\n        if (newX > 400 || newX < -400) {\r\n            this._moveDirection *= -1;\r\n        }\r\n        \r\n        this.node.setPosition(newX, currentPos.y, currentPos.z);\r\n    }\r\n    \r\n    private updateAttackTimer(dt: number): void {\r\n        this._lastAttackTime += dt;\r\n    }\r\n    \r\n    private performAttack(): void {\r\n        console.log(`Boss attacks! Dealing ${this.attackDamage} damage`);\r\n        \r\n        const gameManager = GameManager.getInstance();\r\n        if (gameManager) {\r\n            // Boss attack causes core damage\r\n            this.scheduleOnce(() => {\r\n                gameManager.onCoreAttacked(this.attackDamage);\r\n            }, 0.1);\r\n        }\r\n    }\r\n    \r\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null): void {\r\n        const otherNode = otherCollider.node;\r\n        \r\n        // Check if hit by ball\r\n        if (otherNode.name.includes('Ball')) {\r\n            const ballScript = otherNode.getComponent('Ball');\r\n            const damage = ballScript ? (ballScript as any).getDamage() : 1;\r\n            this.takeDamage(damage);\r\n        }\r\n        \r\n        // Check if hit by laser\r\n        if (otherNode.name.includes('Laser')) {\r\n            this.takeDamage(2);\r\n            otherNode.destroy();\r\n        }\r\n    }\r\n    \r\n    public takeDamage(damage: number): void {\r\n        this._currentHealth -= damage;\r\n        console.log(`Boss takes ${damage} damage. Health: ${this._currentHealth}/${this.maxHealth}`);\r\n        \r\n        if (this._currentHealth <= 0) {\r\n            this.onDestroyed();\r\n        } else {\r\n            // Visual feedback for damage\r\n            this.showDamageEffect();\r\n        }\r\n    }\r\n    \r\n    private showDamageEffect(): void {\r\n        // Flash effect - change color briefly\r\n        const sprite = this.getComponent('cc.Sprite');\r\n        if (sprite) {\r\n            (sprite as any).color = { r: 255, g: 100, b: 100, a: 255 };\r\n            this.scheduleOnce(() => {\r\n                (sprite as any).color = { r: 255, g: 255, b: 255, a: 255 };\r\n            }, 0.1);\r\n        }\r\n    }\r\n    \r\n    private onDestroyed(): void {\r\n        console.log('Boss defeated!');\r\n        \r\n        const gameManager = GameManager.getInstance();\r\n        if (gameManager) {\r\n            gameManager.onBossDefeated(this.scoreValue);\r\n        }\r\n        \r\n        // Cleanup\r\n        this.unschedule(this.performAttack);\r\n        this.node.destroy();\r\n    }\r\n    \r\n    public getCurrentHealth(): number {\r\n        return this._currentHealth;\r\n    }\r\n    \r\n    public getMaxHealth(): number {\r\n        return this.maxHealth;\r\n    }\r\n    \r\n    public setHealth(health: number): void {\r\n        this.maxHealth = health;\r\n        this._currentHealth = health;\r\n    }\r\n}"]}