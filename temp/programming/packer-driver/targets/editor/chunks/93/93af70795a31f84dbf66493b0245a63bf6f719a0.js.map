{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/managers/AudioManager.ts"],"names":["_decorator","Component","AudioSource","AudioClip","resources","ccclass","property","AudioManager","currentBGM","fadeTarget","isFading","instance","_instance","onLoad","initializeAudio","onDestroy","bgmPlayer","sfxPlayer","console","warn","volume","bgmVolume","loop","sfxVolume","log","playBGM","clipName","fadeIn","enableAudio","playing","load","err","clip","play","fadeBGM","stopBGM","fadeOut","stop","pauseBGM","pause","resumeBGM","targetVolume","duration","callback","startVolume","volumeDiff","steps","volumeStep","currentStep","fadeInterval","setInterval","clearInterval","playSFX","sfxClips","find","c","name","playOneShot","playUISFX","actionType","sfxMap","hover","click","success","error","open","close","setBGMVolume","Math","max","min","setSFXVolume","setAudioEnabled","enable","getBGMInfo","preloadAudio","audioList","loadCount","totalCount","bgm","length","sfx","onLoadComplete","forEach"],"mappings":"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","sourcesContent":["import { _decorator, Component, AudioSource, AudioClip, resources, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('AudioManager')\r\nexport class AudioManager extends Component {\r\n    @property(AudioSource)\r\n    public bgmPlayer: AudioSource = null!;\r\n\r\n    @property(AudioSource)\r\n    public sfxPlayer: AudioSource = null!;\r\n\r\n    @property([AudioClip])\r\n    public sfxClips: AudioClip[] = [];\r\n\r\n    @property\r\n    public bgmVolume: number = 0.8;\r\n\r\n    @property\r\n    public sfxVolume: number = 1.0;\r\n\r\n    @property\r\n    public enableAudio: boolean = true;\r\n\r\n    private static _instance: AudioManager | null = null;\r\n    private currentBGM: string = '';\r\n    private fadeTarget: number = 0;\r\n    private isFading: boolean = false;\r\n\r\n    public static get instance(): AudioManager | null {\r\n        return AudioManager._instance;\r\n    }\r\n\r\n    protected onLoad(): void {\r\n        AudioManager._instance = this;\r\n        this.initializeAudio();\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        if (AudioManager._instance === this) {\r\n            AudioManager._instance = null;\r\n        }\r\n    }\r\n\r\n    private initializeAudio(): void {\r\n        if (!this.bgmPlayer || !this.sfxPlayer) {\r\n            console.warn('AudioManager: BGM or SFX player not configured');\r\n            return;\r\n        }\r\n\r\n        // 配置BGM播放器\r\n        this.bgmPlayer.volume = this.bgmVolume;\r\n        this.bgmPlayer.loop = true;\r\n\r\n        // 配置SFX播放器\r\n        this.sfxPlayer.volume = this.sfxVolume;\r\n        this.sfxPlayer.loop = false;\r\n\r\n        console.log('AudioManager initialized successfully');\r\n    }\r\n\r\n    /**\r\n     * 播放背景音乐\r\n     * @param clipName 音频文件名（不含扩展名）\r\n     * @param loop 是否循环播放，默认true\r\n     * @param fadeIn 是否淡入，默认false\r\n     */\r\n    public playBGM(clipName: string, loop: boolean = true, fadeIn: boolean = false): void {\r\n        if (!this.enableAudio || !this.bgmPlayer) return;\r\n\r\n        // 避免重复播放同一BGM\r\n        if (this.currentBGM === clipName && this.bgmPlayer.playing) {\r\n            return;\r\n        }\r\n\r\n        resources.load(`audio/bgm/${clipName}`, AudioClip, (err, clip) => {\r\n            if (!err && clip) {\r\n                this.currentBGM = clipName;\r\n                this.bgmPlayer.clip = clip;\r\n                this.bgmPlayer.loop = loop;\r\n\r\n                if (fadeIn) {\r\n                    this.bgmPlayer.volume = 0;\r\n                    this.bgmPlayer.play();\r\n                    this.fadeBGM(this.bgmVolume, 2.0);\r\n                } else {\r\n                    this.bgmPlayer.volume = this.bgmVolume;\r\n                    this.bgmPlayer.play();\r\n                }\r\n\r\n                console.log(`Playing BGM: ${clipName}`);\r\n            } else {\r\n                console.warn(`Failed to load BGM: ${clipName}`, err);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 停止背景音乐\r\n     * @param fadeOut 是否淡出，默认false\r\n     */\r\n    public stopBGM(fadeOut: boolean = false): void {\r\n        if (!this.bgmPlayer) return;\r\n\r\n        if (fadeOut) {\r\n            this.fadeBGM(0, 1.0, () => {\r\n                this.bgmPlayer.stop();\r\n                this.currentBGM = '';\r\n            });\r\n        } else {\r\n            this.bgmPlayer.stop();\r\n            this.currentBGM = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 暂停背景音乐\r\n     */\r\n    public pauseBGM(): void {\r\n        if (this.bgmPlayer && this.bgmPlayer.playing) {\r\n            this.bgmPlayer.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 恢复背景音乐\r\n     */\r\n    public resumeBGM(): void {\r\n        if (this.bgmPlayer && !this.bgmPlayer.playing && this.currentBGM) {\r\n            this.bgmPlayer.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * BGM淡入淡出效果\r\n     * @param targetVolume 目标音量\r\n     * @param duration 持续时间（秒）\r\n     * @param callback 完成回调\r\n     */\r\n    public fadeBGM(targetVolume: number, duration: number = 1.0, callback?: () => void): void {\r\n        if (!this.bgmPlayer || this.isFading) return;\r\n\r\n        this.isFading = true;\r\n        this.fadeTarget = targetVolume;\r\n        const startVolume = this.bgmPlayer.volume;\r\n        const volumeDiff = targetVolume - startVolume;\r\n        const steps = duration * 60; // 假设60FPS\r\n        const volumeStep = volumeDiff / steps;\r\n\r\n        let currentStep = 0;\r\n        const fadeInterval = setInterval(() => {\r\n            currentStep++;\r\n            if (currentStep >= steps) {\r\n                this.bgmPlayer.volume = this.fadeTarget;\r\n                this.isFading = false;\r\n                clearInterval(fadeInterval);\r\n                if (callback) callback();\r\n            } else {\r\n                this.bgmPlayer.volume = startVolume + (volumeStep * currentStep);\r\n            }\r\n        }, 1000 / 60);\r\n    }\r\n\r\n    /**\r\n     * 播放音效\r\n     * @param clipName 音效名称\r\n     * @param volume 音量倍数，默认1.0\r\n     */\r\n    public playSFX(clipName: string, volume: number = 1.0): void {\r\n        if (!this.enableAudio || !this.sfxPlayer) return;\r\n\r\n        // 首先尝试从预配置的音效列表中查找\r\n        const clip = this.sfxClips.find(c => c && c.name === clipName);\r\n        if (clip) {\r\n            this.sfxPlayer.playOneShot(clip, this.sfxVolume * volume);\r\n            console.log(`Playing SFX: ${clipName}`);\r\n            return;\r\n        }\r\n\r\n        // 如果没有找到，尝试动态加载\r\n        resources.load(`audio/sfx/${clipName}`, AudioClip, (err, clip) => {\r\n            if (!err && clip) {\r\n                this.sfxPlayer.playOneShot(clip, this.sfxVolume * volume);\r\n                console.log(`Playing SFX (loaded): ${clipName}`);\r\n            } else {\r\n                console.warn(`Failed to load SFX: ${clipName}`, err);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 播放UI音效\r\n     * @param actionType 动作类型：hover, click, success, error, open, close\r\n     */\r\n    public playUISFX(actionType: 'hover' | 'click' | 'success' | 'error' | 'open' | 'close'): void {\r\n        const sfxMap: Record<string, string> = {\r\n            hover: 'ui_hover',\r\n            click: 'ui_click',\r\n            success: 'ui_success',\r\n            error: 'ui_error',\r\n            open: 'ui_open',\r\n            close: 'ui_close'\r\n        };\r\n\r\n        const clipName = sfxMap[actionType];\r\n        if (clipName) {\r\n            this.playSFX(clipName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置BGM音量\r\n     * @param volume 音量值 0.0-1.0\r\n     */\r\n    public setBGMVolume(volume: number): void {\r\n        this.bgmVolume = Math.max(0, Math.min(1, volume));\r\n        if (this.bgmPlayer) {\r\n            this.bgmPlayer.volume = this.bgmVolume;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置SFX音量\r\n     * @param volume 音量值 0.0-1.0\r\n     */\r\n    public setSFXVolume(volume: number): void {\r\n        this.sfxVolume = Math.max(0, Math.min(1, volume));\r\n        if (this.sfxPlayer) {\r\n            this.sfxPlayer.volume = this.sfxVolume;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置总开关\r\n     * @param enable 是否启用音频\r\n     */\r\n    public setAudioEnabled(enable: boolean): void {\r\n        this.enableAudio = enable;\r\n        if (!enable) {\r\n            this.stopBGM();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取当前BGM状态\r\n     */\r\n    public getBGMInfo(): { name: string; playing: boolean; volume: number } {\r\n        return {\r\n            name: this.currentBGM,\r\n            playing: this.bgmPlayer ? this.bgmPlayer.playing : false,\r\n            volume: this.bgmPlayer ? this.bgmPlayer.volume : 0\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 预加载音频资源\r\n     * @param audioList 音频文件名列表\r\n     * @param callback 完成回调\r\n     */\r\n    public preloadAudio(audioList: { bgm?: string[]; sfx?: string[] }, callback?: () => void): void {\r\n        let loadCount = 0;\r\n        let totalCount = 0;\r\n\r\n        if (audioList.bgm) totalCount += audioList.bgm.length;\r\n        if (audioList.sfx) totalCount += audioList.sfx.length;\r\n\r\n        if (totalCount === 0) {\r\n            if (callback) callback();\r\n            return;\r\n        }\r\n\r\n        const onLoadComplete = () => {\r\n            loadCount++;\r\n            if (loadCount >= totalCount) {\r\n                console.log('All audio preloaded successfully');\r\n                if (callback) callback();\r\n            }\r\n        };\r\n\r\n        // 预加载BGM\r\n        if (audioList.bgm) {\r\n            audioList.bgm.forEach(name => {\r\n                resources.load(`audio/bgm/${name}`, AudioClip, (err) => {\r\n                    if (err) console.warn(`Failed to preload BGM: ${name}`);\r\n                    onLoadComplete();\r\n                });\r\n            });\r\n        }\r\n\r\n        // 预加载SFX\r\n        if (audioList.sfx) {\r\n            audioList.sfx.forEach(name => {\r\n                resources.load(`audio/sfx/${name}`, AudioClip, (err) => {\r\n                    if (err) console.warn(`Failed to preload SFX: ${name}`);\r\n                    onLoadComplete();\r\n                });\r\n            });\r\n        }\r\n    }\r\n}"]}