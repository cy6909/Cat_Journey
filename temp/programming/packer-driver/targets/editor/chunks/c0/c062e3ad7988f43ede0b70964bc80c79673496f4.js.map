{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/EnhancedBrick.ts"],"names":["_decorator","Component","Collider2D","Contact2DType","Color","Sprite","tween","Vec3","Prefab","instantiate","RigidBody2D","Vec2","Enum","GameManager","RelicManager","ccclass","property","BrickType","EnhancedBrick","type","_maxHealth","_sprite","_originalColor","_lastHitTime","_isElectric","_isShielded","_regenerationTimer","onLoad","health","getComponent","color","clone","collider","on","BEGIN_CONTACT","onBeginContact","initializeBrickType","update","dt","brickType","REGENERATING","Math","min","regenerationRate","updateVisualState","updateTimeBasedEffects","NORMAL","setBrickColor","RED","REINFORCED","BLUE","scoreValue","EXPLOSIVE","YELLOW","ELECTRIC","EXPERIENCE","GREEN","experienceValue","PHASE","MAGNETIC","ICE","FIRE","selfCollider","otherCollider","contact","ball","random","phaseProbability","console","log","showPhaseEffect","showShieldEffect","applyPreHitEffects","takeDamage","node","getWorldPosition","ballCollider","applyMagneticEffect","applyIceEffect","applyFireEffect","GRAVITY","applyGravityEffect","TIME","applyTimeEffect","damage","impactPosition","onDestroyed","showDamageEffect","gameManager","getInstance","relicManager","addScore","applyDestructionEffects","dropExperienceOrb","hasRelic","explodeAdjacent","destroy","createExplosion","triggerElectricChain","SPLITTING","createSplitBricks","TELEPORT","teleportBall","HEALING","healPaddle","CURSED","applyCurse","CRYSTAL","triggerCrystalChain","VOID","consumeBall","center","allBricks","parent","getComponentsInChildren","brick","distance","explosionRadius","max","floor","showExplosionEffect","nearbyBricks","findNearbyBricks","electricChainDistance","showElectricEffect","ballRigidBody","direction","subtract","normalize","force","multiplyScalar","x","y","magneticForce","applyForceToCenter","setSpeedMultiplier","paddle","getComponentInChildren","instantRepair","experienceOrbPrefab","orb","setParent","setWorldPosition","radius","nearby","push","healthRatio","currentColor","r","g","b","sparkleEffect","pulseEffect","to","WHITE","start","TRANSPARENT","CYAN","currentHealth","maxHealth","isDestroyed","setShielded","shielded"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Collider2D, Contact2DType, IPhysics2DContact, Color, Sprite, tween, Vec3, Prefab, instantiate, RigidBody2D, Vec2, Enum } from 'cc';\r\nimport { GameManager } from './GameManager';\r\nimport { RelicManager } from './RelicManager';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum BrickType {\r\n    NORMAL = 0,\r\n    REINFORCED = 1,        // 需要多次击打\r\n    EXPLOSIVE = 2,         // 爆炸砖块\r\n    ELECTRIC = 3,          // 导电砖块\r\n    EXPERIENCE = 4,        // 经验砖块\r\n    REGENERATING = 5,      // 自我修复砖块\r\n    PHASE = 6,            // 相位砖块(有时穿透)\r\n    MAGNETIC = 7,          // 磁性砖块(吸引球)\r\n    REFLECTIVE = 8,        // 反射砖块(改变球方向)\r\n    POISON = 9,           // 毒性砖块(持续伤害)\r\n    ICE = 10,             // 冰冻砖块(减慢球速)\r\n    FIRE = 11,            // 火焰砖块(加速球)\r\n    SPLITTING = 12,       // 分裂砖块(分裂成多个)\r\n    TELEPORT = 13,        // 传送砖块(球随机传送)\r\n    SHIELD = 14,          // 护盾砖块(保护周围砖块)\r\n    GRAVITY = 15,         // 重力砖块(改变重力)\r\n    TIME = 16,            // 时间砖块(减慢/加速时间)\r\n    HEALING = 17,         // 治疗砖块(修复挡板)\r\n    CURSED = 18,          // 诅咒砖块(负面效果)\r\n    CRYSTAL = 19,         // 水晶砖块(连锁反应)\r\n    RUBBER = 20,          // 橡胶砖块(超强反弹)\r\n    METAL = 21,           // 金属砖块(反弹伤害)\r\n    VOID = 22,            // 虚空砖块(吞噬球)\r\n    LIGHT = 23,           // 光明砖块(照亮区域)\r\n    DARK = 24             // 黑暗砖块(减少视野)\r\n}\r\n\r\n@ccclass('EnhancedBrick')\r\nexport class EnhancedBrick extends Component {\r\n    @property({type: Enum(BrickType)})\r\n    public brickType: BrickType = BrickType.NORMAL;\r\n    \r\n    @property\r\n    public health: number = 1;\r\n    \r\n    @property  \r\n    public scoreValue: number = 10;\r\n    \r\n    @property\r\n    public experienceValue: number = 5;\r\n    \r\n    @property({type: Prefab})\r\n    public experienceOrbPrefab: Prefab | null = null;\r\n    \r\n    // Type-specific properties\r\n    @property\r\n    public explosionRadius: number = 100;\r\n    \r\n    @property\r\n    public electricChainDistance: number = 80;\r\n    \r\n    @property\r\n    public magneticForce: number = 300;\r\n    \r\n    @property\r\n    public regenerationRate: number = 0.1; // Health per second\r\n    \r\n    @property\r\n    public phaseProbability: number = 0.3; // 30% chance to phase\r\n    \r\n    private _maxHealth: number = 0;\r\n    private _sprite: Sprite | null = null;\r\n    private _originalColor: Color = new Color();\r\n    private _lastHitTime: number = 0;\r\n    private _isElectric: boolean = false;\r\n    private _isShielded: boolean = false;\r\n    private _regenerationTimer: number = 0;\r\n    \r\n    protected onLoad(): void {\r\n        this._maxHealth = this.health;\r\n        this._sprite = this.getComponent(Sprite);\r\n        \r\n        if (this._sprite) {\r\n            this._originalColor = this._sprite.color.clone();\r\n        }\r\n        \r\n        const collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n        }\r\n        \r\n        this.initializeBrickType();\r\n    }\r\n    \r\n    protected update(dt: number): void {\r\n        this._lastHitTime += dt;\r\n        \r\n        // Handle regenerating bricks\r\n        if (this.brickType === BrickType.REGENERATING && this.health < this._maxHealth) {\r\n            this._regenerationTimer += dt;\r\n            if (this._regenerationTimer >= 1.0) {\r\n                this.health = Math.min(this._maxHealth, this.health + this.regenerationRate);\r\n                this.updateVisualState();\r\n                this._regenerationTimer = 0;\r\n            }\r\n        }\r\n        \r\n        // Handle time-based effects\r\n        this.updateTimeBasedEffects(dt);\r\n    }\r\n    \r\n    private initializeBrickType(): void {\r\n        switch (this.brickType) {\r\n            case BrickType.NORMAL:\r\n                this.setBrickColor(Color.RED);\r\n                break;\r\n            case BrickType.REINFORCED:\r\n                this.health = 3;\r\n                this._maxHealth = 3;\r\n                this.setBrickColor(Color.BLUE);\r\n                this.scoreValue = 30;\r\n                break;\r\n            case BrickType.EXPLOSIVE:\r\n                this.setBrickColor(Color.YELLOW);\r\n                this.scoreValue = 25;\r\n                break;\r\n            case BrickType.ELECTRIC:\r\n                this.setBrickColor(new Color(0, 255, 255)); // Cyan\r\n                this.scoreValue = 20;\r\n                break;\r\n            case BrickType.EXPERIENCE:\r\n                this.setBrickColor(Color.GREEN);\r\n                this.experienceValue = 20;\r\n                break;\r\n            case BrickType.REGENERATING:\r\n                this.health = 2;\r\n                this._maxHealth = 2;\r\n                this.setBrickColor(new Color(255, 0, 255)); // Magenta\r\n                break;\r\n            case BrickType.PHASE:\r\n                this.setBrickColor(new Color(128, 128, 255)); // Light blue\r\n                break;\r\n            case BrickType.MAGNETIC:\r\n                this.setBrickColor(new Color(128, 0, 128)); // Purple\r\n                break;\r\n            case BrickType.ICE:\r\n                this.setBrickColor(new Color(200, 255, 255)); // Light cyan\r\n                break;\r\n            case BrickType.FIRE:\r\n                this.setBrickColor(new Color(255, 100, 0)); // Orange\r\n                break;\r\n            // Add more type initializations...\r\n        }\r\n    }\r\n    \r\n    private setBrickColor(color: Color): void {\r\n        if (this._sprite) {\r\n            this._sprite.color = color;\r\n            this._originalColor = color.clone();\r\n        }\r\n    }\r\n    \r\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null): void {\r\n        const ball = otherCollider.getComponent('Ball');\r\n        if (!ball) return;\r\n        \r\n        // Handle phase bricks\r\n        if (this.brickType === BrickType.PHASE && Math.random() < this.phaseProbability) {\r\n            console.log('Ball phased through brick!');\r\n            this.showPhaseEffect();\r\n            return; // Ball passes through\r\n        }\r\n        \r\n        // Handle shielded bricks\r\n        if (this._isShielded) {\r\n            console.log('Attack blocked by shield!');\r\n            this.showShieldEffect();\r\n            return;\r\n        }\r\n        \r\n        // Apply brick-specific pre-hit effects\r\n        this.applyPreHitEffects(ball, otherCollider);\r\n        \r\n        // Take damage\r\n        this.takeDamage(1, otherCollider.node.getWorldPosition());\r\n    }\r\n    \r\n    private applyPreHitEffects(ball: any, ballCollider: Collider2D): void {\r\n        switch (this.brickType) {\r\n            case BrickType.MAGNETIC:\r\n                this.applyMagneticEffect(ballCollider);\r\n                break;\r\n            case BrickType.ICE:\r\n                this.applyIceEffect(ball);\r\n                break;\r\n            case BrickType.FIRE:\r\n                this.applyFireEffect(ball);\r\n                break;\r\n            case BrickType.GRAVITY:\r\n                this.applyGravityEffect();\r\n                break;\r\n            case BrickType.TIME:\r\n                this.applyTimeEffect();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public takeDamage(damage: number, impactPosition?: Vec3): void {\r\n        this.health -= damage;\r\n        this._lastHitTime = 0;\r\n        \r\n        if (this.health <= 0) {\r\n            this.onDestroyed(impactPosition);\r\n        } else {\r\n            this.showDamageEffect();\r\n            this.updateVisualState();\r\n        }\r\n    }\r\n    \r\n    private onDestroyed(impactPosition?: Vec3): void {\r\n        const gameManager = GameManager.getInstance();\r\n        const relicManager = RelicManager.getInstance();\r\n        \r\n        // Award score and experience\r\n        if (gameManager && (gameManager as any).addScore) {\r\n            (gameManager as any).addScore(this.scoreValue);\r\n        }\r\n        \r\n        // Apply post-destruction effects\r\n        this.applyDestructionEffects(impactPosition);\r\n        \r\n        // Drop experience orb for experience bricks\r\n        if (this.brickType === BrickType.EXPERIENCE || Math.random() < 0.3) {\r\n            this.dropExperienceOrb();\r\n        }\r\n        \r\n        // Check for explosive bricks relic\r\n        if (relicManager && (relicManager as any).hasRelic) {\r\n            (relicManager as any).hasRelic('ExplosiveBricks');\r\n            this.explodeAdjacent(impactPosition);\r\n        }\r\n        \r\n        // Destroy the brick\r\n        this.node.destroy();\r\n    }\r\n    \r\n    private applyDestructionEffects(impactPosition?: Vec3): void {\r\n        switch (this.brickType) {\r\n            case BrickType.EXPLOSIVE:\r\n                this.createExplosion(impactPosition);\r\n                break;\r\n            case BrickType.ELECTRIC:\r\n                this.triggerElectricChain();\r\n                break;\r\n            case BrickType.SPLITTING:\r\n                this.createSplitBricks();\r\n                break;\r\n            case BrickType.TELEPORT:\r\n                this.teleportBall();\r\n                break;\r\n            case BrickType.HEALING:\r\n                this.healPaddle();\r\n                break;\r\n            case BrickType.CURSED:\r\n                this.applyCurse();\r\n                break;\r\n            case BrickType.CRYSTAL:\r\n                this.triggerCrystalChain();\r\n                break;\r\n            case BrickType.VOID:\r\n                this.consumeBall();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    private createExplosion(center?: Vec3): void {\r\n        if (!center) center = this.node.getWorldPosition();\r\n        \r\n        // Find all bricks within explosion radius\r\n        const allBricks = this.node.parent?.getComponentsInChildren(EnhancedBrick) || [];\r\n        \r\n        for (const brick of allBricks) {\r\n            if (brick === this) continue;\r\n            \r\n            const distance = Vec3.distance(center, brick.node.getWorldPosition());\r\n            if (distance <= this.explosionRadius) {\r\n                // Damage decreases with distance\r\n                const damage = Math.max(1, Math.floor(3 * (1 - distance / this.explosionRadius)));\r\n                brick.takeDamage(damage);\r\n                brick.showExplosionEffect();\r\n            }\r\n        }\r\n        \r\n        console.log(`Explosion at ${center} with radius ${this.explosionRadius}`);\r\n    }\r\n    \r\n    private triggerElectricChain(): void {\r\n        const nearbyBricks = this.findNearbyBricks(this.electricChainDistance);\r\n        \r\n        for (const brick of nearbyBricks) {\r\n            if (brick.brickType === BrickType.ELECTRIC || brick._isElectric) {\r\n                brick._isElectric = true;\r\n                brick.takeDamage(1);\r\n                brick.showElectricEffect();\r\n            }\r\n        }\r\n    }\r\n    \r\n    private applyMagneticEffect(ballCollider: Collider2D): void {\r\n        const ballRigidBody = ballCollider.getComponent(RigidBody2D);\r\n        if (!ballRigidBody) return;\r\n        \r\n        const direction = Vec3.subtract(new Vec3(), this.node.getWorldPosition(), ballCollider.node.getWorldPosition()).normalize();\r\n        const force = Vec2.multiplyScalar(new Vec2(), new Vec2(direction.x, direction.y), this.magneticForce);\r\n        \r\n        ballRigidBody.applyForceToCenter(force, true);\r\n        console.log('Magnetic force applied to ball');\r\n    }\r\n    \r\n    private applyIceEffect(ball: any): void {\r\n        // Slow down the ball temporarily\r\n        if (ball && ball.setSpeedMultiplier) {\r\n            ball.setSpeedMultiplier(0.5, 3.0); // 50% speed for 3 seconds\r\n            console.log('Ball slowed by ice brick');\r\n        }\r\n    }\r\n    \r\n    private applyFireEffect(ball: any): void {\r\n        // Speed up the ball temporarily  \r\n        if (ball && ball.setSpeedMultiplier) {\r\n            ball.setSpeedMultiplier(1.5, 3.0); // 150% speed for 3 seconds\r\n            console.log('Ball accelerated by fire brick');\r\n        }\r\n    }\r\n    \r\n    private healPaddle(): void {\r\n        const paddle = this.node.parent?.getComponentInChildren('EnhancedPaddleController') as any;\r\n        if (paddle && paddle.instantRepair) {\r\n            paddle.instantRepair(25);\r\n            console.log('Paddle healed by healing brick');\r\n        }\r\n    }\r\n    \r\n    private dropExperienceOrb(): void {\r\n        if (!this.experienceOrbPrefab) return;\r\n        \r\n        const orb = instantiate(this.experienceOrbPrefab);\r\n        orb.setParent(this.node.parent);\r\n        orb.setWorldPosition(this.node.getWorldPosition());\r\n        \r\n        console.log(`Dropped experience orb worth ${this.experienceValue} XP`);\r\n    }\r\n    \r\n    private findNearbyBricks(radius: number): EnhancedBrick[] {\r\n        const allBricks = this.node.parent?.getComponentsInChildren(EnhancedBrick) || [];\r\n        const nearby: EnhancedBrick[] = [];\r\n        \r\n        for (const brick of allBricks) {\r\n            if (brick === this) continue;\r\n            \r\n            const distance = Vec3.distance(this.node.getWorldPosition(), brick.node.getWorldPosition());\r\n            if (distance <= radius) {\r\n                nearby.push(brick);\r\n            }\r\n        }\r\n        \r\n        return nearby;\r\n    }\r\n    \r\n    private updateVisualState(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        const healthRatio = this.health / this._maxHealth;\r\n        const currentColor = this._originalColor.clone();\r\n        \r\n        // Darken based on damage\r\n        currentColor.r = Math.floor(currentColor.r * healthRatio);\r\n        currentColor.g = Math.floor(currentColor.g * healthRatio);  \r\n        currentColor.b = Math.floor(currentColor.b * healthRatio);\r\n        \r\n        this._sprite.color = currentColor;\r\n    }\r\n    \r\n    private updateTimeBasedEffects(dt: number): void {\r\n        // Add time-based visual effects for special bricks\r\n        switch (this.brickType) {\r\n            case BrickType.ELECTRIC:\r\n                if (this._isElectric) {\r\n                    this.sparkleEffect(dt);\r\n                }\r\n                break;\r\n            case BrickType.MAGNETIC:\r\n                this.pulseEffect(dt);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    // Visual effect methods\r\n    private showDamageEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.1, { color: Color.WHITE })\r\n            .to(0.1, { color: this._sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private showPhaseEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.2, { color: Color.TRANSPARENT })\r\n            .to(0.2, { color: this._originalColor })\r\n            .start();\r\n    }\r\n    \r\n    private showExplosionEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.1, { color: Color.YELLOW })\r\n            .to(0.1, { color: this._sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private showElectricEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.05, { color: Color.WHITE })\r\n            .to(0.05, { color: Color.CYAN })\r\n            .to(0.05, { color: this._sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private showShieldEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.1, { color: Color.BLUE })\r\n            .to(0.1, { color: this._sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private sparkleEffect(dt: number): void {\r\n        // Implement sparkling effect for electric bricks\r\n    }\r\n    \r\n    private pulseEffect(dt: number): void {\r\n        // Implement pulsing effect for magnetic bricks  \r\n    }\r\n    \r\n    // Additional effect implementations would go here...\r\n    private createSplitBricks(): void { console.log('Brick split into smaller pieces'); }\r\n    private teleportBall(): void { console.log('Ball teleported to random location'); }\r\n    private applyCurse(): void { console.log('Curse applied to player'); }\r\n    private triggerCrystalChain(): void { console.log('Crystal chain reaction triggered'); }\r\n    private consumeBall(): void { console.log('Ball consumed by void brick'); }\r\n    private applyGravityEffect(): void { console.log('Gravity modified'); }\r\n    private applyTimeEffect(): void { console.log('Time flow modified'); }\r\n    private explodeAdjacent(center?: Vec3): void { \r\n        // Implementation from original Brick.ts\r\n        this.createExplosion(center);\r\n    }\r\n    \r\n    // Public accessors\r\n    public get currentHealth(): number { return this.health; }\r\n    public get maxHealth(): number { return this._maxHealth; }\r\n    public get isDestroyed(): boolean { return this.health <= 0; }\r\n    \r\n    // Shield system\r\n    public setShielded(shielded: boolean): void {\r\n        this._isShielded = shielded;\r\n        if (shielded && this._sprite) {\r\n            this._sprite.color = new Color(this._sprite.color.r, this._sprite.color.g, this._sprite.color.b, 200);\r\n        }\r\n    }\r\n}"]}