{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/managers/EliteAndHiddenBossManager.ts"],"names":["_decorator","Component","Prefab","instantiate","math","EnhancedBossController","BossType","EnhancedBrick","BrickType","EnhancedBall","ccclass","property","EliteType","HiddenBossType","EliteAndHiddenBossManager","type","_eliteConfigs","Map","_hiddenBossConfigs","_unlockedHiddenBosses","Set","_playerStats","perfectRuns","collectedRelics","timeRecords","usedElements","secretSequence","onLoad","initializeEliteConfigs","initializeHiddenBossConfigs","loadUnlockProgress","set","BRICK_FORTRESS","name","description","difficultyMultiplier","specialBrickRatio","primaryBrickType","REINFORCED","secondaryBrickTypes","SHIELD","METAL","specialMechanic","SPEED_DEMON","NORMAL","TIME","GRAVITY","REGENERATOR","REGENERATING","HEALING","EXPERIENCE","ELEMENTAL_CHAOS","FIRE","ICE","ELECTRIC","POISON","GRAVITY_ANOMALY","MAGNETIC","PHASE","TIME_DISTORTION","TELEPORT","PHASE_SHIFTER","VOID","MAGNETIC_STORM","SHIELD_MATRIX","VOID_CORRUPTION","DARK","CURSED","EXPLOSIVE_MINE","EXPLOSIVE","CRYSTAL","ICE_AGE","FIRE_STORM","LIGHT","ELECTRIC_GRID","POISON_CLOUD","CRYSTAL_PRISON","RUBBER_NIGHTMARE","RUBBER","METAL_FORTRESS","LIGHT_PUZZLE","DARK_LABYRINTH","ANCIENT_GUARDIAN","unlockCondition","unlockDescription","bossType","GUARDIAN_WALL","specialReward","VOID_LORD","TELEPORTER","TIME_WEAVER","TIME_MANIPULATOR","ELEMENTAL_AVATAR","MIRROR_SHADOW","MIRROR_BOSS","generateEliteLevel","eliteType","chapter","levelNumber","config","get","console","error","log","baseDifficulty","eliteDifficulty","createEliteBrickLayout","activateEliteMechanic","displayEliteLevelInfo","difficulty","enhancedBrickPrefab","brickCount","Math","floor","specialCount","normalCount","primaryCount","i","createEliteBrick","secondaryCount","randomSecondary","random","length","brickType","brick","brickComponent","getComponent","baseHealth","getEliteHealthForBrickType","health","max","baseScore","getEliteScoreForBrickType","scoreValue","x","randomRangeInt","y","setWorldPosition","setParent","node","parent","mechanic","activateFortressDefense","activateSpeedPressure","activateRegenerationField","activateElementalChaos","activateGravityChaos","activateTimeChaos","activatePhaseShifting","activateMagneticChaos","activateShieldNetwork","activateVoidSpread","schedule","allBricks","getComponentsInChildren","activeBricks","filter","active","shieldCount","randomBrick","addShieldEffect","speedMultiplier","maxSpeedMultiplier","min","allBalls","forEach","ball","rigidBody","currentVelocity","linearVelocity","multiplyScalar","addTimePressureEffect","regenRate","maxHealth","addRegenerationEffect","Number","MAX_VALUE","elements","randomElement","effectRadius","randomX","randomY","effectPos","applyElementalEffect","gravityDirections","randomGravity","applyGravityChange","showGravityChangeEffect","speedVariations","newTimeScale","applyTimeScale","showTimeDistortionEffect","phaseCount","makePhaseShifted","magneticStrength","fieldCount","fieldX","fieldY","createMagneticField","networkRange","networks","nearbyBricks","otherBrick","distance","getDistance","position","push","network","createShieldNetwork","spreadInterval","voidBricks","voidBrick","adjacentBricks","getAdjacentBricks","adjacentBrick","corruptToVoid","checkHiddenBossUnlocks","entries","has","checkUnlockCondition","unlockHiddenBoss","condition","Array","from","relic","includes","size","checkSecretSequence","requiredSequence","lastSequence","slice","JSON","stringify","add","showHiddenBossUnlockNotification","saveUnlockProgress","spawnHiddenBoss","enhancedBossPrefab","boss","bossController","attackPower","recordPerfectRun","recordRelicCollected","relicName","recordSpeedRun","level","time","currentRecord","recordElementUsed","element","recordSecretInput","input","shift","saveData","unlockedBosses","playerStats","getEliteConfig","getHiddenBossConfig","isHiddenBossUnlocked","getAllUnlockedHiddenBosses","getPlayerStats","duration","radius","target","sqrt","pow","applyBurnEffect","applyFreezeEffect","applyElectricEffect","applyPoisonEffect","newGravity","gravity","timeScale","collider","enabled","scheduleOnce","isValid","strength","pos1","pos2","centerBrick","maxDistance","damage","slowFactor"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Vec3, math } from 'cc';\r\nimport { EnhancedBossController, BossType } from '../gameplay/EnhancedBossController';\r\nimport { ProceduralLevelGenerator, LevelType } from '../gameplay/ProceduralLevelGenerator';\r\nimport { EnhancedBrick, BrickType } from '../gameplay/EnhancedBrick';\r\nimport { EnhancedBall } from '../gameplay/EnhancedBall';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum EliteType {\r\n    BRICK_FORTRESS = 0,      // 砖块要塞 - 大量强化砖块\r\n    SPEED_DEMON = 1,         // 速度恶魔 - 快速移动的威胁\r\n    REGENERATOR = 2,         // 再生者 - 砖块自我修复\r\n    ELEMENTAL_CHAOS = 3,     // 元素混沌 - 随机元素效果\r\n    GRAVITY_ANOMALY = 4,     // 重力异常 - 重力场扭曲\r\n    TIME_DISTORTION = 5,     // 时间扭曲 - 时间流速变化\r\n    PHASE_SHIFTER = 6,       // 相位转换者 - 砖块随机消失\r\n    MAGNETIC_STORM = 7,      // 磁暴 - 强磁场影响\r\n    SHIELD_MATRIX = 8,       // 护盾矩阵 - 互相保护的砖块\r\n    VOID_CORRUPTION = 9,     // 虚空腐蚀 - 虚空砖块扩散\r\n    EXPLOSIVE_MINE = 10,     // 爆炸地雷 - 连锁爆炸\r\n    ICE_AGE = 11,           // 冰河时代 - 冰冻效果扩散\r\n    FIRE_STORM = 12,        // 火焰风暴 - 火焰持续伤害\r\n    ELECTRIC_GRID = 13,     // 电网 - 电流连锁反应\r\n    POISON_CLOUD = 14,      // 毒云 - 毒素持续扩散\r\n    CRYSTAL_PRISON = 15,    // 水晶监狱 - 水晶砖块阵列\r\n    RUBBER_NIGHTMARE = 16,  // 橡胶噩梦 - 超强反弹\r\n    METAL_FORTRESS = 17,    // 金属要塞 - 反弹伤害\r\n    LIGHT_PUZZLE = 18,      // 光影谜题 - 特殊视觉效果\r\n    DARK_LABYRINTH = 19     // 黑暗迷宫 - 视野限制\r\n}\r\n\r\nexport enum HiddenBossType {\r\n    ANCIENT_GUARDIAN = 0,    // 远古守护者 - 需要无伤通关解锁\r\n    VOID_LORD = 1,          // 虚空领主 - 需要收集特定遗物解锁\r\n    TIME_WEAVER = 2,        // 时间编织者 - 需要在时限内完成关卡解锁\r\n    ELEMENTAL_AVATAR = 3,   // 元素化身 - 需要使用所有元素攻击解锁\r\n    MIRROR_SHADOW = 4       // 镜像阴影 - 需要特定操作序列解锁\r\n}\r\n\r\ninterface EliteConfig {\r\n    name: string;\r\n    description: string;\r\n    difficultyMultiplier: number;\r\n    specialBrickRatio: number;\r\n    primaryBrickType: BrickType;\r\n    secondaryBrickTypes: BrickType[];\r\n    specialMechanic: string;\r\n}\r\n\r\ninterface HiddenBossConfig {\r\n    name: string;\r\n    description: string;\r\n    unlockCondition: string;\r\n    unlockDescription: string;\r\n    bossType: BossType;\r\n    difficultyMultiplier: number;\r\n    specialReward: string;\r\n}\r\n\r\n@ccclass('EliteAndHiddenBossManager')\r\nexport class EliteAndHiddenBossManager extends Component {\r\n    @property({type: Prefab})\r\n    public enhancedBossPrefab: Prefab | null = null;\r\n    \r\n    @property({type: Prefab})\r\n    public enhancedBrickPrefab: Prefab | null = null;\r\n    \r\n    // Elite level configurations\r\n    private _eliteConfigs: Map<EliteType, EliteConfig> = new Map();\r\n    \r\n    // Hidden boss configurations\r\n    private _hiddenBossConfigs: Map<HiddenBossType, HiddenBossConfig> = new Map();\r\n    \r\n    // Unlock tracking\r\n    private _unlockedHiddenBosses: Set<HiddenBossType> = new Set();\r\n    private _playerStats = {\r\n        perfectRuns: 0,\r\n        collectedRelics: new Set<string>(),\r\n        timeRecords: new Map<number, number>(),\r\n        usedElements: new Set<string>(),\r\n        secretSequence: [] as string[]\r\n    };\r\n    \r\n    protected onLoad(): void {\r\n        this.initializeEliteConfigs();\r\n        this.initializeHiddenBossConfigs();\r\n        this.loadUnlockProgress();\r\n    }\r\n    \r\n    private initializeEliteConfigs(): void {\r\n        // Elite Type 0-4: Basic Elite Mechanics\r\n        this._eliteConfigs.set(EliteType.BRICK_FORTRESS, {\r\n            name: \"砖块要塞\",\r\n            description: \"大量强化砖块构成的坚固防线\",\r\n            difficultyMultiplier: 1.4,\r\n            specialBrickRatio: 0.8,\r\n            primaryBrickType: BrickType.REINFORCED,\r\n            secondaryBrickTypes: [BrickType.SHIELD, BrickType.METAL],\r\n            specialMechanic: \"fortress_defense\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.SPEED_DEMON, {\r\n            name: \"速度恶魔\",\r\n            description: \"快速移动的球和压迫性时间限制\",\r\n            difficultyMultiplier: 1.3,\r\n            specialBrickRatio: 0.6,\r\n            primaryBrickType: BrickType.NORMAL,\r\n            secondaryBrickTypes: [BrickType.TIME, BrickType.GRAVITY],\r\n            specialMechanic: \"speed_pressure\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.REGENERATOR, {\r\n            name: \"再生者\",\r\n            description: \"砖块持续自我修复的噩梦关卡\",\r\n            difficultyMultiplier: 1.5,\r\n            specialBrickRatio: 0.7,\r\n            primaryBrickType: BrickType.REGENERATING,\r\n            secondaryBrickTypes: [BrickType.HEALING, BrickType.EXPERIENCE],\r\n            specialMechanic: \"regeneration_field\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.ELEMENTAL_CHAOS, {\r\n            name: \"元素混沌\",\r\n            description: \"随机元素效果不断变化\",\r\n            difficultyMultiplier: 1.4,\r\n            specialBrickRatio: 0.9,\r\n            primaryBrickType: BrickType.FIRE,\r\n            secondaryBrickTypes: [BrickType.ICE, BrickType.ELECTRIC, BrickType.POISON],\r\n            specialMechanic: \"elemental_chaos\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.GRAVITY_ANOMALY, {\r\n            name: \"重力异常\",\r\n            description: \"重力场持续扭曲变化\",\r\n            difficultyMultiplier: 1.3,\r\n            specialBrickRatio: 0.6,\r\n            primaryBrickType: BrickType.GRAVITY,\r\n            secondaryBrickTypes: [BrickType.MAGNETIC, BrickType.PHASE],\r\n            specialMechanic: \"gravity_chaos\"\r\n        });\r\n        \r\n        // Elite Type 5-9: Advanced Elite Mechanics\r\n        this._eliteConfigs.set(EliteType.TIME_DISTORTION, {\r\n            name: \"时间扭曲\",\r\n            description: \"时间流速随机变化，考验反应能力\",\r\n            difficultyMultiplier: 1.4,\r\n            specialBrickRatio: 0.7,\r\n            primaryBrickType: BrickType.TIME,\r\n            secondaryBrickTypes: [BrickType.PHASE, BrickType.TELEPORT],\r\n            specialMechanic: \"time_chaos\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.PHASE_SHIFTER, {\r\n            name: \"相位转换者\",\r\n            description: \"砖块随机在可见和不可见间切换\",\r\n            difficultyMultiplier: 1.3,\r\n            specialBrickRatio: 0.8,\r\n            primaryBrickType: BrickType.PHASE,\r\n            secondaryBrickTypes: [BrickType.TELEPORT, BrickType.VOID],\r\n            specialMechanic: \"phase_shifting\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.MAGNETIC_STORM, {\r\n            name: \"磁暴\",\r\n            description: \"强磁场持续影响球的轨迹\",\r\n            difficultyMultiplier: 1.4,\r\n            specialBrickRatio: 0.7,\r\n            primaryBrickType: BrickType.MAGNETIC,\r\n            secondaryBrickTypes: [BrickType.ELECTRIC, BrickType.METAL],\r\n            specialMechanic: \"magnetic_chaos\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.SHIELD_MATRIX, {\r\n            name: \"护盾矩阵\",\r\n            description: \"砖块互相提供护盾保护\",\r\n            difficultyMultiplier: 1.5,\r\n            specialBrickRatio: 0.8,\r\n            primaryBrickType: BrickType.SHIELD,\r\n            secondaryBrickTypes: [BrickType.REINFORCED, BrickType.REGENERATING],\r\n            specialMechanic: \"shield_network\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.VOID_CORRUPTION, {\r\n            name: \"虚空腐蚀\",\r\n            description: \"虚空砖块持续扩散腐蚀其他砖块\",\r\n            difficultyMultiplier: 1.6,\r\n            specialBrickRatio: 0.5,\r\n            primaryBrickType: BrickType.VOID,\r\n            secondaryBrickTypes: [BrickType.DARK, BrickType.CURSED],\r\n            specialMechanic: \"void_spread\"\r\n        });\r\n        \r\n        // Elite Type 10-14: Elemental Elite Mechanics\r\n        this._eliteConfigs.set(EliteType.EXPLOSIVE_MINE, {\r\n            name: \"爆炸地雷\",\r\n            description: \"连锁爆炸威力巨大\",\r\n            difficultyMultiplier: 1.4,\r\n            specialBrickRatio: 0.6,\r\n            primaryBrickType: BrickType.EXPLOSIVE,\r\n            secondaryBrickTypes: [BrickType.FIRE, BrickType.CRYSTAL],\r\n            specialMechanic: \"chain_explosion\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.ICE_AGE, {\r\n            name: \"冰河时代\",\r\n            description: \"冰冻效果持续扩散\",\r\n            difficultyMultiplier: 1.3,\r\n            specialBrickRatio: 0.8,\r\n            primaryBrickType: BrickType.ICE,\r\n            secondaryBrickTypes: [BrickType.CRYSTAL, BrickType.TIME],\r\n            specialMechanic: \"ice_spread\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.FIRE_STORM, {\r\n            name: \"火焰风暴\",\r\n            description: \"火焰持续伤害和蔓延\",\r\n            difficultyMultiplier: 1.4,\r\n            specialBrickRatio: 0.7,\r\n            primaryBrickType: BrickType.FIRE,\r\n            secondaryBrickTypes: [BrickType.EXPLOSIVE, BrickType.LIGHT],\r\n            specialMechanic: \"fire_spread\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.ELECTRIC_GRID, {\r\n            name: \"电网\",\r\n            description: \"电流在砖块间形成复杂网络\",\r\n            difficultyMultiplier: 1.4,\r\n            specialBrickRatio: 0.8,\r\n            primaryBrickType: BrickType.ELECTRIC,\r\n            secondaryBrickTypes: [BrickType.METAL, BrickType.CRYSTAL],\r\n            specialMechanic: \"electric_network\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.POISON_CLOUD, {\r\n            name: \"毒云\",\r\n            description: \"毒素持续扩散和累积\",\r\n            difficultyMultiplier: 1.3,\r\n            specialBrickRatio: 0.7,\r\n            primaryBrickType: BrickType.POISON,\r\n            secondaryBrickTypes: [BrickType.DARK, BrickType.VOID],\r\n            specialMechanic: \"poison_spread\"\r\n        });\r\n        \r\n        // Elite Type 15-19: Special Material Elite Mechanics\r\n        this._eliteConfigs.set(EliteType.CRYSTAL_PRISON, {\r\n            name: \"水晶监狱\",\r\n            description: \"水晶砖块形成复杂连锁反应\",\r\n            difficultyMultiplier: 1.5,\r\n            specialBrickRatio: 0.9,\r\n            primaryBrickType: BrickType.CRYSTAL,\r\n            secondaryBrickTypes: [BrickType.LIGHT, BrickType.ELECTRIC],\r\n            specialMechanic: \"crystal_network\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.RUBBER_NIGHTMARE, {\r\n            name: \"橡胶噩梦\",\r\n            description: \"超强反弹效果让球难以控制\",\r\n            difficultyMultiplier: 1.3,\r\n            specialBrickRatio: 0.8,\r\n            primaryBrickType: BrickType.RUBBER,\r\n            secondaryBrickTypes: [BrickType.RUBBER, BrickType.MAGNETIC],\r\n            specialMechanic: \"hyper_bounce\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.METAL_FORTRESS, {\r\n            name: \"金属要塞\",\r\n            description: \"金属砖块反弹攻击伤害\",\r\n            difficultyMultiplier: 1.4,\r\n            specialBrickRatio: 0.7,\r\n            primaryBrickType: BrickType.METAL,\r\n            secondaryBrickTypes: [BrickType.ELECTRIC, BrickType.SHIELD],\r\n            specialMechanic: \"damage_reflection\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.LIGHT_PUZZLE, {\r\n            name: \"光影谜题\",\r\n            description: \"特殊视觉效果和光线机制\",\r\n            difficultyMultiplier: 1.3,\r\n            specialBrickRatio: 0.6,\r\n            primaryBrickType: BrickType.LIGHT,\r\n            secondaryBrickTypes: [BrickType.CRYSTAL, BrickType.PHASE],\r\n            specialMechanic: \"light_mechanics\"\r\n        });\r\n        \r\n        this._eliteConfigs.set(EliteType.DARK_LABYRINTH, {\r\n            name: \"黑暗迷宫\",\r\n            description: \"视野限制增加游戏难度\",\r\n            difficultyMultiplier: 1.4,\r\n            specialBrickRatio: 0.8,\r\n            primaryBrickType: BrickType.DARK,\r\n            secondaryBrickTypes: [BrickType.VOID, BrickType.PHASE],\r\n            specialMechanic: \"vision_limit\"\r\n        });\r\n    }\r\n    \r\n    private initializeHiddenBossConfigs(): void {\r\n        this._hiddenBossConfigs.set(HiddenBossType.ANCIENT_GUARDIAN, {\r\n            name: \"远古守护者\",\r\n            description: \"沉睡千年的远古力量苏醒\",\r\n            unlockCondition: \"perfect_runs_3\",\r\n            unlockDescription: \"完成3次无伤通关\",\r\n            bossType: BossType.GUARDIAN_WALL,\r\n            difficultyMultiplier: 2.5,\r\n            specialReward: \"legendary_relic_ancient_power\"\r\n        });\r\n        \r\n        this._hiddenBossConfigs.set(HiddenBossType.VOID_LORD, {\r\n            name: \"虚空领主\",\r\n            description: \"来自虚无深渊的恐怖存在\",\r\n            unlockCondition: \"collect_void_relics_5\",\r\n            unlockDescription: \"收集5个虚空系遗物\",\r\n            bossType: BossType.TELEPORTER,\r\n            difficultyMultiplier: 3.0,\r\n            specialReward: \"legendary_relic_void_mastery\"\r\n        });\r\n        \r\n        this._hiddenBossConfigs.set(HiddenBossType.TIME_WEAVER, {\r\n            name: \"时间编织者\",\r\n            description: \"操控时间线的神秘实体\",\r\n            unlockCondition: \"speed_run_records_10\",\r\n            unlockDescription: \"在10个关卡创造速通记录\",\r\n            bossType: BossType.TIME_MANIPULATOR,\r\n            difficultyMultiplier: 2.8,\r\n            specialReward: \"legendary_relic_time_control\"\r\n        });\r\n        \r\n        this._hiddenBossConfigs.set(HiddenBossType.ELEMENTAL_AVATAR, {\r\n            name: \"元素化身\",\r\n            description: \"四大元素力量的完美融合\",\r\n            unlockCondition: \"use_all_elements_100\",\r\n            unlockDescription: \"使用所有元素攻击累计100次\",\r\n            bossType: BossType.ELEMENTAL_CHAOS,\r\n            difficultyMultiplier: 2.7,\r\n            specialReward: \"legendary_relic_elemental_mastery\"\r\n        });\r\n        \r\n        this._hiddenBossConfigs.set(HiddenBossType.MIRROR_SHADOW, {\r\n            name: \"镜像阴影\",\r\n            description: \"玩家内心黑暗面的具现化\",\r\n            unlockCondition: \"secret_sequence_complete\",\r\n            unlockDescription: \"在特定关卡执行神秘操作序列\",\r\n            bossType: BossType.MIRROR_BOSS,\r\n            difficultyMultiplier: 3.2,\r\n            specialReward: \"legendary_relic_shadow_mastery\"\r\n        });\r\n    }\r\n    \r\n    public generateEliteLevel(eliteType: EliteType, chapter: number, levelNumber: number): void {\r\n        const config = this._eliteConfigs.get(eliteType);\r\n        if (!config) {\r\n            console.error(`Elite config not found for type: ${eliteType}`);\r\n            return;\r\n        }\r\n        \r\n        console.log(`Generating Elite Level: ${config.name}`);\r\n        \r\n        // Calculate difficulty based on chapter and elite multiplier\r\n        const baseDifficulty = 1 + (chapter - 1) * 0.5 + levelNumber * 0.1;\r\n        const eliteDifficulty = baseDifficulty * config.difficultyMultiplier;\r\n        \r\n        // Generate elite-specific brick layout\r\n        this.createEliteBrickLayout(config, eliteDifficulty);\r\n        \r\n        // Apply special mechanics\r\n        this.activateEliteMechanic(config.specialMechanic, eliteDifficulty);\r\n        \r\n        // Update UI to show elite level info\r\n        this.displayEliteLevelInfo(config);\r\n    }\r\n    \r\n    private createEliteBrickLayout(config: EliteConfig, difficulty: number): void {\r\n        if (!this.enhancedBrickPrefab) return;\r\n        \r\n        const brickCount = Math.floor(30 + difficulty * 5); // More bricks than normal\r\n        const specialCount = Math.floor(brickCount * config.specialBrickRatio);\r\n        const normalCount = brickCount - specialCount;\r\n        \r\n        // Create primary special bricks\r\n        const primaryCount = Math.floor(specialCount * 0.6);\r\n        for (let i = 0; i < primaryCount; i++) {\r\n            this.createEliteBrick(config.primaryBrickType, difficulty);\r\n        }\r\n        \r\n        // Create secondary special bricks\r\n        const secondaryCount = specialCount - primaryCount;\r\n        for (let i = 0; i < secondaryCount; i++) {\r\n            const randomSecondary = config.secondaryBrickTypes[\r\n                Math.floor(Math.random() * config.secondaryBrickTypes.length)\r\n            ];\r\n            this.createEliteBrick(randomSecondary, difficulty);\r\n        }\r\n        \r\n        // Create normal bricks\r\n        for (let i = 0; i < normalCount; i++) {\r\n            this.createEliteBrick(BrickType.NORMAL, difficulty);\r\n        }\r\n    }\r\n    \r\n    private createEliteBrick(brickType: BrickType, difficulty: number): Node | null {\r\n        if (!this.enhancedBrickPrefab) return null;\r\n        \r\n        const brick = instantiate(this.enhancedBrickPrefab);\r\n        const brickComponent = brick.getComponent(EnhancedBrick);\r\n        \r\n        if (brickComponent) {\r\n            brickComponent.brickType = brickType;\r\n            \r\n            // Enhanced stats for elite levels\r\n            const baseHealth = this.getEliteHealthForBrickType(brickType);\r\n            brickComponent.health = Math.max(1, Math.floor(baseHealth * difficulty * 1.5));\r\n            \r\n            const baseScore = this.getEliteScoreForBrickType(brickType);\r\n            brickComponent.scoreValue = Math.floor(baseScore * difficulty * 1.3);\r\n        }\r\n        \r\n        // Random position within elite level bounds\r\n        const x = math.randomRangeInt(-350, 350);\r\n        const y = math.randomRangeInt(100, 400);\r\n        brick.setWorldPosition(x, y, 0);\r\n        brick.setParent(this.node.parent);\r\n        \r\n        return brick;\r\n    }\r\n    \r\n    private activateEliteMechanic(mechanic: string, difficulty: number): void {\r\n        switch (mechanic) {\r\n            case \"fortress_defense\":\r\n                this.activateFortressDefense(difficulty);\r\n                break;\r\n            case \"speed_pressure\":\r\n                this.activateSpeedPressure(difficulty);\r\n                break;\r\n            case \"regeneration_field\":\r\n                this.activateRegenerationField(difficulty);\r\n                break;\r\n            case \"elemental_chaos\":\r\n                this.activateElementalChaos(difficulty);\r\n                break;\r\n            case \"gravity_chaos\":\r\n                this.activateGravityChaos(difficulty);\r\n                break;\r\n            case \"time_chaos\":\r\n                this.activateTimeChaos(difficulty);\r\n                break;\r\n            case \"phase_shifting\":\r\n                this.activatePhaseShifting(difficulty);\r\n                break;\r\n            case \"magnetic_chaos\":\r\n                this.activateMagneticChaos(difficulty);\r\n                break;\r\n            case \"shield_network\":\r\n                this.activateShieldNetwork(difficulty);\r\n                break;\r\n            case \"void_spread\":\r\n                this.activateVoidSpread(difficulty);\r\n                break;\r\n            // Additional mechanics...\r\n            default:\r\n                console.log(`Elite mechanic not implemented: ${mechanic}`);\r\n        }\r\n    }\r\n    //TODO:完成一个特殊效果的编写\r\n    // Elite mechanic implementations\r\n    private activateFortressDefense(difficulty: number): void {\r\n        console.log('Fortress Defense mechanics activated');\r\n        \r\n        // Fortress Defense: Periodically creates shield barriers around remaining bricks\r\n        this.schedule(() => {\r\n            const allBricks = this.node.parent?.getComponentsInChildren(EnhancedBrick) || [];\r\n            const activeBricks = allBricks.filter(brick => brick.node.active && brick.health > 0);\r\n            \r\n            // Create shield effect for 30% of remaining bricks\r\n            const shieldCount = Math.floor(activeBricks.length * 0.3);\r\n            for (let i = 0; i < shieldCount; i++) {\r\n                const randomBrick = activeBricks[Math.floor(Math.random() * activeBricks.length)];\r\n                if (randomBrick) {\r\n                    // Add temporary shield (implementation would add visual effect and damage immunity)\r\n                    this.addShieldEffect(randomBrick, 5000); // 5 seconds shield\r\n                }\r\n            }\r\n        }, 8, 10, 2); // Every 8 seconds, max 10 times, start after 2 seconds\r\n    }\r\n    \r\n    private activateSpeedPressure(difficulty: number): void {\r\n        console.log('Speed Pressure mechanics activated');\r\n        \r\n        // Speed Pressure: Gradually increases ball speed and adds time pressure\r\n        let speedMultiplier = 1.0;\r\n        const maxSpeedMultiplier = 1.5 + (difficulty * 0.1);\r\n        \r\n        this.schedule(() => {\r\n            speedMultiplier = Math.min(speedMultiplier + 0.1, maxSpeedMultiplier);\r\n            \r\n            // Apply speed boost to all balls\r\n            const allBalls = this.node.parent?.getComponentsInChildren(EnhancedBall) || [];\r\n            allBalls.forEach(ball => {\r\n                if (ball.rigidBody) {\r\n                    const currentVelocity = ball.rigidBody.linearVelocity;\r\n                    currentVelocity.multiplyScalar(1.1); // 10% speed increase\r\n                    ball.rigidBody.linearVelocity = currentVelocity;\r\n                }\r\n            });\r\n            \r\n            // Add time pressure visual effect\r\n            this.addTimePressureEffect(speedMultiplier);\r\n        }, 3, 15, 1); // Every 3 seconds, increase speed\r\n    }\r\n    \r\n    private activateRegenerationField(difficulty: number): void {\r\n        console.log('Regeneration Field mechanics activated');\r\n        \r\n        // Regeneration Field: Damaged bricks slowly regenerate health\r\n        const regenRate = Math.floor(1 + difficulty * 0.5); // Health points per interval\r\n        \r\n        this.schedule(() => {\r\n            const allBricks = this.node.parent?.getComponentsInChildren(EnhancedBrick) || [];\r\n            allBricks.forEach(brick => {\r\n                if (brick.node.active && brick.health > 0 && brick.health < brick.maxHealth) {\r\n                    brick.health = Math.min(brick.health + regenRate, brick.maxHealth);\r\n                    \r\n                    // Add regeneration visual effect\r\n                    this.addRegenerationEffect(brick);\r\n                }\r\n            });\r\n        }, 2, Number.MAX_VALUE, 0); // Every 2 seconds, indefinitely\r\n    }\r\n    \r\n    private activateElementalChaos(difficulty: number): void {\r\n        console.log('Elemental Chaos mechanics activated');\r\n        \r\n        // Elemental Chaos: Random elemental effects applied to random areas\r\n        const elements = ['fire', 'ice', 'electric', 'poison'];\r\n        \r\n        this.schedule(() => {\r\n            const randomElement = elements[Math.floor(Math.random() * elements.length)];\r\n            const effectRadius = 100 + (difficulty * 20);\r\n            \r\n            // Random position in game area\r\n            const randomX = (Math.random() - 0.5) * 700; // Assume game width ~700\r\n            const randomY = Math.random() * 400 + 100;    // Height range\r\n            const effectPos = { x: randomX, y: randomY };\r\n            \r\n            // Apply elemental effect to nearby bricks and balls\r\n            this.applyElementalEffect(randomElement, effectPos, effectRadius, difficulty);\r\n            \r\n        }, 5, 20, 3); // Every 5 seconds, max 20 times, start after 3 seconds\r\n    }\r\n    \r\n    private activateGravityChaos(difficulty: number): void {\r\n        console.log('Gravity Chaos mechanics activated');\r\n        \r\n        // Gravity Chaos: Periodically changes gravity direction and strength\r\n        const gravityDirections = [\r\n            { x: 0, y: -320 },    // Normal down\r\n            { x: 0, y: 320 },     // Up\r\n            { x: -320, y: 0 },    // Left\r\n            { x: 320, y: 0 },     // Right\r\n            { x: 0, y: -160 }     // Reduced down\r\n        ];\r\n        \r\n        this.schedule(() => {\r\n            const randomGravity = gravityDirections[Math.floor(Math.random() * gravityDirections.length)];\r\n            \r\n            // Apply gravity change (would need physics world access)\r\n            this.applyGravityChange(randomGravity, 3000); // 3 seconds duration\r\n            \r\n            // Visual indicator of gravity change\r\n            this.showGravityChangeEffect(randomGravity);\r\n            \r\n        }, 8, 10, 4); // Every 8 seconds, max 10 changes\r\n    }\r\n    \r\n    private activateTimeChaos(difficulty: number): void {\r\n        console.log('Time Chaos mechanics activated');\r\n        \r\n        // Time Chaos: Game speed fluctuates randomly\r\n        const speedVariations = [0.5, 0.7, 1.0, 1.3, 1.5];\r\n        \r\n        this.schedule(() => {\r\n            const newTimeScale = speedVariations[Math.floor(Math.random() * speedVariations.length)];\r\n            \r\n            // Apply time scale change (would affect all game objects)\r\n            this.applyTimeScale(newTimeScale, 4000); // 4 seconds duration\r\n            \r\n            // Visual time distortion effect\r\n            this.showTimeDistortionEffect(newTimeScale);\r\n            \r\n        }, 6, 15, 2); // Every 6 seconds\r\n    }\r\n    \r\n    private activatePhaseShifting(difficulty: number): void {\r\n        console.log('Phase Shifting mechanics activated');\r\n        \r\n        // Phase Shifting: Bricks randomly become intangible for short periods\r\n        this.schedule(() => {\r\n            const allBricks = this.node.parent?.getComponentsInChildren(EnhancedBrick) || [];\r\n            const phaseCount = Math.floor(allBricks.length * 0.2); // 20% of bricks\r\n            \r\n            for (let i = 0; i < phaseCount; i++) {\r\n                const randomBrick = allBricks[Math.floor(Math.random() * allBricks.length)];\r\n                if (randomBrick && randomBrick.node.active) {\r\n                    // Make brick intangible\r\n                    this.makePhaseShifted(randomBrick, 3000); // 3 seconds intangible\r\n                }\r\n            }\r\n        }, 7, 12, 3); // Every 7 seconds\r\n    }\r\n    \r\n    private activateMagneticChaos(difficulty: number): void {\r\n        console.log('Magnetic Chaos mechanics activated');\r\n        \r\n        // Magnetic Chaos: Creates magnetic fields that affect ball trajectory\r\n        this.schedule(() => {\r\n            const magneticStrength = 50 + (difficulty * 20);\r\n            const fieldCount = 2 + Math.floor(difficulty * 0.5);\r\n            \r\n            for (let i = 0; i < fieldCount; i++) {\r\n                const fieldX = (Math.random() - 0.5) * 600;\r\n                const fieldY = Math.random() * 300 + 150;\r\n                \r\n                // Create magnetic field effect\r\n                this.createMagneticField(fieldX, fieldY, magneticStrength, 5000); // 5 seconds\r\n            }\r\n        }, 10, 8, 2); // Every 10 seconds\r\n    }\r\n    \r\n    private activateShieldNetwork(difficulty: number): void {\r\n        console.log('Shield Network mechanics activated');\r\n        \r\n        // Shield Network: Bricks share shield protection with nearby bricks\r\n        const allBricks = this.node.parent?.getComponentsInChildren(EnhancedBrick) || [];\r\n        const networkRange = 150; // Distance for shield sharing\r\n        \r\n        // Create shield networks\r\n        const networks: EnhancedBrick[][] = [];\r\n        allBricks.forEach(brick => {\r\n            if (!brick.node.active) return;\r\n            \r\n            // Find nearby bricks\r\n            const nearbyBricks = allBricks.filter(otherBrick => {\r\n                if (otherBrick === brick || !otherBrick.node.active) return false;\r\n                const distance = this.getDistance(brick.node.position, otherBrick.node.position);\r\n                return distance <= networkRange;\r\n            });\r\n            \r\n            if (nearbyBricks.length > 0) {\r\n                networks.push([brick, ...nearbyBricks]);\r\n            }\r\n        });\r\n        \r\n        // Apply shield network effects\r\n        networks.forEach(network => {\r\n            this.createShieldNetwork(network, difficulty);\r\n        });\r\n    }\r\n    \r\n    private activateVoidSpread(difficulty: number): void {\r\n        console.log('Void Spread mechanics activated');\r\n        \r\n        // Void Spread: Void effect spreads to adjacent bricks over time\r\n        const spreadInterval = Math.max(3, 6 - difficulty); // Faster spread with higher difficulty\r\n        \r\n        this.schedule(() => {\r\n            const allBricks = this.node.parent?.getComponentsInChildren(EnhancedBrick) || [];\r\n            const voidBricks = allBricks.filter(brick => \r\n                brick.node.active && brick.brickType === BrickType.VOID\r\n            );\r\n            \r\n            voidBricks.forEach(voidBrick => {\r\n                // Find adjacent bricks to corrupt\r\n                const adjacentBricks = this.getAdjacentBricks(voidBrick, allBricks, 120);\r\n                adjacentBricks.forEach(adjacentBrick => {\r\n                    if (adjacentBrick.brickType !== BrickType.VOID && Math.random() < 0.3) {\r\n                        // Convert to void brick with corruption effect\r\n                        this.corruptToVoid(adjacentBrick);\r\n                    }\r\n                });\r\n            });\r\n        }, spreadInterval, 20, 1); // Spread every few seconds\r\n    }\r\n    \r\n    // Hidden Boss Management\r\n    public checkHiddenBossUnlocks(): void {\r\n        for (const [bossType, config] of this._hiddenBossConfigs.entries()) {\r\n            if (!this._unlockedHiddenBosses.has(bossType)) {\r\n                if (this.checkUnlockCondition(config.unlockCondition)) {\r\n                    this.unlockHiddenBoss(bossType);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    private checkUnlockCondition(condition: string): boolean {\r\n        switch (condition) {\r\n            case \"perfect_runs_3\":\r\n                return this._playerStats.perfectRuns >= 3;\r\n            case \"collect_void_relics_5\":\r\n                return Array.from(this._playerStats.collectedRelics).filter(relic => \r\n                    relic.includes('void')).length >= 5;\r\n            case \"speed_run_records_10\":\r\n                return this._playerStats.timeRecords.size >= 10;\r\n            case \"use_all_elements_100\":\r\n                return this._playerStats.usedElements.size >= 4 && \r\n                       Array.from(this._playerStats.usedElements).length >= 100;\r\n            case \"secret_sequence_complete\":\r\n                return this.checkSecretSequence();\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    \r\n    private checkSecretSequence(): boolean {\r\n        const requiredSequence = [\"up\", \"up\", \"down\", \"down\", \"left\", \"right\", \"left\", \"right\", \"b\", \"a\"];\r\n        if (this._playerStats.secretSequence.length < requiredSequence.length) return false;\r\n        \r\n        const lastSequence = this._playerStats.secretSequence.slice(-requiredSequence.length);\r\n        return JSON.stringify(lastSequence) === JSON.stringify(requiredSequence);\r\n    }\r\n    \r\n    private unlockHiddenBoss(bossType: HiddenBossType): void {\r\n        this._unlockedHiddenBosses.add(bossType);\r\n        const config = this._hiddenBossConfigs.get(bossType);\r\n        \r\n        console.log(`Hidden Boss Unlocked: ${config?.name}`);\r\n        this.showHiddenBossUnlockNotification(config!);\r\n        this.saveUnlockProgress();\r\n    }\r\n    \r\n    public spawnHiddenBoss(bossType: HiddenBossType, chapter: number): Node | null {\r\n        if (!this._unlockedHiddenBosses.has(bossType) || !this.enhancedBossPrefab) {\r\n            return null;\r\n        }\r\n        \r\n        const config = this._hiddenBossConfigs.get(bossType);\r\n        if (!config) return null;\r\n        \r\n        const boss = instantiate(this.enhancedBossPrefab);\r\n        const bossController = boss.getComponent(EnhancedBossController);\r\n        \r\n        if (bossController) {\r\n            bossController.bossType = config.bossType;\r\n            bossController.chapter = chapter;\r\n            \r\n            // Apply hidden boss difficulty scaling\r\n            const baseDifficulty = 100 + chapter * 50;\r\n            bossController.maxHealth = Math.floor(baseDifficulty * config.difficultyMultiplier);\r\n            bossController.attackPower = Math.floor(20 * config.difficultyMultiplier);\r\n        }\r\n        \r\n        boss.setParent(this.node.parent);\r\n        boss.setWorldPosition(0, 300, 0);\r\n        \r\n        console.log(`Hidden Boss Spawned: ${config.name}`);\r\n        return boss;\r\n    }\r\n    \r\n    // Player stats tracking for unlock conditions\r\n    public recordPerfectRun(): void {\r\n        this._playerStats.perfectRuns++;\r\n        this.checkHiddenBossUnlocks();\r\n    }\r\n    \r\n    public recordRelicCollected(relicName: string): void {\r\n        this._playerStats.collectedRelics.add(relicName);\r\n        this.checkHiddenBossUnlocks();\r\n    }\r\n    \r\n    public recordSpeedRun(level: number, time: number): void {\r\n        const currentRecord = this._playerStats.timeRecords.get(level);\r\n        if (!currentRecord || time < currentRecord) {\r\n            this._playerStats.timeRecords.set(level, time);\r\n            this.checkHiddenBossUnlocks();\r\n        }\r\n    }\r\n    \r\n    public recordElementUsed(element: string): void {\r\n        this._playerStats.usedElements.add(element);\r\n        this.checkHiddenBossUnlocks();\r\n    }\r\n    \r\n    public recordSecretInput(input: string): void {\r\n        this._playerStats.secretSequence.push(input);\r\n        // Keep only last 20 inputs to prevent memory issues\r\n        if (this._playerStats.secretSequence.length > 20) {\r\n            this._playerStats.secretSequence.shift();\r\n        }\r\n        this.checkHiddenBossUnlocks();\r\n    }\r\n    \r\n    // Utility methods\r\n    private getEliteHealthForBrickType(brickType: BrickType): number {\r\n        switch (brickType) {\r\n            case BrickType.NORMAL: return 2;\r\n            case BrickType.REINFORCED: return 5;\r\n            case BrickType.SHIELD: return 7;\r\n            case BrickType.METAL: return 8;\r\n            case BrickType.REGENERATING: return 4;\r\n            default: return 3;\r\n        }\r\n    }\r\n    \r\n    private getEliteScoreForBrickType(brickType: BrickType): number {\r\n        switch (brickType) {\r\n            case BrickType.NORMAL: return 20;\r\n            case BrickType.REINFORCED: return 60;\r\n            case BrickType.EXPLOSIVE: return 50;\r\n            case BrickType.SHIELD: return 80;\r\n            case BrickType.VOID: return 200;\r\n            default: return 30;\r\n        }\r\n    }\r\n    \r\n    private displayEliteLevelInfo(config: EliteConfig): void {\r\n        console.log(`=== ELITE LEVEL ===`);\r\n        console.log(`Name: ${config.name}`);\r\n        console.log(`Description: ${config.description}`);\r\n        console.log(`Difficulty: ${config.difficultyMultiplier}x`);\r\n        console.log(`==================`);\r\n    }\r\n    \r\n    private showHiddenBossUnlockNotification(config: HiddenBossConfig): void {\r\n        console.log(`*** HIDDEN BOSS UNLOCKED ***`);\r\n        console.log(`${config.name}: ${config.description}`);\r\n        console.log(`Reward: ${config.specialReward}`);\r\n        console.log(`****************************`);\r\n    }\r\n    \r\n    private saveUnlockProgress(): void {\r\n        // Save progress to local storage or game save system\r\n        const saveData = {\r\n            unlockedBosses: Array.from(this._unlockedHiddenBosses),\r\n            playerStats: {\r\n                perfectRuns: this._playerStats.perfectRuns,\r\n                collectedRelics: Array.from(this._playerStats.collectedRelics),\r\n                timeRecords: Array.from(this._playerStats.timeRecords.entries()),\r\n                usedElements: Array.from(this._playerStats.usedElements),\r\n                secretSequence: this._playerStats.secretSequence\r\n            }\r\n        };\r\n        \r\n        // In a real implementation, this would use proper save system\r\n        console.log('Progress saved:', saveData);\r\n    }\r\n    \r\n    private loadUnlockProgress(): void {\r\n        // Load progress from save system\r\n        // For now, just initialize empty state\r\n        console.log('Unlock progress loaded');\r\n    }\r\n    \r\n    // Public accessors\r\n    public getEliteConfig(eliteType: EliteType): EliteConfig | undefined {\r\n        return this._eliteConfigs.get(eliteType);\r\n    }\r\n    \r\n    public getHiddenBossConfig(bossType: HiddenBossType): HiddenBossConfig | undefined {\r\n        return this._hiddenBossConfigs.get(bossType);\r\n    }\r\n    \r\n    public isHiddenBossUnlocked(bossType: HiddenBossType): boolean {\r\n        return this._unlockedHiddenBosses.has(bossType);\r\n    }\r\n    \r\n    public getAllUnlockedHiddenBosses(): HiddenBossType[] {\r\n        return Array.from(this._unlockedHiddenBosses);\r\n    }\r\n    \r\n    public getPlayerStats() {\r\n        return { ...this._playerStats };\r\n    }\r\n    \r\n    // Helper methods for elite mechanics\r\n    private addShieldEffect(brick: EnhancedBrick, duration: number): void {\r\n        // Add visual shield effect and temporary damage immunity\r\n        console.log(`Adding shield to brick ${brick.node.name} for ${duration}ms`);\r\n        // Implementation would add particle effect and modify damage handling\r\n    }\r\n    \r\n    private addTimePressureEffect(speedMultiplier: number): void {\r\n        // Add visual indicators for increased speed/pressure\r\n        console.log(`Time pressure effect: ${speedMultiplier}x speed`);\r\n        // Implementation would add screen effects, UI warnings\r\n    }\r\n    \r\n    private addRegenerationEffect(brick: EnhancedBrick): void {\r\n        // Add healing particle effect\r\n        console.log(`Regenerating brick ${brick.node.name}`);\r\n        // Implementation would show green healing particles\r\n    }\r\n    \r\n    private applyElementalEffect(element: string, position: {x: number, y: number}, radius: number, difficulty: number): void {\r\n        console.log(`Applying ${element} effect at (${position.x}, ${position.y}) with radius ${radius}`);\r\n        \r\n        // Find all bricks and balls within radius\r\n        const allBricks = this.node.parent?.getComponentsInChildren(EnhancedBrick) || [];\r\n        const allBalls = this.node.parent?.getComponentsInChildren(EnhancedBall) || [];\r\n        \r\n        // Apply effects based on element type\r\n        [...allBricks, ...allBalls].forEach(target => {\r\n            const distance = Math.sqrt(\r\n                Math.pow(target.node.position.x - position.x, 2) + \r\n                Math.pow(target.node.position.y - position.y, 2)\r\n            );\r\n            \r\n            if (distance <= radius) {\r\n                switch (element) {\r\n                    case 'fire':\r\n                        // Apply fire damage over time\r\n                        this.applyBurnEffect(target, difficulty * 2, 3000);\r\n                        break;\r\n                    case 'ice':\r\n                        // Apply slow effect\r\n                        this.applyFreezeEffect(target, 0.5, 2000);\r\n                        break;\r\n                    case 'electric':\r\n                        // Apply chain lightning\r\n                        this.applyElectricEffect(target, difficulty, radius);\r\n                        break;\r\n                    case 'poison':\r\n                        // Apply poison damage\r\n                        this.applyPoisonEffect(target, difficulty, 4000);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    \r\n    private applyGravityChange(newGravity: {x: number, y: number}, duration: number): void {\r\n        console.log(`Changing gravity to (${newGravity.x}, ${newGravity.y}) for ${duration}ms`);\r\n        // Implementation would access physics world and change gravity\r\n    }\r\n    \r\n    private showGravityChangeEffect(gravity: {x: number, y: number}): void {\r\n        console.log(`Showing gravity change effect for direction (${gravity.x}, ${gravity.y})`);\r\n        // Implementation would show directional arrows and visual effects\r\n    }\r\n    \r\n    private applyTimeScale(timeScale: number, duration: number): void {\r\n        console.log(`Changing time scale to ${timeScale} for ${duration}ms`);\r\n        // Implementation would affect all scheduled actions and animations\r\n    }\r\n    \r\n    private showTimeDistortionEffect(timeScale: number): void {\r\n        console.log(`Showing time distortion effect: ${timeScale}x speed`);\r\n        // Implementation would add visual warping effects\r\n    }\r\n    \r\n    private makePhaseShifted(brick: EnhancedBrick, duration: number): void {\r\n        console.log(`Making brick ${brick.node.name} phase-shifted for ${duration}ms`);\r\n        // Implementation would disable collider and add transparency effect\r\n        const collider = brick.getComponent('Collider2D');\r\n        if (collider) {\r\n            collider.enabled = false;\r\n            this.scheduleOnce(() => {\r\n                if (collider && brick.node.isValid) {\r\n                    collider.enabled = true;\r\n                }\r\n            }, duration / 1000);\r\n        }\r\n    }\r\n    \r\n    private createMagneticField(x: number, y: number, strength: number, duration: number): void {\r\n        console.log(`Creating magnetic field at (${x}, ${y}) with strength ${strength} for ${duration}ms`);\r\n        // Implementation would create invisible node that affects nearby balls\r\n    }\r\n    \r\n    private getDistance(pos1: any, pos2: any): number {\r\n        return Math.sqrt(Math.pow(pos1.x - pos2.x, 2) + Math.pow(pos1.y - pos2.y, 2));\r\n    }\r\n    \r\n    private createShieldNetwork(network: EnhancedBrick[], difficulty: number): void {\r\n        console.log(`Creating shield network with ${network.length} bricks`);\r\n        // Implementation would create shared damage reduction system\r\n    }\r\n    \r\n    private getAdjacentBricks(centerBrick: EnhancedBrick, allBricks: EnhancedBrick[], maxDistance: number): EnhancedBrick[] {\r\n        return allBricks.filter(brick => {\r\n            if (brick === centerBrick || !brick.node.active) return false;\r\n            const distance = this.getDistance(centerBrick.node.position, brick.node.position);\r\n            return distance <= maxDistance;\r\n        });\r\n    }\r\n    \r\n    private corruptToVoid(brick: EnhancedBrick): void {\r\n        console.log(`Corrupting brick ${brick.node.name} to void type`);\r\n        brick.brickType = BrickType.VOID;\r\n        // Implementation would change brick appearance and behavior\r\n    }\r\n    \r\n    private applyBurnEffect(target: any, damage: number, duration: number): void {\r\n        console.log(`Applying burn effect: ${damage} damage over ${duration}ms`);\r\n        // Implementation would apply damage over time\r\n    }\r\n    \r\n    private applyFreezeEffect(target: any, slowFactor: number, duration: number): void {\r\n        console.log(`Applying freeze effect: ${slowFactor}x speed for ${duration}ms`);\r\n        // Implementation would reduce movement/animation speed\r\n    }\r\n    \r\n    private applyElectricEffect(target: any, damage: number, radius: number): void {\r\n        console.log(`Applying electric effect: ${damage} damage with ${radius} chain radius`);\r\n        // Implementation would create chain lightning to nearby targets\r\n    }\r\n    \r\n    private applyPoisonEffect(target: any, damage: number, duration: number): void {\r\n        console.log(`Applying poison effect: ${damage} damage over ${duration}ms`);\r\n        // Implementation would apply continuous poison damage\r\n    }\r\n}"]}