{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/StarFieldBackground.ts"],"names":["_decorator","Component","Sprite","SpriteFrame","Texture2D","Color","UITransform","ccclass","property","StarFieldBackground","onLoad","createEnhancedBackground","transform","node","getComponent","console","error","createGradientLayer","createMultiLayerStars","createNebulaEffect","gradientTexture","createGradientTexture","width","height","gradientSprite","addComponent","spriteFrame","texture","reset","Math","floor","format","PixelFormat","RGBA8888","data","Uint8Array","y","ratio","r","bgStartColor","bgEndColor","g","b","x","index","uploadData","layer","layerCount","createStarLayer","layerIndex","starTexture","createStarTexture","starSprite","alpha","color","starsInLayer","starCount","starSize","i","length","random","brightness","drawStar","centerX","centerY","size","dy","dx","distance","sqrt","max","nebulaTexture","createNebulaTexture","nebulaSprite","noise","simpleNoise","intensity","n","sin"],"mappings":"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","sourcesContent":["import { _decorator, Component, Sprite, SpriteFrame, Texture2D, Color, UITransform } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('StarFieldBackground')\r\nexport class StarFieldBackground extends Component {\r\n    @property\r\n    public starCount: number = 150;\r\n    \r\n    @property\r\n    public layerCount: number = 3; // 多层星空效果\r\n    \r\n    @property\r\n    public bgStartColor: Color = new Color(0, 8, 20, 255); // #000814\r\n    \r\n    @property\r\n    public bgEndColor: Color = new Color(0, 24, 69, 255); // #001845\r\n\r\n    protected onLoad(): void {\r\n        this.createEnhancedBackground();\r\n    }\r\n\r\n    private createEnhancedBackground(): void {\r\n        const transform = this.node.getComponent(UITransform);\r\n        if (!transform) {\r\n            console.error('UITransform component not found');\r\n            return;\r\n        }\r\n\r\n        // 创建多层背景\r\n        this.createGradientLayer(transform);\r\n        this.createMultiLayerStars(transform);\r\n        this.createNebulaEffect(transform);\r\n    }\r\n\r\n    private createGradientLayer(transform: UITransform): void {\r\n        const gradientTexture = this.createGradientTexture(transform.width, transform.height);\r\n        \r\n        const gradientSprite = this.node.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = gradientTexture;\r\n        gradientSprite.spriteFrame = spriteFrame;\r\n    }\r\n\r\n    private createGradientTexture(width: number, height: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        texture.reset({\r\n            width: Math.floor(width),\r\n            height: Math.floor(height),\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(width * height * 4);\r\n        \r\n        for (let y = 0; y < height; y++) {\r\n            const ratio = y / height;\r\n            const r = Math.floor(this.bgStartColor.r + (this.bgEndColor.r - this.bgStartColor.r) * ratio);\r\n            const g = Math.floor(this.bgStartColor.g + (this.bgEndColor.g - this.bgStartColor.g) * ratio);\r\n            const b = Math.floor(this.bgStartColor.b + (this.bgEndColor.b - this.bgStartColor.b) * ratio);\r\n            \r\n            for (let x = 0; x < width; x++) {\r\n                const index = (y * width + x) * 4;\r\n                data[index] = r;     // R\r\n                data[index + 1] = g; // G\r\n                data[index + 2] = b; // B\r\n                data[index + 3] = 255; // A\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private createMultiLayerStars(transform: UITransform): void {\r\n        for (let layer = 0; layer < this.layerCount; layer++) {\r\n            this.createStarLayer(transform, layer);\r\n        }\r\n    }\r\n\r\n    private createStarLayer(transform: UITransform, layerIndex: number): void {\r\n        const starTexture = this.createStarTexture(transform.width, transform.height, layerIndex);\r\n        \r\n        const starSprite = this.node.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = starTexture;\r\n        starSprite.spriteFrame = spriteFrame;\r\n        \r\n        // 设置透明度和层次\r\n        const alpha = 255 - (layerIndex * 50);\r\n        starSprite.color = new Color(255, 255, 255, alpha);\r\n    }\r\n\r\n    private createStarTexture(width: number, height: number, layerIndex: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        texture.reset({\r\n            width: Math.floor(width),\r\n            height: Math.floor(height),\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(width * height * 4);\r\n        const starsInLayer = Math.floor(this.starCount / this.layerCount);\r\n        const starSize = 2 + layerIndex; // 不同层星星大小不同\r\n\r\n        // 初始化为透明\r\n        for (let i = 0; i < data.length; i += 4) {\r\n            data[i + 3] = 0; // 透明\r\n        }\r\n\r\n        // 绘制星星\r\n        for (let i = 0; i < starsInLayer; i++) {\r\n            const x = Math.floor(Math.random() * width);\r\n            const y = Math.floor(Math.random() * height);\r\n            const brightness = 150 + Math.random() * 105; // 150-255\r\n            \r\n            this.drawStar(data, width, height, x, y, starSize, brightness);\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private drawStar(data: Uint8Array, width: number, height: number, centerX: number, centerY: number, size: number, brightness: number): void {\r\n        for (let dy = -size; dy <= size; dy++) {\r\n            for (let dx = -size; dx <= size; dx++) {\r\n                const x = centerX + dx;\r\n                const y = centerY + dy;\r\n                \r\n                if (x >= 0 && x < width && y >= 0 && y < height) {\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    if (distance <= size) {\r\n                        const alpha = Math.max(0, brightness * (1 - distance / size));\r\n                        const index = (y * width + x) * 4;\r\n                        \r\n                        data[index] = brightness;     // R\r\n                        data[index + 1] = brightness; // G\r\n                        data[index + 2] = brightness; // B\r\n                        data[index + 3] = alpha;      // A\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private createNebulaEffect(transform: UITransform): void {\r\n        const nebulaTexture = this.createNebulaTexture(transform.width, transform.height);\r\n        \r\n        const nebulaSprite = this.node.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = nebulaTexture;\r\n        nebulaSprite.spriteFrame = spriteFrame;\r\n        nebulaSprite.color = new Color(255, 255, 255, 80); // 半透明\r\n    }\r\n\r\n    private createNebulaTexture(width: number, height: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        texture.reset({\r\n            width: Math.floor(width),\r\n            height: Math.floor(height),\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(width * height * 4);\r\n        \r\n        // 使用柏林噪声模拟的简化版本\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const index = (y * width + x) * 4;\r\n                \r\n                // 简单的噪声函数\r\n                const noise = this.simpleNoise(x * 0.01, y * 0.01);\r\n                const intensity = Math.max(0, noise * 100);\r\n                \r\n                data[index] = Math.floor(intensity * 0.8);     // R - 偏红\r\n                data[index + 1] = Math.floor(intensity * 0.4); // G\r\n                data[index + 2] = Math.floor(intensity * 1.2); // B - 偏蓝\r\n                data[index + 3] = Math.floor(intensity * 0.6); // A\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private simpleNoise(x: number, y: number): number {\r\n        // 简单的伪随机噪声函数\r\n        let n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\r\n        n = n - Math.floor(n);\r\n        return n;\r\n    }\r\n}"]}