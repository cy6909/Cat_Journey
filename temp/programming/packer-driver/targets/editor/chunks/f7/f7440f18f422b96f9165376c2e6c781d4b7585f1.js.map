{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/StarFieldBackgroundFixed.ts"],"names":["_decorator","Component","Sprite","SpriteFrame","Texture2D","Color","UITransform","Node","Widget","view","ccclass","property","StarFieldBackgroundFixed","onLoad","debugMode","console","log","setupFullScreenBackground","createLayeredBackground","transform","node","getComponent","error","addComponent","screenSize","getVisibleSize","designSize","getDesignResolutionSize","targetWidth","Math","max","width","targetHeight","height","finalTransform","setContentSize","setAnchorPoint","widget","isAlignLeft","isAlignRight","isAlignTop","isAlignBottom","left","right","top","bottom","alignMode","AlignMode","ON_WINDOW_RESIZE","updateAlignment","existingSprites","getComponents","forEach","sprite","destroy","createSeparateLayerNodes","gradientLayer","createLayerNode","addGradientToLayer","layer","layerCount","starLayer","addStarsToLayer","nebulaLayer","addNebulaToLayer","name","parentTransform","zIndex","layerNode","setParent","layerTransform","setSiblingIndex","gradientTexture","createGradientTexture","spriteFrame","texture","color","WHITE","layerIndex","starTexture","createStarTexture","alpha","nebulaTexture","createNebulaTexture","w","floor","h","reset","format","PixelFormat","RGBA8888","data","Uint8Array","y","ratio","r","bgStartColor","bgEndColor","g","b","x","index","uploadData","starsInLayer","starCount","starSize","i","length","random","brightness","drawStar","noise1","simpleNoise","noise2","combinedNoise","intensity","centerX","centerY","size","dy","dx","distance","sqrt","min","n","sin"],"mappings":"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","sourcesContent":["import { _decorator, Component, Sprite, SpriteFrame, Texture2D, Color, UITransform, Node, Widget, Canvas, view } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('StarFieldBackgroundFixed')\r\nexport class StarFieldBackgroundFixed extends Component {\r\n    @property\r\n    public starCount: number = 150;\r\n    \r\n    @property\r\n    public layerCount: number = 3;\r\n    \r\n    @property\r\n    public bgStartColor: Color = new Color(10, 30, 60, 255); // 更亮的起始色\r\n    \r\n    @property\r\n    public bgEndColor: Color = new Color(30, 80, 140, 255); // 更亮的结束色\r\n    \r\n    @property\r\n    public debugMode: boolean = true; // 默认开启调试模式\r\n\r\n    protected onLoad(): void {\r\n        if (this.debugMode) {\r\n            console.log('StarFieldBackgroundFixed: onLoad started');\r\n        }\r\n        this.setupFullScreenBackground();\r\n        this.createLayeredBackground();\r\n    }\r\n\r\n    private setupFullScreenBackground(): void {\r\n        // 1. 设置UITransform为全屏尺寸\r\n        const transform = this.node.getComponent(UITransform);\r\n        if (!transform) {\r\n            console.error('StarFieldBackgroundFixed: UITransform not found, adding one');\r\n            this.node.addComponent(UITransform);\r\n        }\r\n        \r\n        // 获取屏幕尺寸\r\n        const screenSize = view.getVisibleSize();\r\n        const designSize = view.getDesignResolutionSize();\r\n        \r\n        // 使用设计分辨率或屏幕分辨率，取较大值确保全覆盖\r\n        const targetWidth = Math.max(designSize.width, screenSize.width, 960);\r\n        const targetHeight = Math.max(designSize.height, screenSize.height, 640);\r\n        \r\n        if (this.debugMode) {\r\n            console.log(`StarFieldBackgroundFixed: Screen size: ${screenSize.width}x${screenSize.height}`);\r\n            console.log(`StarFieldBackgroundFixed: Design size: ${designSize.width}x${designSize.height}`);\r\n            console.log(`StarFieldBackgroundFixed: Target size: ${targetWidth}x${targetHeight}`);\r\n        }\r\n        \r\n        // 设置UITransform\r\n        const finalTransform = this.node.getComponent(UITransform);\r\n        finalTransform.setContentSize(targetWidth, targetHeight);\r\n        finalTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        // 2. 添加并配置Widget组件自动适应屏幕\r\n        let widget = this.node.getComponent(Widget);\r\n        if (!widget) {\r\n            widget = this.node.addComponent(Widget);\r\n        }\r\n        \r\n        // 配置Widget让背景填满整个屏幕\r\n        widget.isAlignLeft = true;\r\n        widget.isAlignRight = true;  \r\n        widget.isAlignTop = true;\r\n        widget.isAlignBottom = true;\r\n        widget.left = 0;\r\n        widget.right = 0;\r\n        widget.top = 0;\r\n        widget.bottom = 0;\r\n        widget.alignMode = Widget.AlignMode.ON_WINDOW_RESIZE;\r\n        \r\n        // 3. 立即更新Widget\r\n        widget.updateAlignment();\r\n        \r\n        if (this.debugMode) {\r\n            console.log(`StarFieldBackgroundFixed: Final size after Widget: ${finalTransform.width}x${finalTransform.height}`);\r\n        }\r\n    }\r\n\r\n    private createLayeredBackground(): void {\r\n        const transform = this.node.getComponent(UITransform);\r\n        if (!transform) {\r\n            console.error('StarFieldBackgroundFixed: UITransform component not found');\r\n            return;\r\n        }\r\n\r\n        if (this.debugMode) {\r\n            console.log(`StarFieldBackgroundFixed: Creating background with size ${transform.width}x${transform.height}`);\r\n        }\r\n\r\n        // 清除现有的Sprite组件\r\n        const existingSprites = this.node.getComponents(Sprite);\r\n        existingSprites.forEach(sprite => {\r\n            sprite.destroy();\r\n        });\r\n\r\n        // 方法1: 创建单独的子节点为每一层\r\n        this.createSeparateLayerNodes(transform);\r\n    }\r\n\r\n    private createSeparateLayerNodes(transform: UITransform): void {\r\n        // Layer 1: 渐变背景层\r\n        const gradientLayer = this.createLayerNode('GradientLayer', transform, -100);\r\n        this.addGradientToLayer(gradientLayer, transform);\r\n\r\n        // Layer 2: 星星层\r\n        for (let layer = 0; layer < this.layerCount; layer++) {\r\n            const starLayer = this.createLayerNode(`StarLayer${layer}`, transform, -50 + layer);\r\n            this.addStarsToLayer(starLayer, transform, layer);\r\n        }\r\n\r\n        // Layer 3: 星云层\r\n        const nebulaLayer = this.createLayerNode('NebulaLayer', transform, 0);\r\n        this.addNebulaToLayer(nebulaLayer, transform);\r\n\r\n        if (this.debugMode) {\r\n            console.log('StarFieldBackgroundFixed: All layers created');\r\n        }\r\n    }\r\n\r\n    private createLayerNode(name: string, parentTransform: UITransform, zIndex: number): Node {\r\n        const layerNode = new Node(name);\r\n        layerNode.setParent(this.node);\r\n        \r\n        // 设置UITransform\r\n        const layerTransform = layerNode.addComponent(UITransform);\r\n        layerTransform.setContentSize(parentTransform.width, parentTransform.height);\r\n        layerTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        // 设置层级\r\n        layerNode.setSiblingIndex(zIndex + 100); // 确保正确的渲染顺序\r\n        \r\n        return layerNode;\r\n    }\r\n\r\n    private addGradientToLayer(layerNode: Node, transform: UITransform): void {\r\n        const gradientTexture = this.createGradientTexture(transform.width, transform.height);\r\n        \r\n        const sprite = layerNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = gradientTexture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.color = Color.WHITE;\r\n\r\n        if (this.debugMode) {\r\n            console.log('StarFieldBackgroundFixed: Gradient layer added');\r\n        }\r\n    }\r\n\r\n    private addStarsToLayer(layerNode: Node, transform: UITransform, layerIndex: number): void {\r\n        const starTexture = this.createStarTexture(transform.width, transform.height, layerIndex);\r\n        \r\n        const sprite = layerNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = starTexture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        \r\n        // 设置透明度，让星星层叠加显示\r\n        const alpha = Math.max(100, 255 - (layerIndex * 60));\r\n        sprite.color = new Color(255, 255, 255, alpha);\r\n\r\n        if (this.debugMode) {\r\n            console.log(`StarFieldBackgroundFixed: Star layer ${layerIndex} added with alpha ${alpha}`);\r\n        }\r\n    }\r\n\r\n    private addNebulaToLayer(layerNode: Node, transform: UITransform): void {\r\n        const nebulaTexture = this.createNebulaTexture(transform.width, transform.height);\r\n        \r\n        const sprite = layerNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = nebulaTexture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.color = new Color(255, 255, 255, 120); // 提高透明度，避免过暗\r\n\r\n        if (this.debugMode) {\r\n            console.log('StarFieldBackgroundFixed: Nebula layer added');\r\n        }\r\n    }\r\n\r\n    private createGradientTexture(width: number, height: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = Math.max(1, Math.floor(width));\r\n        const h = Math.max(1, Math.floor(height));\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        \r\n        for (let y = 0; y < h; y++) {\r\n            const ratio = y / h;\r\n            const r = Math.floor(this.bgStartColor.r + (this.bgEndColor.r - this.bgStartColor.r) * ratio);\r\n            const g = Math.floor(this.bgStartColor.g + (this.bgEndColor.g - this.bgStartColor.g) * ratio);\r\n            const b = Math.floor(this.bgStartColor.b + (this.bgEndColor.b - this.bgStartColor.b) * ratio);\r\n            \r\n            for (let x = 0; x < w; x++) {\r\n                const index = (y * w + x) * 4;\r\n                data[index] = r;     // R\r\n                data[index + 1] = g; // G  \r\n                data[index + 2] = b; // B\r\n                data[index + 3] = 255; // A\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private createStarTexture(width: number, height: number, layerIndex: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = Math.max(1, Math.floor(width));\r\n        const h = Math.max(1, Math.floor(height));\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        const starsInLayer = Math.floor(this.starCount / this.layerCount);\r\n        const starSize = 1 + layerIndex; // 不同层星星大小\r\n\r\n        // 初始化为透明\r\n        for (let i = 0; i < data.length; i += 4) {\r\n            data[i + 3] = 0; // 完全透明\r\n        }\r\n\r\n        // 绘制星星\r\n        for (let i = 0; i < starsInLayer; i++) {\r\n            const x = Math.floor(Math.random() * w);\r\n            const y = Math.floor(Math.random() * h);\r\n            const brightness = 180 + Math.random() * 75; // 180-255，更明亮\r\n            \r\n            this.drawStar(data, w, h, x, y, starSize, brightness);\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private createNebulaTexture(width: number, height: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = Math.max(1, Math.floor(width));\r\n        const h = Math.max(1, Math.floor(height));\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        \r\n        for (let y = 0; y < h; y++) {\r\n            for (let x = 0; x < w; x++) {\r\n                const index = (y * w + x) * 4;\r\n                \r\n                // 简化的噪声函数，创建更明显的星云效果\r\n                const noise1 = this.simpleNoise(x * 0.02, y * 0.02);\r\n                const noise2 = this.simpleNoise(x * 0.01, y * 0.01);\r\n                const combinedNoise = (noise1 + noise2) * 0.5;\r\n                const intensity = Math.max(0, combinedNoise * 150); // 提高强度\r\n                \r\n                if (intensity > 50) { // 只在噪声值较高的地方显示星云\r\n                    data[index] = Math.floor(intensity * 1.2);     // R - 偏红紫\r\n                    data[index + 1] = Math.floor(intensity * 0.6); // G\r\n                    data[index + 2] = Math.floor(intensity * 1.5); // B - 偏蓝紫\r\n                    data[index + 3] = Math.floor(intensity * 0.8); // A - 适中透明度\r\n                } else {\r\n                    data[index + 3] = 0; // 完全透明\r\n                }\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private drawStar(data: Uint8Array, width: number, height: number, centerX: number, centerY: number, size: number, brightness: number): void {\r\n        for (let dy = -size; dy <= size; dy++) {\r\n            for (let dx = -size; dx <= size; dx++) {\r\n                const x = centerX + dx;\r\n                const y = centerY + dy;\r\n                \r\n                if (x >= 0 && x < width && y >= 0 && y < height) {\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    if (distance <= size) {\r\n                        const alpha = Math.max(0, brightness * (1 - distance / size));\r\n                        const index = (y * width + x) * 4;\r\n                        \r\n                        // 确保星星是白色且明亮\r\n                        data[index] = Math.min(255, brightness);     // R\r\n                        data[index + 1] = Math.min(255, brightness); // G\r\n                        data[index + 2] = Math.min(255, brightness); // B\r\n                        data[index + 3] = Math.min(255, alpha);      // A\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private simpleNoise(x: number, y: number): number {\r\n        let n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\r\n        n = n - Math.floor(n);\r\n        return n;\r\n    }\r\n}"]}