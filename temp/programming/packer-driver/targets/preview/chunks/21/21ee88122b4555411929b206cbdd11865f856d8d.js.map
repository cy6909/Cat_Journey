{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/ui/SlayTheSpireMapVisualizer.ts"],"names":["_decorator","Component","Node","Vec3","Color","Sprite","Label","Button","UITransform","Graphics","tween","Camera","view","Widget","MapManager","NodeType","ChapterTheme","ccclass","property","MapIconType","SlayTheSpireMapVisualizer","type","visualNodes","Map","pathLines","chapterConfigs","currentPlayerPosition","mapManager","onLoad","initializeChapterConfigurations","setupMapContainers","findMapManager","set","FOREST","backgroundColor","pathColor","availableNodeColor","visitedNodeColor","currentNodeColor","lockedNodeColor","particleEffects","ambientAnimations","MOUNTAIN","ABYSS","mapContainer","setParent","node","widget","addComponent","isAlignLeft","isAlignRight","isAlignTop","isAlignBottom","left","right","top","bottom","alignMode","AlignMode","ON_WINDOW_RESIZE","pathContainer","createContainer","nodeContainer","effectsContainer","mapScrollEnabled","setupMapScrolling","name","zIndex","container","setPosition","transform","screenSize","getVisibleSize","setContentSize","width","height","setAnchorPoint","on","EventType","TOUCH_START","onMapTouchStart","TOUCH_MOVE","onMapTouchMove","TOUCH_END","onMapTouchEnd","event","deltaMove","getDelta","currentPos","getPosition","x","y","z","getComponent","console","warn","generateVisualMap","chapter","currentChapter","clearCurrentMap","error","mapData","generateChapterMap","theme","getChapterTheme","applyChapterTheme","createVisualNodes","createConnectionPaths","enableAnimations","startAmbientAnimations","enableParticleEffects","createParticleEffects","log","clear","removeAllChildren","config","get","createThemedBackground","bgNode","setSiblingIndex","bgTransform","bgSprite","bgTexture","createSolidColorTexture","spriteFrame","sizeMode","SizeMode","CUSTOM","color","floors","nodesPerFloor","floor","createFloorNodes","nodeCount","floorY","startX","i","nodeX","nodePos","nodeType","determineNodeType","visualNode","createSingleVisualNode","id","index","START","BOSS","rand","Math","random","ELITE","COMBAT","SHOP","CAMPFIRE","TREASURE","position","nodeUI","iconSprite","createNodeIcon","button","target","CLICK","onNodeClicked","createNodeLabel","uiNode","connections","isVisited","isAvailable","isCurrentPosition","parentNode","iconNode","iconTransform","sprite","iconColor","getNodeTypeColor","setNodeIconAppearance","EVENT","MYSTERY","labelNode","labelTransform","label","string","getNodeTypeDisplayName","fontSize","END","forEach","nodeId","connectionId","targetNode","createPathLine","fromNode","toNode","pathNode","graphics","strokeColor","lineWidth","moveTo","lineTo","stroke","animType","createAmbientAnimation","createTreeSwayAnimation","createFogDriftAnimation","createAuroraDanceAnimation","createSnowDriftAnimation","createEnergyPulseAnimation","createVoidDistortionAnimation","effectType","createParticleEffect","effectNode","setCurrentPlayerPosition","startLevelTransition","oldNode","updateNodeVisuals","newNode","unlockConnectedNodes","targetColor","to","start","connectedNode","playNodeUnlockAnimation","scale","playTransitionAnimation","call","getCurrentPlayerPosition","getVisibleNodes","Array","from","values","filter","centerMapOnCurrentNode","currentNode","targetPos","resetMap","saveMapProgress","saveData","currentPosition","visitedNodes","map","availableNodes","loadMapProgress"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, Prefab, instantiate, Color, Sprite, Label, Button, UITransform, Vec2, Graphics, tween, Camera, view, Widget } from 'cc';\r\nimport { MapManager, NodeType, ChapterTheme } from './MapManager';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum MapIconType {\r\n    COMBAT = 'combat',\r\n    ELITE = 'elite', \r\n    BOSS = 'boss',\r\n    SHOP = 'shop',\r\n    TREASURE = 'treasure',\r\n    CAMPFIRE = 'campfire',\r\n    EVENT = 'event',\r\n    MYSTERY = 'mystery'\r\n}\r\n\r\ninterface VisualMapNode {\r\n    id: string;\r\n    type: NodeType;\r\n    position: Vec3;\r\n    uiNode: Node;\r\n    iconSprite: Sprite;\r\n    connections: string[];\r\n    isVisited: boolean;\r\n    isAvailable: boolean;\r\n    isCurrentPosition: boolean;\r\n    chapter: number;\r\n    floor: number;\r\n}\r\n\r\ninterface ChapterVisualConfig {\r\n    backgroundColor: Color;\r\n    pathColor: Color;\r\n    availableNodeColor: Color;\r\n    visitedNodeColor: Color;\r\n    currentNodeColor: Color;\r\n    lockedNodeColor: Color;\r\n    particleEffects: string[];\r\n    ambientAnimations: string[];\r\n}\r\n\r\n@ccclass('SlayTheSpireMapVisualizer')\r\nexport class SlayTheSpireMapVisualizer extends Component {\r\n    @property\r\n    public currentChapter: number = 1;\r\n    \r\n    @property\r\n    public enableAnimations: boolean = true;\r\n    \r\n    @property\r\n    public enableParticleEffects: boolean = true;\r\n    \r\n    @property\r\n    public mapScrollEnabled: boolean = true;\r\n    \r\n    @property({type: Node})\r\n    public mapContainer: Node | null = null;\r\n    \r\n    @property({type: Node})\r\n    public pathContainer: Node | null = null;\r\n    \r\n    @property({type: Node})\r\n    public nodeContainer: Node | null = null;\r\n    \r\n    @property({type: Node})\r\n    public effectsContainer: Node | null = null;\r\n    \r\n    @property({type: Camera})\r\n    public mapCamera: Camera | null = null;\r\n\r\n    private visualNodes: Map<string, VisualMapNode> = new Map();\r\n    private pathLines: Map<string, Node> = new Map();\r\n    private chapterConfigs: Map<ChapterTheme, ChapterVisualConfig> = new Map();\r\n    private currentPlayerPosition: string = '';\r\n    private mapManager: MapManager | null = null;\r\n\r\n    protected onLoad(): void {\r\n        this.initializeChapterConfigurations();\r\n        this.setupMapContainers();\r\n        this.findMapManager();\r\n    }\r\n\r\n    private initializeChapterConfigurations(): void {\r\n        // 森林主题配置\r\n        this.chapterConfigs.set(ChapterTheme.FOREST, {\r\n            backgroundColor: new Color(20, 60, 30, 255),\r\n            pathColor: new Color(139, 69, 19, 255), // 土路色\r\n            availableNodeColor: new Color(255, 255, 255, 255),\r\n            visitedNodeColor: new Color(150, 150, 150, 180),\r\n            currentNodeColor: new Color(255, 215, 0, 255), // 金色\r\n            lockedNodeColor: new Color(80, 80, 80, 120),\r\n            particleEffects: ['leaves', 'fireflies', 'pollen'],\r\n            ambientAnimations: ['tree_sway', 'fog_drift']\r\n        });\r\n\r\n        // 雪山主题配置  \r\n        this.chapterConfigs.set(ChapterTheme.MOUNTAIN, {\r\n            backgroundColor: new Color(30, 50, 80, 255),\r\n            pathColor: new Color(200, 200, 255, 255), // 雪路色\r\n            availableNodeColor: new Color(255, 255, 255, 255),\r\n            visitedNodeColor: new Color(150, 150, 200, 180),\r\n            currentNodeColor: new Color(100, 200, 255, 255), // 冰蓝色\r\n            lockedNodeColor: new Color(60, 60, 100, 120),\r\n            particleEffects: ['snow', 'aurora', 'ice_crystals'],\r\n            ambientAnimations: ['aurora_dance', 'snow_drift']\r\n        });\r\n\r\n        // 深渊主题配置\r\n        this.chapterConfigs.set(ChapterTheme.ABYSS, {\r\n            backgroundColor: new Color(50, 20, 60, 255),\r\n            pathColor: new Color(150, 50, 150, 255), // 紫色能量路径\r\n            availableNodeColor: new Color(255, 255, 255, 255),\r\n            visitedNodeColor: new Color(120, 80, 120, 180),\r\n            currentNodeColor: new Color(255, 100, 255, 255), // 紫红色\r\n            lockedNodeColor: new Color(60, 40, 60, 120),\r\n            particleEffects: ['energy_sparks', 'void_rifts', 'plasma_flows'],\r\n            ambientAnimations: ['energy_pulse', 'void_distortion']\r\n        });\r\n    }\r\n\r\n    private setupMapContainers(): void {\r\n        if (!this.mapContainer) {\r\n            this.mapContainer = new Node('MapContainer');\r\n            this.mapContainer.setParent(this.node);\r\n            \r\n            // 添加Widget适配全屏\r\n            const widget = this.mapContainer.addComponent(Widget);\r\n            widget.isAlignLeft = widget.isAlignRight = true;\r\n            widget.isAlignTop = widget.isAlignBottom = true;\r\n            widget.left = widget.right = widget.top = widget.bottom = 0;\r\n            widget.alignMode = Widget.AlignMode.ON_WINDOW_RESIZE;\r\n        }\r\n\r\n        // 创建分层容器\r\n        this.pathContainer = this.createContainer('PathContainer', -50);\r\n        this.nodeContainer = this.createContainer('NodeContainer', 0);\r\n        this.effectsContainer = this.createContainer('EffectsContainer', 50);\r\n        \r\n        // 设置滚动支持\r\n        if (this.mapScrollEnabled) {\r\n            this.setupMapScrolling();\r\n        }\r\n    }\r\n\r\n    private createContainer(name: string, zIndex: number): Node {\r\n        const container = new Node(name);\r\n        container.setParent(this.mapContainer);\r\n        container.setPosition(0, 0, zIndex);\r\n        \r\n        const transform = container.addComponent(UITransform);\r\n        const screenSize = view.getVisibleSize();\r\n        transform.setContentSize(screenSize.width * 2, screenSize.height * 3); // 可滚动的大地图\r\n        transform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        return container;\r\n    }\r\n\r\n    private setupMapScrolling(): void {\r\n        // 实现地图滚动逻辑\r\n        // 这里可以添加触摸/鼠标拖拽支持\r\n        this.node.on(Node.EventType.TOUCH_START, this.onMapTouchStart, this);\r\n        this.node.on(Node.EventType.TOUCH_MOVE, this.onMapTouchMove, this);\r\n        this.node.on(Node.EventType.TOUCH_END, this.onMapTouchEnd, this);\r\n    }\r\n\r\n    private onMapTouchStart(event: any): void {\r\n        // 记录初始触摸位置\r\n    }\r\n\r\n    private onMapTouchMove(event: any): void {\r\n        // 实现地图拖拽\r\n        if (this.mapContainer) {\r\n            const deltaMove = event.getDelta();\r\n            const currentPos = this.mapContainer.getPosition();\r\n            this.mapContainer.setPosition(\r\n                currentPos.x + deltaMove.x,\r\n                currentPos.y + deltaMove.y,\r\n                currentPos.z\r\n            );\r\n        }\r\n    }\r\n\r\n    private onMapTouchEnd(event: any): void {\r\n        // 地图拖拽结束处理\r\n    }\r\n\r\n    private findMapManager(): void {\r\n        this.mapManager = this.getComponent(MapManager) || this.node.getComponent(MapManager);\r\n        if (!this.mapManager) {\r\n            console.warn('SlayTheSpireMapVisualizer: MapManager not found');\r\n        }\r\n    }\r\n\r\n    public generateVisualMap(chapter: number): void {\r\n        this.currentChapter = chapter;\r\n        this.clearCurrentMap();\r\n        \r\n        if (!this.mapManager) {\r\n            console.error('MapManager not available for visual map generation');\r\n            return;\r\n        }\r\n\r\n        // 获取地图数据\r\n        const mapData = this.mapManager.generateChapterMap(chapter);\r\n        const theme = this.getChapterTheme(chapter);\r\n        \r\n        // 设置章节主题\r\n        this.applyChapterTheme(theme);\r\n        \r\n        // 创建可视化节点\r\n        this.createVisualNodes(mapData);\r\n        \r\n        // 创建连接路径\r\n        this.createConnectionPaths();\r\n        \r\n        // 添加动画效果\r\n        if (this.enableAnimations) {\r\n            this.startAmbientAnimations(theme);\r\n        }\r\n        \r\n        // 添加粒子效果\r\n        if (this.enableParticleEffects) {\r\n            this.createParticleEffects(theme);\r\n        }\r\n        \r\n        console.log(`Visual map generated for Chapter ${chapter} (${theme})`);\r\n    }\r\n\r\n    private clearCurrentMap(): void {\r\n        this.visualNodes.clear();\r\n        this.pathLines.clear();\r\n        \r\n        if (this.nodeContainer) {\r\n            this.nodeContainer.removeAllChildren();\r\n        }\r\n        if (this.pathContainer) {\r\n            this.pathContainer.removeAllChildren();\r\n        }\r\n        if (this.effectsContainer) {\r\n            this.effectsContainer.removeAllChildren();\r\n        }\r\n    }\r\n\r\n    private getChapterTheme(chapter: number): ChapterTheme {\r\n        switch (chapter) {\r\n            case 1: return ChapterTheme.FOREST;\r\n            case 2: return ChapterTheme.MOUNTAIN;\r\n            case 3: return ChapterTheme.ABYSS;\r\n            default: return ChapterTheme.FOREST;\r\n        }\r\n    }\r\n\r\n    private applyChapterTheme(theme: ChapterTheme): void {\r\n        const config = this.chapterConfigs.get(theme);\r\n        if (!config) return;\r\n\r\n        // 应用背景色\r\n        this.createThemedBackground(config.backgroundColor);\r\n        \r\n        console.log(`Applied theme: ${theme}`);\r\n    }\r\n\r\n    private createThemedBackground(backgroundColor: Color): void {\r\n        const bgNode = new Node('ThemedBackground');\r\n        bgNode.setParent(this.mapContainer);\r\n        bgNode.setSiblingIndex(0); // 置于最底层\r\n        \r\n        const bgTransform = bgNode.addComponent(UITransform);\r\n        const screenSize = view.getVisibleSize();\r\n        bgTransform.setContentSize(screenSize.width * 2, screenSize.height * 3);\r\n        bgTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const bgSprite = bgNode.addComponent(Sprite);\r\n        const bgTexture = this.createSolidColorTexture(backgroundColor);\r\n        bgSprite.spriteFrame = bgTexture;\r\n        bgSprite.sizeMode = Sprite.SizeMode.CUSTOM;\r\n    }\r\n\r\n    private createSolidColorTexture(color: Color): any {\r\n        // 这里应该创建纯色纹理\r\n        // 实际实现中需要使用Cocos Creator的纹理创建API\r\n        return null; // 占位符\r\n    }\r\n\r\n    private createVisualNodes(mapData: any): void {\r\n        // 根据MapManager生成的数据创建可视化节点\r\n        const floors = 15; // 每章15层\r\n        const nodesPerFloor = 4; // 每层最多4个节点\r\n        \r\n        for (let floor = 0; floor < floors; floor++) {\r\n            this.createFloorNodes(floor, nodesPerFloor);\r\n        }\r\n    }\r\n\r\n    private createFloorNodes(floor: number, nodeCount: number): void {\r\n        const floorY = -floor * 100; // 每层间距100像素\r\n        const startX = -(nodeCount - 1) * 120 / 2; // 节点水平分布\r\n        \r\n        for (let i = 0; i < nodeCount; i++) {\r\n            const nodeX = startX + i * 120;\r\n            const nodePos = new Vec3(nodeX, floorY, 0);\r\n            \r\n            // 确定节点类型\r\n            const nodeType = this.determineNodeType(floor, i);\r\n            \r\n            // 创建视觉节点\r\n            const visualNode = this.createSingleVisualNode(\r\n                `node_${floor}_${i}`,\r\n                nodeType,\r\n                nodePos,\r\n                this.currentChapter,\r\n                floor\r\n            );\r\n            \r\n            this.visualNodes.set(visualNode.id, visualNode);\r\n        }\r\n    }\r\n\r\n    private determineNodeType(floor: number, index: number): NodeType {\r\n        // 第0层必须是START\r\n        if (floor === 0) return NodeType.START;\r\n        \r\n        // 最后一层必须是BOSS\r\n        if (floor === 14) return NodeType.BOSS;\r\n        \r\n        // 根据层数和随机性确定节点类型\r\n        const rand = Math.random();\r\n        \r\n        if (floor % 5 === 4) { // 每5层有一个精英\r\n            return NodeType.ELITE;\r\n        } else if (rand < 0.7) {\r\n            return NodeType.COMBAT;\r\n        } else if (rand < 0.8) {\r\n            return NodeType.SHOP;\r\n        } else if (rand < 0.9) {\r\n            return NodeType.CAMPFIRE;\r\n        } else {\r\n            return NodeType.TREASURE;\r\n        }\r\n    }\r\n\r\n    private createSingleVisualNode(\r\n        id: string, \r\n        type: NodeType, \r\n        position: Vec3, \r\n        chapter: number, \r\n        floor: number\r\n    ): VisualMapNode {\r\n        const nodeUI = new Node(`MapNode_${id}`);\r\n        nodeUI.setParent(this.nodeContainer);\r\n        nodeUI.setPosition(position);\r\n        \r\n        // 添加UITransform\r\n        const transform = nodeUI.addComponent(UITransform);\r\n        transform.setContentSize(60, 60);\r\n        transform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        // 创建节点图标\r\n        const iconSprite = this.createNodeIcon(nodeUI, type);\r\n        \r\n        // 添加按钮功能\r\n        const button = nodeUI.addComponent(Button);\r\n        button.target = nodeUI;\r\n        \r\n        // 绑定点击事件\r\n        button.node.on(Button.EventType.CLICK, () => {\r\n            this.onNodeClicked(id);\r\n        }, this);\r\n        \r\n        // 添加节点标签\r\n        this.createNodeLabel(nodeUI, type);\r\n        \r\n        return {\r\n            id,\r\n            type,\r\n            position,\r\n            uiNode: nodeUI,\r\n            iconSprite,\r\n            connections: [],\r\n            isVisited: false,\r\n            isAvailable: floor === 0, // 只有第一层可用\r\n            isCurrentPosition: false,\r\n            chapter,\r\n            floor\r\n        };\r\n    }\r\n\r\n    private createNodeIcon(parentNode: Node, type: NodeType): Sprite {\r\n        const iconNode = new Node('Icon');\r\n        iconNode.setParent(parentNode);\r\n        \r\n        const iconTransform = iconNode.addComponent(UITransform);\r\n        iconTransform.setContentSize(40, 40);\r\n        iconTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const sprite = iconNode.addComponent(Sprite);\r\n        \r\n        // 根据节点类型设置图标\r\n        const iconColor = this.getNodeTypeColor(type);\r\n        this.setNodeIconAppearance(sprite, type, iconColor);\r\n        \r\n        return sprite;\r\n    }\r\n\r\n    private getNodeTypeColor(type: NodeType): Color {\r\n        switch (type) {\r\n            case NodeType.COMBAT: return new Color(255, 100, 100, 255); // 红色\r\n            case NodeType.ELITE: return new Color(255, 200, 0, 255); // 金色\r\n            case NodeType.BOSS: return new Color(150, 0, 255, 255); // 紫色\r\n            case NodeType.SHOP: return new Color(0, 200, 255, 255); // 蓝色\r\n            case NodeType.TREASURE: return new Color(255, 215, 0, 255); // 金宝箱色\r\n            case NodeType.CAMPFIRE: return new Color(255, 150, 0, 255); // 橙色\r\n            case NodeType.EVENT: return new Color(0, 255, 150, 255); // 绿色\r\n            case NodeType.MYSTERY: return new Color(200, 0, 200, 255); // 紫红色\r\n            default: return new Color(255, 255, 255, 255);\r\n        }\r\n    }\r\n\r\n    private setNodeIconAppearance(sprite: Sprite, type: NodeType, color: Color): void {\r\n        // 这里应该设置具体的图标纹理\r\n        // 暂时使用颜色区分\r\n        sprite.color = color;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM;\r\n    }\r\n\r\n    private createNodeLabel(parentNode: Node, type: NodeType): void {\r\n        const labelNode = new Node('Label');\r\n        labelNode.setParent(parentNode);\r\n        labelNode.setPosition(0, -40, 0);\r\n        \r\n        const labelTransform = labelNode.addComponent(UITransform);\r\n        labelTransform.setContentSize(80, 20);\r\n        labelTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const label = labelNode.addComponent(Label);\r\n        label.string = this.getNodeTypeDisplayName(type);\r\n        label.fontSize = 12;\r\n        label.color = new Color(255, 255, 255, 255);\r\n    }\r\n\r\n    private getNodeTypeDisplayName(type: NodeType): string {\r\n        switch (type) {\r\n            case NodeType.COMBAT: return '战斗';\r\n            case NodeType.ELITE: return '精英';\r\n            case NodeType.BOSS: return 'Boss';\r\n            case NodeType.SHOP: return '商店';\r\n            case NodeType.TREASURE: return '宝藏';\r\n            case NodeType.CAMPFIRE: return '篝火';\r\n            case NodeType.EVENT: return '事件';\r\n            case NodeType.MYSTERY: return '神秘';\r\n            case NodeType.START: return '开始';\r\n            case NodeType.END: return '结束';\r\n            default: return '未知';\r\n        }\r\n    }\r\n\r\n    private createConnectionPaths(): void {\r\n        // 创建节点间的连接路径\r\n        this.visualNodes.forEach((node, nodeId) => {\r\n            node.connections.forEach(connectionId => {\r\n                const targetNode = this.visualNodes.get(connectionId);\r\n                if (targetNode) {\r\n                    this.createPathLine(node, targetNode);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private createPathLine(fromNode: VisualMapNode, toNode: VisualMapNode): void {\r\n        const pathNode = new Node(`Path_${fromNode.id}_to_${toNode.id}`);\r\n        pathNode.setParent(this.pathContainer);\r\n        \r\n        const graphics = pathNode.addComponent(Graphics);\r\n        \r\n        // 获取主题配置\r\n        const theme = this.getChapterTheme(this.currentChapter);\r\n        const config = this.chapterConfigs.get(theme);\r\n        const pathColor = config?.pathColor || new Color(200, 200, 200, 255);\r\n        \r\n        // 绘制路径线条\r\n        graphics.strokeColor = pathColor;\r\n        graphics.lineWidth = 4;\r\n        graphics.moveTo(fromNode.position.x, fromNode.position.y);\r\n        graphics.lineTo(toNode.position.x, toNode.position.y);\r\n        graphics.stroke();\r\n        \r\n        this.pathLines.set(`${fromNode.id}_${toNode.id}`, pathNode);\r\n    }\r\n\r\n    private startAmbientAnimations(theme: ChapterTheme): void {\r\n        const config = this.chapterConfigs.get(theme);\r\n        if (!config) return;\r\n        \r\n        // 启动环境动画\r\n        config.ambientAnimations.forEach(animType => {\r\n            this.createAmbientAnimation(animType);\r\n        });\r\n    }\r\n\r\n    private createAmbientAnimation(animType: string): void {\r\n        switch (animType) {\r\n            case 'tree_sway':\r\n                this.createTreeSwayAnimation();\r\n                break;\r\n            case 'fog_drift':\r\n                this.createFogDriftAnimation();\r\n                break;\r\n            case 'aurora_dance':\r\n                this.createAuroraDanceAnimation();\r\n                break;\r\n            case 'snow_drift':\r\n                this.createSnowDriftAnimation();\r\n                break;\r\n            case 'energy_pulse':\r\n                this.createEnergyPulseAnimation();\r\n                break;\r\n            case 'void_distortion':\r\n                this.createVoidDistortionAnimation();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private createTreeSwayAnimation(): void {\r\n        // 森林主题：树木摇摆动画\r\n        console.log('Creating tree sway animation');\r\n    }\r\n\r\n    private createFogDriftAnimation(): void {\r\n        // 森林主题：雾气飘动动画\r\n        console.log('Creating fog drift animation');\r\n    }\r\n\r\n    private createAuroraDanceAnimation(): void {\r\n        // 雪山主题：极光舞动动画\r\n        console.log('Creating aurora dance animation');\r\n    }\r\n\r\n    private createSnowDriftAnimation(): void {\r\n        // 雪山主题：雪花飘落动画\r\n        console.log('Creating snow drift animation');\r\n    }\r\n\r\n    private createEnergyPulseAnimation(): void {\r\n        // 深渊主题：能量脉冲动画\r\n        console.log('Creating energy pulse animation');\r\n    }\r\n\r\n    private createVoidDistortionAnimation(): void {\r\n        // 深渊主题：虚空扭曲动画\r\n        console.log('Creating void distortion animation');\r\n    }\r\n\r\n    private createParticleEffects(theme: ChapterTheme): void {\r\n        const config = this.chapterConfigs.get(theme);\r\n        if (!config) return;\r\n        \r\n        // 创建粒子效果\r\n        config.particleEffects.forEach(effectType => {\r\n            this.createParticleEffect(effectType);\r\n        });\r\n    }\r\n\r\n    private createParticleEffect(effectType: string): void {\r\n        const effectNode = new Node(`ParticleEffect_${effectType}`);\r\n        effectNode.setParent(this.effectsContainer);\r\n        \r\n        // 这里应该添加粒子系统组件\r\n        // 暂时用日志记录\r\n        console.log(`Creating particle effect: ${effectType}`);\r\n    }\r\n\r\n    private onNodeClicked(nodeId: string): void {\r\n        const node = this.visualNodes.get(nodeId);\r\n        if (!node) return;\r\n        \r\n        console.log(`Node clicked: ${nodeId} (${node.type})`);\r\n        \r\n        if (!node.isAvailable) {\r\n            console.log('Node is not available');\r\n            return;\r\n        }\r\n        \r\n        // 更新当前位置\r\n        this.setCurrentPlayerPosition(nodeId);\r\n        \r\n        // 开始关卡切换过渡\r\n        this.startLevelTransition(node);\r\n    }\r\n\r\n    private setCurrentPlayerPosition(nodeId: string): void {\r\n        // 清除旧的当前位置\r\n        if (this.currentPlayerPosition) {\r\n            const oldNode = this.visualNodes.get(this.currentPlayerPosition);\r\n            if (oldNode) {\r\n                oldNode.isCurrentPosition = false;\r\n                this.updateNodeVisuals(oldNode);\r\n            }\r\n        }\r\n        \r\n        // 设置新的当前位置\r\n        const newNode = this.visualNodes.get(nodeId);\r\n        if (newNode) {\r\n            newNode.isCurrentPosition = true;\r\n            newNode.isVisited = true;\r\n            this.updateNodeVisuals(newNode);\r\n            \r\n            // 解锁连接的节点\r\n            this.unlockConnectedNodes(newNode);\r\n        }\r\n        \r\n        this.currentPlayerPosition = nodeId;\r\n    }\r\n\r\n    private updateNodeVisuals(node: VisualMapNode): void {\r\n        const theme = this.getChapterTheme(this.currentChapter);\r\n        const config = this.chapterConfigs.get(theme);\r\n        if (!config) return;\r\n        \r\n        let targetColor: Color;\r\n        \r\n        if (node.isCurrentPosition) {\r\n            targetColor = config.currentNodeColor;\r\n        } else if (node.isVisited) {\r\n            targetColor = config.visitedNodeColor;\r\n        } else if (node.isAvailable) {\r\n            targetColor = config.availableNodeColor;\r\n        } else {\r\n            targetColor = config.lockedNodeColor;\r\n        }\r\n        \r\n        // 应用颜色变化动画\r\n        if (this.enableAnimations) {\r\n            tween(node.iconSprite)\r\n                .to(0.3, { color: targetColor })\r\n                .start();\r\n        } else {\r\n            node.iconSprite.color = targetColor;\r\n        }\r\n    }\r\n\r\n    private unlockConnectedNodes(node: VisualMapNode): void {\r\n        node.connections.forEach(connectionId => {\r\n            const connectedNode = this.visualNodes.get(connectionId);\r\n            if (connectedNode && !connectedNode.isAvailable) {\r\n                connectedNode.isAvailable = true;\r\n                this.updateNodeVisuals(connectedNode);\r\n                \r\n                // 播放解锁动画\r\n                if (this.enableAnimations) {\r\n                    this.playNodeUnlockAnimation(connectedNode);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private playNodeUnlockAnimation(node: VisualMapNode): void {\r\n        // 解锁动画：闪光效果\r\n        tween(node.uiNode)\r\n            .to(0.2, { scale: new Vec3(1.2, 1.2, 1) })\r\n            .to(0.2, { scale: new Vec3(1.0, 1.0, 1) })\r\n            .start();\r\n    }\r\n\r\n    private startLevelTransition(node: VisualMapNode): void {\r\n        console.log(`Starting transition to ${node.type} level`);\r\n        \r\n        // 这里可以触发场景切换或关卡加载\r\n        // 触发MapManager的关卡加载逻辑\r\n        if (this.mapManager) {\r\n            // this.mapManager.loadLevel(node.id);\r\n        }\r\n        \r\n        // 可以在这里添加过场动画\r\n        this.playTransitionAnimation(node);\r\n    }\r\n\r\n    private playTransitionAnimation(node: VisualMapNode): void {\r\n        // 过场动画：地图淡出，准备切换到游戏场景\r\n        if (this.mapContainer && this.enableAnimations) {\r\n            tween(this.mapContainer)\r\n                .to(0.5, { \r\n                    position: new Vec3(0, 0, 0),\r\n                    scale: new Vec3(0.8, 0.8, 1)\r\n                })\r\n                .call(() => {\r\n                    console.log('Transition animation completed');\r\n                    // 这里可以触发实际的场景切换\r\n                })\r\n                .start();\r\n        }\r\n    }\r\n\r\n    // 公共接口方法\r\n    public getCurrentPlayerPosition(): string {\r\n        return this.currentPlayerPosition;\r\n    }\r\n\r\n    public getVisibleNodes(): VisualMapNode[] {\r\n        return Array.from(this.visualNodes.values()).filter(node => node.isAvailable || node.isVisited);\r\n    }\r\n\r\n    public centerMapOnCurrentNode(): void {\r\n        if (!this.currentPlayerPosition || !this.mapContainer) return;\r\n        \r\n        const currentNode = this.visualNodes.get(this.currentPlayerPosition);\r\n        if (!currentNode) return;\r\n        \r\n        // 将地图中心移动到当前节点\r\n        const targetPos = new Vec3(-currentNode.position.x, -currentNode.position.y, 0);\r\n        \r\n        if (this.enableAnimations) {\r\n            tween(this.mapContainer)\r\n                .to(0.8, { position: targetPos })\r\n                .start();\r\n        } else {\r\n            this.mapContainer.setPosition(targetPos);\r\n        }\r\n    }\r\n\r\n    public resetMap(): void {\r\n        this.clearCurrentMap();\r\n        this.currentPlayerPosition = '';\r\n    }\r\n\r\n    public saveMapProgress(): any {\r\n        // 保存地图进度数据\r\n        const saveData = {\r\n            currentChapter: this.currentChapter,\r\n            currentPosition: this.currentPlayerPosition,\r\n            visitedNodes: Array.from(this.visualNodes.values())\r\n                .filter(node => node.isVisited)\r\n                .map(node => node.id),\r\n            availableNodes: Array.from(this.visualNodes.values())\r\n                .filter(node => node.isAvailable)\r\n                .map(node => node.id)\r\n        };\r\n        \r\n        return saveData;\r\n    }\r\n\r\n    public loadMapProgress(saveData: any): void {\r\n        // 加载地图进度数据\r\n        if (saveData.currentChapter) {\r\n            this.generateVisualMap(saveData.currentChapter);\r\n        }\r\n        \r\n        if (saveData.currentPosition) {\r\n            this.setCurrentPlayerPosition(saveData.currentPosition);\r\n        }\r\n        \r\n        if (saveData.visitedNodes) {\r\n            saveData.visitedNodes.forEach((nodeId: string) => {\r\n                const node = this.visualNodes.get(nodeId);\r\n                if (node) {\r\n                    node.isVisited = true;\r\n                    this.updateNodeVisuals(node);\r\n                }\r\n            });\r\n        }\r\n        \r\n        if (saveData.availableNodes) {\r\n            saveData.availableNodes.forEach((nodeId: string) => {\r\n                const node = this.visualNodes.get(nodeId);\r\n                if (node) {\r\n                    node.isAvailable = true;\r\n                    this.updateNodeVisuals(node);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}"]}