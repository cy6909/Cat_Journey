{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/managers/ExperienceManager.ts"],"names":["_decorator","Component","EventTarget","GameManager","ccclass","property","ExperienceManager","_currentExp","_currentLevel","_expToNextLevel","_eventTarget","BASE_EXP","EXP_GROWTH","onLoad","_instance","node","destroy","onDestroy","getInstance","addExperience","amount","levelUp","emit","EVENT_EXP_CHANGED","currentExp","expToNextLevel","level","progress","calculateExpRequired","EVENT_LEVEL_UP","newLevel","applyLevelBonus","Math","floor","pow","bonuses","paddleSpeed","paddleWidth","ballDamage","maxLives","gameManager","paddle","getPaddle","currentSpeed","speed","addLife","reset","getCurrentLevel","getCurrentExp","getExpToNextLevel","getExpProgress","on","event","callback","target","off","getExpTable","maxLevel","table","push"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, EventTarget } from 'cc';\r\nimport { GameManager } from '../gameplay/GameManager';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * 经验值管理器 - 单例模式\r\n *\r\n * 负责管理玩家的经验值、等级和升级逻辑\r\n * 遵循\"好品味\"原则：简单、直接、无特殊情况\r\n */\r\n@ccclass('ExperienceManager')\r\nexport class ExperienceManager extends Component {\r\n    private static _instance: ExperienceManager | null = null;\r\n\r\n    // 核心数据 - 直接存储，无冗余\r\n    private _currentExp: number = 0;\r\n    private _currentLevel: number = 1;\r\n    private _expToNextLevel: number = 100;\r\n\r\n    // 事件系统 - 用于通知UI更新\r\n    private _eventTarget: EventTarget = new EventTarget();\r\n\r\n    // 经验值公式常量 - 100 * (1.15)^(level-1)\r\n    private readonly BASE_EXP: number = 100;\r\n    private readonly EXP_GROWTH: number = 1.15;\r\n\r\n    // 事件类型定义\r\n    public static readonly EVENT_EXP_CHANGED = 'exp-changed';\r\n    public static readonly EVENT_LEVEL_UP = 'level-up';\r\n\r\n    protected onLoad(): void {\r\n        // 单例模式 - 确保只有一个实例\r\n        if (ExperienceManager._instance) {\r\n            this.node.destroy();\r\n            return;\r\n        }\r\n        ExperienceManager._instance = this;\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        if (ExperienceManager._instance === this) {\r\n            ExperienceManager._instance = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取单例实例\r\n     */\r\n    public static getInstance(): ExperienceManager | null {\r\n        return ExperienceManager._instance;\r\n    }\r\n\r\n    /**\r\n     * 添加经验值\r\n     * 简单直接的实现 - 没有特殊情况\r\n     */\r\n    public addExperience(amount: number): void {\r\n        if (amount <= 0) return;\r\n\r\n        this._currentExp += amount;\r\n\r\n        // 检查升级 - 可能连续升级多级\r\n        while (this._currentExp >= this._expToNextLevel) {\r\n            this._currentExp -= this._expToNextLevel;\r\n            this.levelUp();\r\n        }\r\n\r\n        // 触发经验值变化事件\r\n        this._eventTarget.emit(ExperienceManager.EVENT_EXP_CHANGED, {\r\n            currentExp: this._currentExp,\r\n            expToNextLevel: this._expToNextLevel,\r\n            level: this._currentLevel,\r\n            progress: this._currentExp / this._expToNextLevel\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 升级处理\r\n     * 核心逻辑集中，无分支\r\n     */\r\n    private levelUp(): void {\r\n        this._currentLevel++;\r\n        this._expToNextLevel = this.calculateExpRequired(this._currentLevel);\r\n\r\n        // 触发升级事件\r\n        this._eventTarget.emit(ExperienceManager.EVENT_LEVEL_UP, {\r\n            newLevel: this._currentLevel,\r\n            expToNextLevel: this._expToNextLevel\r\n        });\r\n\r\n        // 应用属性提升\r\n        this.applyLevelBonus();\r\n    }\r\n\r\n    /**\r\n     * 计算指定等级所需经验值\r\n     * 公式: 100 * (1.15)^(level-1)\r\n     */\r\n    private calculateExpRequired(level: number): number {\r\n        return Math.floor(this.BASE_EXP * Math.pow(this.EXP_GROWTH, level - 1));\r\n    }\r\n\r\n    /**\r\n     * 应用升级加成\r\n     * 统一的属性提升逻辑\r\n     */\r\n    private applyLevelBonus(): void {\r\n        // 每级提升的属性\r\n        const bonuses = {\r\n            paddleSpeed: 1.02,    // 移速 +2%\r\n            paddleWidth: 1.01,    // 宽度 +1%\r\n            ballDamage: 1.03,     // 伤害 +3%\r\n            maxLives: 0.1         // 10级加1命\r\n        };\r\n\r\n        // 通知GameManager应用加成\r\n        const gameManager = GameManager.getInstance();\r\n        if (gameManager) {\r\n            const paddle = gameManager.getPaddle();\r\n            if (paddle) {\r\n                // 简单的线性提升\r\n                const currentSpeed = paddle.speed || 300;\r\n                paddle.speed = currentSpeed * bonuses.paddleSpeed;\r\n            }\r\n\r\n            // 每10级加1命\r\n            if (this._currentLevel % 10 === 0) {\r\n                gameManager.addLife(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重置系统\r\n     * 用于新游戏开始\r\n     */\r\n    public reset(): void {\r\n        this._currentExp = 0;\r\n        this._currentLevel = 1;\r\n        this._expToNextLevel = this.BASE_EXP;\r\n\r\n        // 通知UI重置\r\n        this._eventTarget.emit(ExperienceManager.EVENT_EXP_CHANGED, {\r\n            currentExp: 0,\r\n            expToNextLevel: this._expToNextLevel,\r\n            level: 1,\r\n            progress: 0\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取当前等级\r\n     */\r\n    public getCurrentLevel(): number {\r\n        return this._currentLevel;\r\n    }\r\n\r\n    /**\r\n     * 获取当前经验值\r\n     */\r\n    public getCurrentExp(): number {\r\n        return this._currentExp;\r\n    }\r\n\r\n    /**\r\n     * 获取升级所需经验值\r\n     */\r\n    public getExpToNextLevel(): number {\r\n        return this._expToNextLevel;\r\n    }\r\n\r\n    /**\r\n     * 获取经验进度百分比\r\n     */\r\n    public getExpProgress(): number {\r\n        return this._currentExp / this._expToNextLevel;\r\n    }\r\n\r\n    /**\r\n     * 注册事件监听\r\n     */\r\n    public on(event: string, callback: Function, target?: any): void {\r\n        this._eventTarget.on(event, callback, target);\r\n    }\r\n\r\n    /**\r\n     * 注销事件监听\r\n     */\r\n    public off(event: string, callback: Function, target?: any): void {\r\n        this._eventTarget.off(event, callback, target);\r\n    }\r\n\r\n    /**\r\n     * 预计算多个等级的经验需求\r\n     * 用于UI显示\r\n     */\r\n    public getExpTable(maxLevel: number = 20): number[] {\r\n        const table: number[] = [];\r\n        for (let level = 1; level <= maxLevel; level++) {\r\n            table.push(this.calculateExpRequired(level));\r\n        }\r\n        return table;\r\n    }\r\n}"]}