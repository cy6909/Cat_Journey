{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/ui/DevToolsUI.ts"],"names":["_decorator","Component","Node","EditBox","Button","Label","input","Input","KeyCode","GameManager","DifficultyCalculator","ccclass","property","DevToolsUI","_isVisible","onLoad","hidePanel","applyButton","node","on","EventType","CLICK","onApplyButtonClick","KEY_DOWN","onKeyDown","console","log","onDestroy","off","event","keyCode","F1","togglePanel","ESCAPE","ENTER","levelInput","string","showPanel","panelNode","active","focus","warn","updateInfoLabel","level","parseInt","isNaN","config","calculateDifficulty","formatConfig","gameManager","getInstance","loadLevel","error","text","infoLabel","setDefaultLevel","toString","refreshCurrentLevelInfo","currentLevel"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, EditBox, Button, Label, input, Input, KeyCode, EventKeyboard } from 'cc';\r\nimport { GameManager } from '../gameplay/GameManager';\r\nimport { DifficultyCalculator } from '../gameplay/DifficultySystem';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * ÂºÄÂèëËÄÖÂ∑•ÂÖ∑UI - Âø´ÈÄüÊµãËØï‰∏çÂêåÈöæÂ∫¶ÂÖ≥Âç°\r\n * ‰ΩøÁî®ÊñπÊ≥ï:\r\n * 1. ÊåâF1ÈîÆÂàáÊç¢ÊòæÁ§∫/ÈöêËóè\r\n * 2. Âú®ËæìÂÖ•Ê°ÜËæìÂÖ•ÂÖ≥Âç°Êï∞Â≠ó\r\n * 3. ÁÇπÂáª\"Â∫îÁî®\"ÊåâÈíÆÂä†ËΩΩËØ•ÂÖ≥Âç°\r\n */\r\n@ccclass('DevToolsUI')\r\nexport class DevToolsUI extends Component {\r\n    @property(EditBox)\r\n    public levelInput: EditBox | null = null;\r\n\r\n    @property(Button)\r\n    public applyButton: Button | null = null;\r\n\r\n    @property(Label)\r\n    public infoLabel: Label | null = null;\r\n\r\n    @property(Node)\r\n    public panelNode: Node | null = null;  // Êï¥‰∏™Èù¢ÊùøËäÇÁÇπÔºåÁî®‰∫éÊòæÁ§∫/ÈöêËóè\r\n\r\n    private _isVisible: boolean = false;\r\n\r\n    protected onLoad(): void {\r\n        // ÂàùÂßãÈöêËóèÈù¢Êùø\r\n        this.hidePanel();\r\n\r\n        // Ê≥®ÂÜåÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂\r\n        if (this.applyButton) {\r\n            this.applyButton.node.on(Button.EventType.CLICK, this.onApplyButtonClick, this);\r\n        }\r\n\r\n        // Ê≥®ÂÜåÈîÆÁõòÂø´Êç∑ÈîÆ\r\n        input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);\r\n\r\n        console.log('üõ†Ô∏è DevToolsUI initialized - Press F1 to toggle');\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        // Ê∏ÖÁêÜ‰∫ã‰ª∂ÁõëÂê¨\r\n        if (this.applyButton) {\r\n            this.applyButton.node.off(Button.EventType.CLICK, this.onApplyButtonClick, this);\r\n        }\r\n\r\n        input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);\r\n    }\r\n\r\n    /**\r\n     * ÈîÆÁõò‰∫ã‰ª∂Â§ÑÁêÜ\r\n     */\r\n    private onKeyDown(event: EventKeyboard): void {\r\n        switch (event.keyCode) {\r\n            case KeyCode.F1:\r\n                // F1ÂàáÊç¢ÊòæÁ§∫/ÈöêËóè\r\n                this.togglePanel();\r\n                break;\r\n\r\n            case KeyCode.ESCAPE:\r\n                // EscÂÖ≥Èó≠Èù¢Êùø\r\n                if (this._isVisible) {\r\n                    this.hidePanel();\r\n                }\r\n                break;\r\n\r\n            case KeyCode.ENTER:\r\n                // EnterÈîÆÂø´ÈÄüÂ∫îÁî®\r\n                if (this._isVisible && this.levelInput && this.levelInput.string) {\r\n                    this.onApplyButtonClick();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ÂàáÊç¢Èù¢ÊùøÊòæÁ§∫/ÈöêËóè\r\n     */\r\n    private togglePanel(): void {\r\n        if (this._isVisible) {\r\n            this.hidePanel();\r\n        } else {\r\n            this.showPanel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ÊòæÁ§∫Èù¢Êùø\r\n     */\r\n    private showPanel(): void {\r\n        if (this.panelNode) {\r\n            this.panelNode.active = true;\r\n            this._isVisible = true;\r\n            console.log('üõ†Ô∏è DevTools panel opened');\r\n\r\n            // ËÅöÁÑ¶ËæìÂÖ•Ê°Ü\r\n            if (this.levelInput) {\r\n                this.levelInput.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ÈöêËóèÈù¢Êùø\r\n     */\r\n    private hidePanel(): void {\r\n        if (this.panelNode) {\r\n            this.panelNode.active = false;\r\n            this._isVisible = false;\r\n            console.log('üõ†Ô∏è DevTools panel closed');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Â∫îÁî®ÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂\r\n     */\r\n    private onApplyButtonClick(): void {\r\n        if (!this.levelInput || !this.levelInput.string) {\r\n            console.warn('‚ö†Ô∏è Please enter a level number');\r\n            this.updateInfoLabel('ËØ∑ËæìÂÖ•ÂÖ≥Âç°Êï∞Â≠ó');\r\n            return;\r\n        }\r\n\r\n        const level = parseInt(this.levelInput.string);\r\n\r\n        // È™åËØÅËæìÂÖ•\r\n        if (isNaN(level) || level < 1) {\r\n            console.warn('‚ö†Ô∏è Invalid level number:', this.levelInput.string);\r\n            this.updateInfoLabel('Êó†ÊïàÁöÑÂÖ≥Âç°Êï∞Â≠ó\\nËØ∑ËæìÂÖ• >= 1 ÁöÑÊï¥Êï∞');\r\n            return;\r\n        }\r\n\r\n        if (level > 999) {\r\n            console.warn('‚ö†Ô∏è Level too high, capping at 999');\r\n            this.updateInfoLabel('ÂÖ≥Âç°Êï∞Â≠óËøáÂ§ß\\nÊúÄÂ§ß999');\r\n            return;\r\n        }\r\n\r\n        // ËÆ°ÁÆóÈöæÂ∫¶ÈÖçÁΩÆ\r\n        const config = DifficultyCalculator.calculateDifficulty(level);\r\n\r\n        // Êõ¥Êñ∞‰ø°ÊÅØÊòæÁ§∫\r\n        this.updateInfoLabel(DifficultyCalculator.formatConfig(config));\r\n\r\n        // ÈÄöÁü•GameManagerÂä†ËΩΩÂÖ≥Âç°\r\n        const gameManager = GameManager.getInstance();\r\n        if (gameManager) {\r\n            gameManager.loadLevel(level);\r\n            console.log(`‚úÖ Applied level ${level}`);\r\n        } else {\r\n            console.error('‚ùå GameManager not found');\r\n            this.updateInfoLabel('ÈîôËØØ: GameManagerÊú™ÊâæÂà∞');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Êõ¥Êñ∞‰ø°ÊÅØÊ†áÁ≠æ\r\n     */\r\n    private updateInfoLabel(text: string): void {\r\n        if (this.infoLabel) {\r\n            this.infoLabel.string = text;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ÂÖ¨ÂºÄÊñπÊ≥ï - ËÆæÁΩÆÈªòËÆ§ÂÖ≥Âç°Êï∞Â≠ó\r\n     */\r\n    public setDefaultLevel(level: number): void {\r\n        if (this.levelInput) {\r\n            this.levelInput.string = level.toString();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ÂÖ¨ÂºÄÊñπÊ≥ï - Âà∑Êñ∞ÂΩìÂâçÂÖ≥Âç°‰ø°ÊÅØÊòæÁ§∫\r\n     */\r\n    public refreshCurrentLevelInfo(): void {\r\n        const gameManager = GameManager.getInstance();\r\n        if (gameManager) {\r\n            const currentLevel = (gameManager as any).level || 1;\r\n            const config = DifficultyCalculator.calculateDifficulty(currentLevel);\r\n            this.updateInfoLabel(DifficultyCalculator.formatConfig(config));\r\n            this.setDefaultLevel(currentLevel);\r\n        }\r\n    }\r\n}\r\n"]}