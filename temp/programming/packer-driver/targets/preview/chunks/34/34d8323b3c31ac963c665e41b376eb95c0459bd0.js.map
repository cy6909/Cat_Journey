{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/effects/AdvancedEffectSystem.ts"],"names":["_decorator","Component","Node","ParticleSystem2D","tween","Color","Vec3","Vec2","UITransform","Sprite","SpriteFrame","Texture2D","ccclass","property","VisualEffectType","AdvancedEffectSystem","_effectPool","_activeEffects","Map","_effectStacks","_particlePool","_effectConfigs","getInstance","_instance","onLoad","initializeEffectPool","initializeEffectConfigs","onDestroy","clearAllEffects","i","maxEffectNodes","effectNode","active","node","addChild","push","console","log","set","BALL_FIRE_TRAIL","type","particleCount","getParticleCountByQuality","lifetime","startColor","endColor","startSize","endSize","speed","gravity","x","y","emission","shape","blend","texture","BALL_ICE_AURA","BALL_ELECTRIC_SPARK","BRICK_EXPLOSION","burst","shockwave","PADDLE_FIRE_ARMOR","layers","color","intensity","radius","pulsate","size","addEffectToObject","targetNode","effectType","duration","stackLevel","objectId","uuid","effectId","Date","now","Math","random","toString","substr","enableEffectStacking","has","existingStack","get","existingEffect","find","layer","min","updateEffectIntensity","getEffectNode","warn","effectLayer","createEffectLayer","returnEffectNode","scheduleOnce","removeEffectFromObject","effectStack","index","findIndex","destroyEffectLayer","splice","forEach","length","delete","config","parent","setPosition","createParticleEffect","createCompositeEffect","createShaderEffect","blendMode","priority","isActive","particle","addComponent","totalParticles","floor","emissionRate","speedVar","positionType","PositionType","FREE","RELATIVE","GROUPED","resetSystem","createShockwaveEffect","layerConfig","layerNode","createGlowEffect","createDistortionEffect","sprite","uiTransform","glowTexture","createGlowTexture","spriteFrame","setContentSize","originalScale","scale","clone","repeatForever","to","multiplyScalar","start","shockwaveNode","ringTexture","createRingTexture","parallel","call","destroy","getComponent","removeAllChildren","components","getComponents","component","constructor","name","high","medium","low","effectQualityLevel","canvas","document","createElement","width","height","ctx","getContext","gradient","createRadialGradient","addColorStop","r","g","b","a","fillStyle","fillRect","reset","strokeStyle","lineWidth","beginPath","arc","PI","stroke","stack","clear","setEffectQuality","level","oldQuality","max","round","updateEffectsForQualityChange","error","pauseAllEffects","stopSystem","resumeAllEffects","addFireTrailToBall","ballNode","addIceAuraToBall","addElectricSparksToBall","createBrickExplosion","brickNode","addFireArmorToPaddle","paddleNode"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,gB,OAAAA,gB;AAAkBC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,S,OAAAA,S;;;;;;;;;OAE9G;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBb,U;;kCAElBc,gB,0BAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;AAAAA,QAAAA,gB;eAAAA,gB;;;sCAqECC,oB,WADZH,OAAO,CAAC,sBAAD,C,sCAAR,MACaG,oBADb,SAC0Cd,SAD1C,CACoD;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAST;AATS;;AAAA,eAexCe,WAfwC,GAelB,EAfkB;AAAA,eAgBxCC,cAhBwC,GAgBU,IAAIC,GAAJ,EAhBV;AAAA,eAiBxCC,aAjBwC,GAiBS,IAAID,GAAJ,EAjBT;AAAA,eAkBxCE,aAlBwC,GAkBJ,EAlBI;AAAA,eAmBxCC,cAnBwC,GAmBK,IAAIH,GAAJ,EAnBL;AAAA;;AAqBvB,eAAXI,WAAW,GAAgC;AACrD,iBAAOP,oBAAoB,CAACQ,SAA5B;AACH;;AAESC,QAAAA,MAAM,GAAS;AACrB,cAAIT,oBAAoB,CAACQ,SAArB,KAAmC,IAAvC,EAA6C;AACzCR,YAAAA,oBAAoB,CAACQ,SAArB,GAAiC,IAAjC;AACH;;AAED,eAAKE,oBAAL;AACA,eAAKC,uBAAL;AACH;;AAESC,QAAAA,SAAS,GAAS;AACxB,cAAIZ,oBAAoB,CAACQ,SAArB,KAAmC,IAAvC,EAA6C;AACzCR,YAAAA,oBAAoB,CAACQ,SAArB,GAAiC,IAAjC;AACH;;AAED,eAAKK,eAAL;AACH;AAED;AACJ;AACA;;;AACYH,QAAAA,oBAAoB,GAAS;AACjC,eAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,cAAzB,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,gBAAME,UAAU,GAAG,IAAI7B,IAAJ,aAAmB2B,CAAnB,CAAnB;AACAE,YAAAA,UAAU,CAACC,MAAX,GAAoB,KAApB;AACA,iBAAKC,IAAL,CAAUC,QAAV,CAAmBH,UAAnB;;AACA,iBAAKf,WAAL,CAAiBmB,IAAjB,CAAsBJ,UAAtB;AACH;;AAEDK,UAAAA,OAAO,CAACC,GAAR,mCAA4C,KAAKP,cAAjD;AACH;AAED;AACJ;AACA;;;AACYJ,QAAAA,uBAAuB,GAAS;AACpC;AACA,eAAKL,cAAL,CAAoBiB,GAApB,CAAwBxB,gBAAgB,CAACyB,eAAzC,EAA0D;AACtDC,YAAAA,IAAI,EAAE,UADgD;AAEtDC,YAAAA,aAAa,EAAE,KAAKC,yBAAL,CAA+B,GAA/B,EAAoC,EAApC,EAAwC,EAAxC,CAFuC;AAGtDC,YAAAA,QAAQ,EAAE,GAH4C;AAItDC,YAAAA,UAAU,EAAE,IAAIvC,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,CAApB,EAAuB,GAAvB,CAJ0C;AAKtDwC,YAAAA,QAAQ,EAAE,IAAIxC,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAL4C;AAMtDyC,YAAAA,SAAS,EAAE,CAN2C;AAOtDC,YAAAA,OAAO,EAAE,CAP6C;AAQtDC,YAAAA,KAAK,EAAE,EAR+C;AAStDC,YAAAA,OAAO,EAAE;AAAEC,cAAAA,CAAC,EAAE,CAAL;AAAQC,cAAAA,CAAC,EAAE,CAAC;AAAZ,aAT6C;AAUtDC,YAAAA,QAAQ,EAAE,EAV4C;AAWtDC,YAAAA,KAAK,EAAE,OAX+C;AAYtDC,YAAAA,KAAK,EAAE,UAZ+C;AAatDC,YAAAA,OAAO,EAAE;AAb6C,WAA1D,EAFoC,CAkBpC;;;AACA,eAAKlC,cAAL,CAAoBiB,GAApB,CAAwBxB,gBAAgB,CAAC0C,aAAzC,EAAwD;AACpDhB,YAAAA,IAAI,EAAE,UAD8C;AAEpDC,YAAAA,aAAa,EAAE,KAAKC,yBAAL,CAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,CAFqC;AAGpDC,YAAAA,QAAQ,EAAE,GAH0C;AAIpDC,YAAAA,UAAU,EAAE,IAAIvC,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,CAJwC;AAKpDwC,YAAAA,QAAQ,EAAE,IAAIxC,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,CAAzB,CAL0C;AAMpDyC,YAAAA,SAAS,EAAE,EANyC;AAOpDC,YAAAA,OAAO,EAAE,EAP2C;AAQpDC,YAAAA,KAAK,EAAE,EAR6C;AASpDC,YAAAA,OAAO,EAAE;AAAEC,cAAAA,CAAC,EAAE,CAAL;AAAQC,cAAAA,CAAC,EAAE;AAAX,aAT2C;AAUpDC,YAAAA,QAAQ,EAAE,EAV0C;AAWpDC,YAAAA,KAAK,EAAE,QAX6C;AAYpDC,YAAAA,KAAK,EAAE,QAZ6C;AAapDC,YAAAA,OAAO,EAAE;AAb2C,WAAxD,EAnBoC,CAmCpC;;;AACA,eAAKlC,cAAL,CAAoBiB,GAApB,CAAwBxB,gBAAgB,CAAC2C,mBAAzC,EAA8D;AAC1DjB,YAAAA,IAAI,EAAE,UADoD;AAE1DC,YAAAA,aAAa,EAAE,KAAKC,yBAAL,CAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,CAF2C;AAG1DC,YAAAA,QAAQ,EAAE,GAHgD;AAI1DC,YAAAA,UAAU,EAAE,IAAIvC,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,CAJ8C;AAK1DwC,YAAAA,QAAQ,EAAE,IAAIxC,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,CAAzB,CALgD;AAM1DyC,YAAAA,SAAS,EAAE,CAN+C;AAO1DC,YAAAA,OAAO,EAAE,CAPiD;AAQ1DC,YAAAA,KAAK,EAAE,GARmD;AAS1DC,YAAAA,OAAO,EAAE;AAAEC,cAAAA,CAAC,EAAE,CAAL;AAAQC,cAAAA,CAAC,EAAE;AAAX,aATiD;AAU1DC,YAAAA,QAAQ,EAAE,EAVgD;AAW1DC,YAAAA,KAAK,EAAE,MAXmD;AAY1DC,YAAAA,KAAK,EAAE,UAZmD;AAa1DC,YAAAA,OAAO,EAAE;AAbiD,WAA9D,EApCoC,CAoDpC;;;AACA,eAAKlC,cAAL,CAAoBiB,GAApB,CAAwBxB,gBAAgB,CAAC4C,eAAzC,EAA0D;AACtDlB,YAAAA,IAAI,EAAE,UADgD;AAEtDC,YAAAA,aAAa,EAAE,KAAKC,yBAAL,CAA+B,GAA/B,EAAoC,EAApC,EAAwC,EAAxC,CAFuC;AAGtDC,YAAAA,QAAQ,EAAE,GAH4C;AAItDC,YAAAA,UAAU,EAAE,IAAIvC,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,CAApB,EAAuB,GAAvB,CAJ0C;AAKtDwC,YAAAA,QAAQ,EAAE,IAAIxC,KAAJ,CAAU,GAAV,EAAe,EAAf,EAAmB,CAAnB,EAAsB,CAAtB,CAL4C;AAMtDyC,YAAAA,SAAS,EAAE,EAN2C;AAOtDC,YAAAA,OAAO,EAAE,CAP6C;AAQtDC,YAAAA,KAAK,EAAE,GAR+C;AAStDC,YAAAA,OAAO,EAAE;AAAEC,cAAAA,CAAC,EAAE,CAAL;AAAQC,cAAAA,CAAC,EAAE,CAAC;AAAZ,aAT6C;AAUtDC,YAAAA,QAAQ,EAAE,GAV4C;AAWtDC,YAAAA,KAAK,EAAE,QAX+C;AAYtDC,YAAAA,KAAK,EAAE,UAZ+C;AAatDC,YAAAA,OAAO,EAAE,oBAb6C;AActDI,YAAAA,KAAK,EAAE,IAd+C;AAetDC,YAAAA,SAAS,EAAE;AAf2C,WAA1D,EArDoC,CAuEpC;;;AACA,eAAKvC,cAAL,CAAoBiB,GAApB,CAAwBxB,gBAAgB,CAAC+C,iBAAzC,EAA4D;AACxDrB,YAAAA,IAAI,EAAE,WADkD;AAExDsB,YAAAA,MAAM,EAAE,CACJ;AACItB,cAAAA,IAAI,EAAE,UADV;AAEIC,cAAAA,aAAa,EAAE,KAAKC,yBAAL,CAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,CAFnB;AAGIC,cAAAA,QAAQ,EAAE,GAHd;AAIIC,cAAAA,UAAU,EAAE,IAAIvC,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,CAApB,EAAuB,GAAvB,CAJhB;AAKIwC,cAAAA,QAAQ,EAAE,IAAIxC,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CALd;AAMIyC,cAAAA,SAAS,EAAE,CANf;AAOIC,cAAAA,OAAO,EAAE,EAPb;AAQIC,cAAAA,KAAK,EAAE,EARX;AASII,cAAAA,QAAQ,EAAE,EATd;AAUIC,cAAAA,KAAK,EAAE,KAVX;AAWIE,cAAAA,OAAO,EAAE;AAXb,aADI,EAcJ;AACIf,cAAAA,IAAI,EAAE,MADV;AAEIuB,cAAAA,KAAK,EAAE,IAAI1D,KAAJ,CAAU,GAAV,EAAe,EAAf,EAAmB,CAAnB,EAAsB,GAAtB,CAFX;AAGI2D,cAAAA,SAAS,EAAE,GAHf;AAIIC,cAAAA,MAAM,EAAE,EAJZ;AAKIC,cAAAA,OAAO,EAAE;AALb,aAdI;AAFgD,WAA5D;;AA0BA9B,UAAAA,OAAO,CAACC,GAAR,kBAA2B,KAAKhB,cAAL,CAAoB8C,IAA/C;AACH;AAED;AACJ;AACA;;;AACWC,QAAAA,iBAAiB,CAACC,UAAD,EAAmBC,UAAnB,EAAiDC,QAAjD,EAAwEC,UAAxE,EAAwG;AAAA,cAAvDD,QAAuD;AAAvDA,YAAAA,QAAuD,GAApC,CAAC,CAAmC;AAAA;;AAAA,cAAhCC,UAAgC;AAAhCA,YAAAA,UAAgC,GAAX,CAAW;AAAA;;AAC5H,cAAMC,QAAQ,GAAGJ,UAAU,CAACK,IAA5B;AACA,cAAMC,QAAQ,GAAML,UAAN,SAAoBM,IAAI,CAACC,GAAL,EAApB,SAAkCC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAhD,CAF4H,CAI5H;;AACA,cAAI,KAAKC,oBAAT,EAA+B;AAC3B,gBAAI,CAAC,KAAK/D,aAAL,CAAmBgE,GAAnB,CAAuBV,QAAvB,CAAL,EAAuC;AACnC,mBAAKtD,aAAL,CAAmBmB,GAAnB,CAAuBmC,QAAvB,EAAiC,EAAjC;AACH;;AAED,gBAAMW,aAAa,GAAG,KAAKjE,aAAL,CAAmBkE,GAAnB,CAAuBZ,QAAvB,CAAtB;;AACA,gBAAMa,cAAc,GAAGF,aAAa,CAACG,IAAd,CAAmBC,KAAK,IAAIA,KAAK,CAAClB,UAAN,KAAqBA,UAAjD,CAAvB;;AAEA,gBAAIgB,cAAJ,EAAoB;AAChB;AACAA,cAAAA,cAAc,CAACd,UAAf,GAA4BM,IAAI,CAACW,GAAL,CAASH,cAAc,CAACd,UAAf,GAA4BA,UAArC,EAAiD,CAAjD,CAA5B;AACA,mBAAKkB,qBAAL,CAA2BJ,cAA3B;AACA,qBAAOX,QAAP;AACH;AACJ,WAnB2H,CAqB5H;;;AACA,cAAM5C,UAAU,GAAG,KAAK4D,aAAL,EAAnB;;AACA,cAAI,CAAC5D,UAAL,EAAiB;AACbK,YAAAA,OAAO,CAACwD,IAAR,CAAa,2BAAb;AACA,mBAAO,EAAP;AACH;;AAED,cAAMC,WAAW,GAAG,KAAKC,iBAAL,CAAuB/D,UAAvB,EAAmCsC,UAAnC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqEC,UAArE,CAApB;;AACA,cAAI,CAACqB,WAAL,EAAkB;AACd,iBAAKE,gBAAL,CAAsBhE,UAAtB;AACA,mBAAO,EAAP;AACH,WAhC2H,CAkC5H;;;AACA,cAAI,CAAC,KAAKZ,aAAL,CAAmBgE,GAAnB,CAAuBV,QAAvB,CAAL,EAAuC;AACnC,iBAAKtD,aAAL,CAAmBmB,GAAnB,CAAuBmC,QAAvB,EAAiC,EAAjC;AACH;;AACD,eAAKtD,aAAL,CAAmBkE,GAAnB,CAAuBZ,QAAvB,EAAkCtC,IAAlC,CAAuC0D,WAAvC,EAtC4H,CAwC5H;;;AACA,cAAItB,QAAQ,GAAG,CAAf,EAAkB;AACd,iBAAKyB,YAAL,CAAkB,MAAM;AACpB,mBAAKC,sBAAL,CAA4B5B,UAA5B,EAAwCC,UAAxC;AACH,aAFD,EAEGC,QAFH;AAGH;;AAEDnC,UAAAA,OAAO,CAACC,GAAR,mBAA4BiC,UAA5B,mBAAoDG,QAApD,uBAA8ED,UAA9E;AACA,iBAAOG,QAAP;AACH;AAED;AACJ;AACA;;;AACWsB,QAAAA,sBAAsB,CAAC5B,UAAD,EAAmBC,UAAnB,EAAwD;AACjF,cAAMG,QAAQ,GAAGJ,UAAU,CAACK,IAA5B;;AACA,cAAMwB,WAAW,GAAG,KAAK/E,aAAL,CAAmBkE,GAAnB,CAAuBZ,QAAvB,CAApB;;AAEA,cAAI,CAACyB,WAAL,EAAkB;;AAElB,cAAI5B,UAAJ,EAAgB;AACZ;AACA,gBAAM6B,KAAK,GAAGD,WAAW,CAACE,SAAZ,CAAsBZ,KAAK,IAAIA,KAAK,CAAClB,UAAN,KAAqBA,UAApD,CAAd;;AACA,gBAAI6B,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,kBAAMX,KAAK,GAAGU,WAAW,CAACC,KAAD,CAAzB;AACA,mBAAKE,kBAAL,CAAwBb,KAAxB;AACAU,cAAAA,WAAW,CAACI,MAAZ,CAAmBH,KAAnB,EAA0B,CAA1B;AACH;AACJ,WARD,MAQO;AACH;AACAD,YAAAA,WAAW,CAACK,OAAZ,CAAoBf,KAAK,IAAI,KAAKa,kBAAL,CAAwBb,KAAxB,CAA7B;AACAU,YAAAA,WAAW,CAACM,MAAZ,GAAqB,CAArB;AACH;;AAED,cAAIN,WAAW,CAACM,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,iBAAKrF,aAAL,CAAmBsF,MAAnB,CAA0BhC,QAA1B;AACH;AACJ;AAED;AACJ;AACA;;;AACYqB,QAAAA,iBAAiB,CAAC/D,UAAD,EAAmBsC,UAAnB,EAAqCC,UAArC,EAAmEC,QAAnE,EAAqFC,UAArF,EAAkI;AACvJ,cAAMkC,MAAM,GAAG,KAAKrF,cAAL,CAAoBgE,GAApB,CAAwBf,UAAxB,CAAf;;AACA,cAAI,CAACoC,MAAL,EAAa;AACTtE,YAAAA,OAAO,CAACwD,IAAR,+BAAyCtB,UAAzC;AACA,mBAAO,IAAP;AACH;;AAEDvC,UAAAA,UAAU,CAACC,MAAX,GAAoB,IAApB;AACAD,UAAAA,UAAU,CAAC4E,MAAX,GAAoBtC,UAApB;AACAtC,UAAAA,UAAU,CAAC6E,WAAX,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EATuJ,CAWvJ;;AACA,kBAAQF,MAAM,CAAClE,IAAf;AACI,iBAAK,UAAL;AACI,mBAAKqE,oBAAL,CAA0B9E,UAA1B,EAAsC2E,MAAtC,EAA8ClC,UAA9C;AACA;;AACJ,iBAAK,WAAL;AACI,mBAAKsC,qBAAL,CAA2B/E,UAA3B,EAAuC2E,MAAvC,EAA+ClC,UAA/C;AACA;;AACJ,iBAAK,QAAL;AACI,mBAAKuC,kBAAL,CAAwBhF,UAAxB,EAAoC2E,MAApC,EAA4ClC,UAA5C;AACA;;AACJ;AACIpC,cAAAA,OAAO,CAACwD,IAAR,2BAAqCc,MAAM,CAAClE,IAA5C;AACA,qBAAO,IAAP;AAZR;;AAeA,iBAAO;AACH8B,YAAAA,UADG;AAEHrC,YAAAA,IAAI,EAAEF,UAFH;AAGHwC,YAAAA,QAHG;AAIHC,YAAAA,UAJG;AAKHwC,YAAAA,SAAS,EAAEN,MAAM,CAACpD,KAAP,IAAgB,QALxB;AAMH2D,YAAAA,QAAQ,EAAEP,MAAM,CAACO,QAAP,IAAmB,CAN1B;AAOHC,YAAAA,QAAQ,EAAE;AAPP,WAAP;AASH;AAED;AACJ;AACA;;;AACYL,QAAAA,oBAAoB,CAAC9E,UAAD,EAAmB2E,MAAnB,EAAgClC,UAAhC,EAA0D;AAClF,cAAM2C,QAAQ,GAAGpF,UAAU,CAACqF,YAAX,CAAwBjH,gBAAxB,CAAjB,CADkF,CAGlF;;AACAgH,UAAAA,QAAQ,CAACE,cAAT,GAA0BvC,IAAI,CAACwC,KAAL,CAAWZ,MAAM,CAACjE,aAAP,GAAuB+B,UAAlC,CAA1B;AACA2C,UAAAA,QAAQ,CAAC5C,QAAT,GAAoBmC,MAAM,CAAC/D,QAA3B;AACAwE,UAAAA,QAAQ,CAACI,YAAT,GAAwBb,MAAM,CAACtD,QAAP,GAAkBoB,UAA1C,CANkF,CAQlF;;AACA2C,UAAAA,QAAQ,CAACvE,UAAT,GAAsB8D,MAAM,CAAC9D,UAA7B;AACAuE,UAAAA,QAAQ,CAACtE,QAAT,GAAoB6D,MAAM,CAAC7D,QAA3B,CAVkF,CAYlF;;AACAsE,UAAAA,QAAQ,CAACrE,SAAT,GAAqB4D,MAAM,CAAC5D,SAA5B;AACAqE,UAAAA,QAAQ,CAACpE,OAAT,GAAmB2D,MAAM,CAAC3D,OAA1B,CAdkF,CAgBlF;;AACAoE,UAAAA,QAAQ,CAACnE,KAAT,GAAiB0D,MAAM,CAAC1D,KAAxB;AACAmE,UAAAA,QAAQ,CAACK,QAAT,GAAoBd,MAAM,CAAC1D,KAAP,GAAe,GAAnC,CAlBkF,CAoBlF;;AACA,cAAI0D,MAAM,CAACzD,OAAX,EAAoB;AAChBkE,YAAAA,QAAQ,CAAClE,OAAT,GAAmB,IAAI1C,IAAJ,CAASmG,MAAM,CAACzD,OAAP,CAAeC,CAAxB,EAA2BwD,MAAM,CAACzD,OAAP,CAAeE,CAA1C,CAAnB;AACH,WAvBiF,CAyBlF;;;AACA,kBAAQuD,MAAM,CAACrD,KAAf;AACI,iBAAK,OAAL;AACI8D,cAAAA,QAAQ,CAACM,YAAT,GAAwBtH,gBAAgB,CAACuH,YAAjB,CAA8BC,IAAtD;AACA;;AACJ,iBAAK,QAAL;AACIR,cAAAA,QAAQ,CAACM,YAAT,GAAwBtH,gBAAgB,CAACuH,YAAjB,CAA8BE,QAAtD;AACA;;AACJ,iBAAK,QAAL;AACIT,cAAAA,QAAQ,CAACM,YAAT,GAAwBtH,gBAAgB,CAACuH,YAAjB,CAA8BG,OAAtD;AACA;AATR,WA1BkF,CAsClF;;;AACA,cAAInB,MAAM,CAAC/C,KAAX,EAAkB;AACdwD,YAAAA,QAAQ,CAACI,YAAT,GAAwB,CAAxB;AACAJ,YAAAA,QAAQ,CAACE,cAAT,GAA0BX,MAAM,CAACjE,aAAP,GAAuB+B,UAAjD;AACA,iBAAKwB,YAAL,CAAkB,MAAM;AACpBmB,cAAAA,QAAQ,CAACW,WAAT;AACH,aAFD,EAEG,GAFH;AAGH,WA7CiF,CA+ClF;;;AACA,cAAIpB,MAAM,CAAC9C,SAAX,EAAsB;AAClB,iBAAKmE,qBAAL,CAA2BhG,UAA3B,EAAuCyC,UAAvC;AACH;;AAED2C,UAAAA,QAAQ,CAACW,WAAT;AACH;AAED;AACJ;AACA;;;AACYhB,QAAAA,qBAAqB,CAAC/E,UAAD,EAAmB2E,MAAnB,EAAgClC,UAAhC,EAA0D;AACnFkC,UAAAA,MAAM,CAAC5C,MAAP,CAAcyC,OAAd,CAAsB,CAACyB,WAAD,EAAmB7B,KAAnB,KAAqC;AACvD,gBAAM8B,SAAS,GAAG,IAAI/H,IAAJ,YAAkBiG,KAAlB,CAAlB;AACApE,YAAAA,UAAU,CAACG,QAAX,CAAoB+F,SAApB;;AAEA,oBAAQD,WAAW,CAACxF,IAApB;AACI,mBAAK,UAAL;AACI,qBAAKqE,oBAAL,CAA0BoB,SAA1B,EAAqCD,WAArC,EAAkDxD,UAAlD;AACA;;AACJ,mBAAK,MAAL;AACI,qBAAK0D,gBAAL,CAAsBD,SAAtB,EAAiCD,WAAjC,EAA8CxD,UAA9C;AACA;;AACJ,mBAAK,YAAL;AACI,qBAAK2D,sBAAL,CAA4BF,SAA5B,EAAuCD,WAAvC,EAAoDxD,UAApD;AACA;AATR;AAWH,WAfD;AAgBH;AAED;AACJ;AACA;;;AACY0D,QAAAA,gBAAgB,CAACnG,UAAD,EAAmB2E,MAAnB,EAAgClC,UAAhC,EAA0D;AAC9E,cAAM4D,MAAM,GAAGrG,UAAU,CAACqF,YAAX,CAAwB3G,MAAxB,CAAf;AACA,cAAM4H,WAAW,GAAGtG,UAAU,CAACqF,YAAX,CAAwB5G,WAAxB,CAApB,CAF8E,CAI9E;;AACA,cAAM8H,WAAW,GAAG,KAAKC,iBAAL,CAAuB7B,MAAM,CAACzC,MAAP,GAAgBO,UAAvC,EAAmDkC,MAAM,CAAC3C,KAA1D,CAApB;AACA,cAAMyE,WAAW,GAAG,IAAI9H,WAAJ,EAApB;AACA8H,UAAAA,WAAW,CAACjF,OAAZ,GAAsB+E,WAAtB;AACAF,UAAAA,MAAM,CAACI,WAAP,GAAqBA,WAArB;AAEAH,UAAAA,WAAW,CAACI,cAAZ,CAA2B/B,MAAM,CAACzC,MAAP,GAAgB,CAAhB,GAAoBO,UAA/C,EAA2DkC,MAAM,CAACzC,MAAP,GAAgB,CAAhB,GAAoBO,UAA/E;AACA4D,UAAAA,MAAM,CAACrE,KAAP,GAAe2C,MAAM,CAAC3C,KAAtB,CAX8E,CAa9E;;AACA,cAAI2C,MAAM,CAACxC,OAAX,EAAoB;AAChB,gBAAMwE,aAAa,GAAG3G,UAAU,CAAC4G,KAAX,CAAiBC,KAAjB,EAAtB;AACAxI,YAAAA,KAAK,CAAC2B,UAAD,CAAL,CACK8G,aADL,CAEQzI,KAAK,GACA0I,EADL,CACQ,GADR,EACa;AAAEH,cAAAA,KAAK,EAAED,aAAa,CAACK,cAAd,CAA6B,GAA7B;AAAT,aADb,EAEKD,EAFL,CAEQ,GAFR,EAEa;AAAEH,cAAAA,KAAK,EAAED;AAAT,aAFb,CAFR,EAMKM,KANL;AAOH;AACJ;AAED;AACJ;AACA;;;AACYjB,QAAAA,qBAAqB,CAAChG,UAAD,EAAmByC,UAAnB,EAA6C;AACtE,cAAMyE,aAAa,GAAG,IAAI/I,IAAJ,CAAS,WAAT,CAAtB;AACA6B,UAAAA,UAAU,CAACG,QAAX,CAAoB+G,aAApB;AAEA,cAAMb,MAAM,GAAGa,aAAa,CAAC7B,YAAd,CAA2B3G,MAA3B,CAAf;AACA,cAAM4H,WAAW,GAAGY,aAAa,CAAC7B,YAAd,CAA2B5G,WAA3B,CAApB,CALsE,CAOtE;;AACA,cAAM0I,WAAW,GAAG,KAAKC,iBAAL,CAAuB,KAAK3E,UAA5B,CAApB;AACA,cAAMgE,WAAW,GAAG,IAAI9H,WAAJ,EAApB;AACA8H,UAAAA,WAAW,CAACjF,OAAZ,GAAsB2F,WAAtB;AACAd,UAAAA,MAAM,CAACI,WAAP,GAAqBA,WAArB;AAEAH,UAAAA,WAAW,CAACI,cAAZ,CAA2B,EAA3B,EAA+B,EAA/B;AACAL,UAAAA,MAAM,CAACrE,KAAP,GAAe,IAAI1D,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,CAAf,CAdsE,CAgBtE;;AACAD,UAAAA,KAAK,CAAC6I,aAAD,CAAL,CACKG,QADL,CAEQhJ,KAAK,GAAG0I,EAAR,CAAW,GAAX,EAAgB;AAAEH,YAAAA,KAAK,EAAE,IAAIrI,IAAJ,CAAS,IAAIkE,UAAb,EAAyB,IAAIA,UAA7B,EAAyC,CAAzC;AAAT,WAAhB,CAFR,EAGQpE,KAAK,GAAG0I,EAAR,CAAW,GAAX,EAAgB;AACZH,YAAAA,KAAK,EAAE,IAAIrI,IAAJ,CAAS,IAAIkE,UAAb,EAAyB,IAAIA,UAA7B,EAAyC,CAAzC,CADK;AAEZT,YAAAA,KAAK,EAAE,IAAI1D,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,CAAzB;AAFK,WAAhB,CAHR,EAQKgJ,IARL,CAQU,MAAM;AACRJ,YAAAA,aAAa,CAACK,OAAd;AACH,WAVL,EAWKN,KAXL;AAYH;AAED;AACJ;AACA;;;AACYtD,QAAAA,qBAAqB,CAACG,WAAD,EAAsC;AAC/D,cAAMsB,QAAQ,GAAGtB,WAAW,CAAC5D,IAAZ,CAAiBsH,YAAjB,CAA8BpJ,gBAA9B,CAAjB;;AACA,cAAIgH,QAAJ,EAAc;AACV,gBAAMT,MAAM,GAAG,KAAKrF,cAAL,CAAoBgE,GAApB,CAAwBQ,WAAW,CAACvB,UAApC,CAAf;;AACA,gBAAIoC,MAAJ,EAAY;AACRS,cAAAA,QAAQ,CAACE,cAAT,GAA0BvC,IAAI,CAACwC,KAAL,CAAWZ,MAAM,CAACjE,aAAP,GAAuBoD,WAAW,CAACrB,UAA9C,CAA1B;AACA2C,cAAAA,QAAQ,CAACI,YAAT,GAAwBb,MAAM,CAACtD,QAAP,GAAkByC,WAAW,CAACrB,UAAtD;AACA2C,cAAAA,QAAQ,CAACW,WAAT;AACH;AACJ;AACJ;AAED;AACJ;AACA;;;AACYnC,QAAAA,aAAa,GAAgB;AACjC,eAAK,IAAM1D,IAAX,IAAmB,KAAKjB,WAAxB,EAAqC;AACjC,gBAAI,CAACiB,IAAI,CAACD,MAAV,EAAkB;AACd,qBAAOC,IAAP;AACH;AACJ;;AACD,iBAAO,IAAP;AACH;;AAEO8D,QAAAA,gBAAgB,CAAC9D,IAAD,EAAmB;AACvCA,UAAAA,IAAI,CAACD,MAAL,GAAc,KAAd;AACAC,UAAAA,IAAI,CAAC0E,MAAL,GAAc,KAAK1E,IAAnB;AACAA,UAAAA,IAAI,CAACuH,iBAAL,GAHuC,CAIvC;;AACA,cAAMC,UAAU,GAAGxH,IAAI,CAACyH,aAAL,CAAmBzJ,SAAnB,CAAnB;AACAwJ,UAAAA,UAAU,CAAClD,OAAX,CAAmBoD,SAAS,IAAI;AAC5B,gBAAIA,SAAS,CAACC,WAAV,CAAsBC,IAAtB,KAA+B,WAA/B,IAA8CF,SAAS,CAACC,WAAV,CAAsBC,IAAtB,KAA+B,aAAjF,EAAgG;AAC5FF,cAAAA,SAAS,CAACL,OAAV;AACH;AACJ,WAJD;AAKH;;AAEOjD,QAAAA,kBAAkB,CAACb,KAAD,EAAgC;AACtDA,UAAAA,KAAK,CAAC0B,QAAN,GAAiB,KAAjB;AACA,eAAKnB,gBAAL,CAAsBP,KAAK,CAACvD,IAA5B;AACH;;AAEOS,QAAAA,yBAAyB,CAACoH,IAAD,EAAeC,MAAf,EAA+BC,GAA/B,EAAoD;AACjF,kBAAQ,KAAKC,kBAAb;AACI,iBAAK,CAAL;AAAQ,qBAAOH,IAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAOC,MAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAOC,GAAP;;AACR;AAAS,qBAAOD,MAAP;AAJb;AAMH;;AAEOxB,QAAAA,iBAAiB,CAACtE,MAAD,EAAiBF,KAAjB,EAA0C;AAC/D,cAAMI,IAAI,GAAGF,MAAM,GAAG,CAAtB;AACA,cAAMiG,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,UAAAA,MAAM,CAACG,KAAP,GAAelG,IAAf;AACA+F,UAAAA,MAAM,CAACI,MAAP,GAAgBnG,IAAhB;AACA,cAAMoG,GAAG,GAAGL,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAAZ;AAEA,cAAMC,QAAQ,GAAGF,GAAG,CAACG,oBAAJ,CAAyBzG,MAAzB,EAAiCA,MAAjC,EAAyC,CAAzC,EAA4CA,MAA5C,EAAoDA,MAApD,EAA4DA,MAA5D,CAAjB;AACAwG,UAAAA,QAAQ,CAACE,YAAT,CAAsB,CAAtB,YAAiC5G,KAAK,CAAC6G,CAAvC,UAA6C7G,KAAK,CAAC8G,CAAnD,UAAyD9G,KAAK,CAAC+G,CAA/D,UAAqE/G,KAAK,CAACgH,CAAN,GAAU,GAA/E;AACAN,UAAAA,QAAQ,CAACE,YAAT,CAAsB,CAAtB,YAAiC5G,KAAK,CAAC6G,CAAvC,UAA6C7G,KAAK,CAAC8G,CAAnD,UAAyD9G,KAAK,CAAC+G,CAA/D;AAEAP,UAAAA,GAAG,CAACS,SAAJ,GAAgBP,QAAhB;AACAF,UAAAA,GAAG,CAACU,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmB9G,IAAnB,EAAyBA,IAAzB;AAEA,cAAMZ,OAAO,GAAG,IAAI5C,SAAJ,EAAhB,CAd+D,CAe/D;AACA;;AACA4C,UAAAA,OAAO,CAAC2H,KAAR,CAAc;AACVb,YAAAA,KAAK,EAAEH,MAAM,CAACG,KADJ;AAEVC,YAAAA,MAAM,EAAEJ,MAAM,CAACI;AAFL,WAAd;AAIA,iBAAO/G,OAAP;AACH;;AAEO4F,QAAAA,iBAAiB,CAAClF,MAAD,EAA4B;AACjD,cAAME,IAAI,GAAGF,MAAM,GAAG,CAAtB;AACA,cAAMiG,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,UAAAA,MAAM,CAACG,KAAP,GAAelG,IAAf;AACA+F,UAAAA,MAAM,CAACI,MAAP,GAAgBnG,IAAhB;AACA,cAAMoG,GAAG,GAAGL,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAAZ;AAEAD,UAAAA,GAAG,CAACY,WAAJ,GAAkB,OAAlB;AACAZ,UAAAA,GAAG,CAACa,SAAJ,GAAgB,CAAhB;AACAb,UAAAA,GAAG,CAACc,SAAJ;AACAd,UAAAA,GAAG,CAACe,GAAJ,CAAQrH,MAAR,EAAgBA,MAAhB,EAAwBA,MAAM,GAAG,CAAjC,EAAoC,CAApC,EAAuCa,IAAI,CAACyG,EAAL,GAAU,CAAjD;AACAhB,UAAAA,GAAG,CAACiB,MAAJ;AAEA,cAAMjI,OAAO,GAAG,IAAI5C,SAAJ,EAAhB,CAbiD,CAcjD;AACA;;AACA4C,UAAAA,OAAO,CAAC2H,KAAR,CAAc;AACVb,YAAAA,KAAK,EAAEH,MAAM,CAACG,KADJ;AAEVC,YAAAA,MAAM,EAAEJ,MAAM,CAACI;AAFL,WAAd;AAIA,iBAAO/G,OAAP;AACH;AAED;AACJ;AACA;;;AACW3B,QAAAA,eAAe,GAAS;AAC3B,eAAKT,aAAL,CAAmBoF,OAAnB,CAA2BkF,KAAK,IAAI;AAChCA,YAAAA,KAAK,CAAClF,OAAN,CAAcf,KAAK,IAAI,KAAKa,kBAAL,CAAwBb,KAAxB,CAAvB;AACH,WAFD;;AAGA,eAAKrE,aAAL,CAAmBuK,KAAnB;AACH;;AAEMC,QAAAA,gBAAgB,CAACC,KAAD,EAAsB;AACzC,cAAI;AACA,gBAAMC,UAAU,GAAG,KAAK5B,kBAAxB;AACA,iBAAKA,kBAAL,GAA0BnF,IAAI,CAACgH,GAAL,CAAS,CAAT,EAAYhH,IAAI,CAACW,GAAL,CAAS,CAAT,EAAYX,IAAI,CAACiH,KAAL,CAAWH,KAAK,IAAI,CAApB,CAAZ,CAAZ,CAA1B;;AAEA,gBAAI,KAAK3B,kBAAL,KAA4B4B,UAAhC,EAA4C;AACxCzJ,cAAAA,OAAO,CAACC,GAAR,kCAA2CwJ,UAA3C,YAA4D,KAAK5B,kBAAjE,EADwC,CAGxC;;AACA,mBAAK+B,6BAAL;AACH;AAEJ,WAXD,CAWE,OAAOC,KAAP,EAAc;AACZ7J,YAAAA,OAAO,CAAC6J,KAAR,CAAc,+BAAd,EAA+CA,KAA/C;AACA,iBAAKhC,kBAAL,GAA0B,CAA1B,CAFY,CAEiB;AAChC;AACJ;;AAEO+B,QAAAA,6BAA6B,GAAS;AAC1C,cAAI;AACA;AACA,iBAAK7K,aAAL,CAAmBoF,OAAnB,CAA4BkF,KAAD,IAAW;AAClCA,cAAAA,KAAK,CAAClF,OAAN,CAAcf,KAAK,IAAI;AACnB,oBAAIA,KAAK,CAAC0B,QAAV,EAAoB;AAChB,uBAAKxB,qBAAL,CAA2BF,KAA3B;AACH;AACJ,eAJD;AAKH,aAND;AAOH,WATD,CASE,OAAOyG,KAAP,EAAc;AACZ7J,YAAAA,OAAO,CAACwD,IAAR,CAAa,4CAAb,EAA2DqG,KAA3D;AACH;AACJ;;AAEMC,QAAAA,eAAe,GAAS;AAC3B,eAAK/K,aAAL,CAAmBoF,OAAnB,CAA2BkF,KAAK,IAAI;AAChCA,YAAAA,KAAK,CAAClF,OAAN,CAAcf,KAAK,IAAI;AACnB,kBAAM2B,QAAQ,GAAG3B,KAAK,CAACvD,IAAN,CAAWsH,YAAX,CAAwBpJ,gBAAxB,CAAjB;;AACA,kBAAIgH,QAAQ,IAAI3B,KAAK,CAAC0B,QAAtB,EAAgC;AAC5BC,gBAAAA,QAAQ,CAACgF,UAAT;AACH;AACJ,aALD;AAMH,WAPD;AAQH;;AAEMC,QAAAA,gBAAgB,GAAS;AAC5B,eAAKjL,aAAL,CAAmBoF,OAAnB,CAA2BkF,KAAK,IAAI;AAChCA,YAAAA,KAAK,CAAClF,OAAN,CAAcf,KAAK,IAAI;AACnB,kBAAM2B,QAAQ,GAAG3B,KAAK,CAACvD,IAAN,CAAWsH,YAAX,CAAwBpJ,gBAAxB,CAAjB;;AACA,kBAAIgH,QAAQ,IAAI3B,KAAK,CAAC0B,QAAtB,EAAgC;AAC5BC,gBAAAA,QAAQ,CAACW,WAAT;AACH;AACJ,aALD;AAMH,WAPD;AAQH;AAED;AACJ;AACA;;;AACWuE,QAAAA,kBAAkB,CAACC,QAAD,EAAiB/H,QAAjB,EAAgD;AAAA,cAA/BA,QAA+B;AAA/BA,YAAAA,QAA+B,GAAZ,CAAC,CAAW;AAAA;;AACrE,iBAAO,KAAKH,iBAAL,CAAuBkI,QAAvB,EAAiCxL,gBAAgB,CAACyB,eAAlD,EAAmEgC,QAAnE,CAAP;AACH;;AAEMgI,QAAAA,gBAAgB,CAACD,QAAD,EAAiB/H,QAAjB,EAAgD;AAAA,cAA/BA,QAA+B;AAA/BA,YAAAA,QAA+B,GAAZ,CAAC,CAAW;AAAA;;AACnE,iBAAO,KAAKH,iBAAL,CAAuBkI,QAAvB,EAAiCxL,gBAAgB,CAAC0C,aAAlD,EAAiEe,QAAjE,CAAP;AACH;;AAEMiI,QAAAA,uBAAuB,CAACF,QAAD,EAAiB/H,QAAjB,EAAgD;AAAA,cAA/BA,QAA+B;AAA/BA,YAAAA,QAA+B,GAAZ,CAAC,CAAW;AAAA;;AAC1E,iBAAO,KAAKH,iBAAL,CAAuBkI,QAAvB,EAAiCxL,gBAAgB,CAAC2C,mBAAlD,EAAuEc,QAAvE,CAAP;AACH;;AAEMkI,QAAAA,oBAAoB,CAACC,SAAD,EAAwB;AAC/C,eAAKtI,iBAAL,CAAuBsI,SAAvB,EAAkC5L,gBAAgB,CAAC4C,eAAnD,EAAoE,GAApE;AACH;;AAEMiJ,QAAAA,oBAAoB,CAACC,UAAD,EAAmBrI,QAAnB,EAAkD;AAAA,cAA/BA,QAA+B;AAA/BA,YAAAA,QAA+B,GAAZ,CAAC,CAAW;AAAA;;AACzE,iBAAO,KAAKH,iBAAL,CAAuBwI,UAAvB,EAAmC9L,gBAAgB,CAAC+C,iBAApD,EAAuEU,QAAvE,CAAP;AACH;;AAEMwC,QAAAA,kBAAkB,CAAChF,UAAD,EAAmB2E,MAAnB,EAAgClC,UAAhC,EAA0D;AAC/E;AACApC,UAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACH;;AAEM8F,QAAAA,sBAAsB,CAACpG,UAAD,EAAmB2E,MAAnB,EAAgClC,UAAhC,EAA0D;AACnF;AACApC,UAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACH;;AA/mB+C,O,UAcjCd,S,GAAyC,I,2FAZvDV,Q;;;;;iBAC+B,E;;+FAE/BA,Q;;;;;iBACsC,I;;6FAEtCA,Q;;;;;iBACmC,C;;gGAEnCA,Q;;;;;iBACuC,I","sourcesContent":["import { _decorator, Component, Node, ParticleSystem2D, tween, Color, Vec3, Vec2, UITransform, Sprite, SpriteFrame, Texture2D } from 'cc';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum VisualEffectType {\r\n    // 弹球特效\r\n    BALL_FIRE_TRAIL = 'ball_fire_trail',\r\n    BALL_ICE_AURA = 'ball_ice_aura', \r\n    BALL_ELECTRIC_SPARK = 'ball_electric_spark',\r\n    BALL_POISON_MIST = 'ball_poison_mist',\r\n    BALL_EXPLOSIVE_CHARGE = 'ball_explosive_charge',\r\n    BALL_PIERCING_GLOW = 'ball_piercing_glow',\r\n    BALL_MAGNETIC_FIELD = 'ball_magnetic_field',\r\n    BALL_PHASE_SHIMMER = 'ball_phase_shimmer',\r\n    BALL_GRAVITY_DISTORTION = 'ball_gravity_distortion',\r\n    BALL_TIME_RIPPLE = 'ball_time_ripple',\r\n    BALL_HEALING_LIGHT = 'ball_healing_light',\r\n    BALL_CHAOS_SWIRL = 'ball_chaos_swirl',\r\n    \r\n    // 砖块特效\r\n    BRICK_FIRE_BURN = 'brick_fire_burn',\r\n    BRICK_ICE_FREEZE = 'brick_ice_freeze',\r\n    BRICK_ELECTRIC_CHAIN = 'brick_electric_chain',\r\n    BRICK_POISON_CORRODE = 'brick_poison_corrode',\r\n    BRICK_EXPLOSION = 'brick_explosion',\r\n    BRICK_SPLITTING = 'brick_splitting',\r\n    BRICK_MAGNETIC_ATTRACT = 'brick_magnetic_attract',\r\n    BRICK_PHASE_FADE = 'brick_phase_fade',\r\n    BRICK_REGENERATION = 'brick_regeneration',\r\n    BRICK_CRYSTAL_SHATTER = 'brick_crystal_shatter',\r\n    \r\n    // 挡板特效\r\n    PADDLE_FIRE_ARMOR = 'paddle_fire_armor',\r\n    PADDLE_ICE_SHIELD = 'paddle_ice_shield',\r\n    PADDLE_ELECTRIC_CHARGE = 'paddle_electric_charge',\r\n    PADDLE_DAMAGE_SPARKS = 'paddle_damage_sparks',\r\n    PADDLE_REPAIR_GLOW = 'paddle_repair_glow',\r\n    PADDLE_LEVEL_UP_BURST = 'paddle_level_up_burst',\r\n    PADDLE_LASER_CHARGE = 'paddle_laser_charge',\r\n    \r\n    // 核心特效\r\n    CORE_DAMAGE_CRACK = 'core_damage_crack',\r\n    CORE_CRITICAL_PULSE = 'core_critical_pulse',\r\n    CORE_HEALING_AURA = 'core_healing_aura',\r\n    CORE_LEVEL_UP_NOVA = 'core_level_up_nova',\r\n    CORE_DESTRUCTION = 'core_destruction',\r\n    \r\n    // 环境特效\r\n    ENV_FIRE_PARTICLES = 'env_fire_particles',\r\n    ENV_ICE_CRYSTALS = 'env_ice_crystals',\r\n    ENV_ELECTRIC_ARCS = 'env_electric_arcs',\r\n    ENV_POISON_FOG = 'env_poison_fog',\r\n    ENV_EXPLOSION_SHOCKWAVE = 'env_explosion_shockwave',\r\n    ENV_LIGHT_RAYS = 'env_light_rays',\r\n    \r\n    // UI特效\r\n    UI_BUTTON_GLOW = 'ui_button_glow',\r\n    UI_TRANSITION_FADE = 'ui_transition_fade',\r\n    UI_SUCCESS_SPARKLE = 'ui_success_sparkle',\r\n    UI_ERROR_SHAKE = 'ui_error_shake'\r\n}\r\n\r\nexport interface EffectStackLayer {\r\n    effectType: VisualEffectType;\r\n    node: Node;\r\n    duration: number;\r\n    stackLevel: number;\r\n    blendMode: string;\r\n    priority: number;\r\n    isActive: boolean;\r\n}\r\n\r\n@ccclass('AdvancedEffectSystem')\r\nexport class AdvancedEffectSystem extends Component {\r\n    \r\n    @property\r\n    public maxEffectNodes: number = 50;\r\n    \r\n    @property\r\n    public enableEffectStacking: boolean = true;\r\n    \r\n    @property\r\n    public effectQualityLevel: number = 2; // 0-低, 1-中, 2-高\r\n    \r\n    @property\r\n    public enableParticlePooling: boolean = true;\r\n\r\n    private static _instance: AdvancedEffectSystem | null = null;\r\n    private _effectPool: Node[] = [];\r\n    private _activeEffects: Map<string, EffectStackLayer[]> = new Map();\r\n    private _effectStacks: Map<string, EffectStackLayer[]> = new Map();\r\n    private _particlePool: ParticleSystem2D[] = [];\r\n    private _effectConfigs: Map<VisualEffectType, any> = new Map();\r\n\r\n    public static getInstance(): AdvancedEffectSystem | null {\r\n        return AdvancedEffectSystem._instance;\r\n    }\r\n\r\n    protected onLoad(): void {\r\n        if (AdvancedEffectSystem._instance === null) {\r\n            AdvancedEffectSystem._instance = this;\r\n        }\r\n        \r\n        this.initializeEffectPool();\r\n        this.initializeEffectConfigs();\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        if (AdvancedEffectSystem._instance === this) {\r\n            AdvancedEffectSystem._instance = null;\r\n        }\r\n        \r\n        this.clearAllEffects();\r\n    }\r\n\r\n    /**\r\n     * 初始化特效池\r\n     */\r\n    private initializeEffectPool(): void {\r\n        for (let i = 0; i < this.maxEffectNodes; i++) {\r\n            const effectNode = new Node(`Effect_${i}`);\r\n            effectNode.active = false;\r\n            this.node.addChild(effectNode);\r\n            this._effectPool.push(effectNode);\r\n        }\r\n        \r\n        console.log(`Effect pool initialized with ${this.maxEffectNodes} nodes`);\r\n    }\r\n\r\n    /**\r\n     * 初始化特效配置\r\n     */\r\n    private initializeEffectConfigs(): void {\r\n        // 弹球火焰尾迹配置\r\n        this._effectConfigs.set(VisualEffectType.BALL_FIRE_TRAIL, {\r\n            type: 'particle',\r\n            particleCount: this.getParticleCountByQuality(100, 50, 25),\r\n            lifetime: 1.5,\r\n            startColor: new Color(255, 100, 0, 255),\r\n            endColor: new Color(255, 0, 0, 0),\r\n            startSize: 8,\r\n            endSize: 2,\r\n            speed: 50,\r\n            gravity: { x: 0, y: -100 },\r\n            emission: 60,\r\n            shape: 'point',\r\n            blend: 'additive',\r\n            texture: 'fire_particle'\r\n        });\r\n\r\n        // 弹球冰霜光环配置\r\n        this._effectConfigs.set(VisualEffectType.BALL_ICE_AURA, {\r\n            type: 'particle',\r\n            particleCount: this.getParticleCountByQuality(80, 40, 20),\r\n            lifetime: 2.0,\r\n            startColor: new Color(150, 200, 255, 180),\r\n            endColor: new Color(100, 150, 255, 0),\r\n            startSize: 12,\r\n            endSize: 20,\r\n            speed: 20,\r\n            gravity: { x: 0, y: 0 },\r\n            emission: 30,\r\n            shape: 'circle',\r\n            blend: 'normal',\r\n            texture: 'ice_crystal'\r\n        });\r\n\r\n        // 弹球电击火花配置\r\n        this._effectConfigs.set(VisualEffectType.BALL_ELECTRIC_SPARK, {\r\n            type: 'particle',\r\n            particleCount: this.getParticleCountByQuality(60, 30, 15),\r\n            lifetime: 0.8,\r\n            startColor: new Color(255, 255, 100, 255),\r\n            endColor: new Color(100, 100, 255, 0),\r\n            startSize: 4,\r\n            endSize: 1,\r\n            speed: 100,\r\n            gravity: { x: 0, y: 0 },\r\n            emission: 80,\r\n            shape: 'cone',\r\n            blend: 'additive',\r\n            texture: 'electric_spark'\r\n        });\r\n\r\n        // 砖块爆炸配置\r\n        this._effectConfigs.set(VisualEffectType.BRICK_EXPLOSION, {\r\n            type: 'particle',\r\n            particleCount: this.getParticleCountByQuality(150, 75, 35),\r\n            lifetime: 1.0,\r\n            startColor: new Color(255, 150, 0, 255),\r\n            endColor: new Color(100, 50, 0, 0),\r\n            startSize: 15,\r\n            endSize: 5,\r\n            speed: 150,\r\n            gravity: { x: 0, y: -200 },\r\n            emission: 200,\r\n            shape: 'sphere',\r\n            blend: 'additive',\r\n            texture: 'explosion_fragment',\r\n            burst: true,\r\n            shockwave: true\r\n        });\r\n\r\n        // 挡板火焰护甲配置\r\n        this._effectConfigs.set(VisualEffectType.PADDLE_FIRE_ARMOR, {\r\n            type: 'composite',\r\n            layers: [\r\n                {\r\n                    type: 'particle',\r\n                    particleCount: this.getParticleCountByQuality(40, 20, 10),\r\n                    lifetime: 1.5,\r\n                    startColor: new Color(255, 100, 0, 200),\r\n                    endColor: new Color(255, 0, 0, 0),\r\n                    startSize: 6,\r\n                    endSize: 12,\r\n                    speed: 30,\r\n                    emission: 25,\r\n                    shape: 'box',\r\n                    texture: 'fire_armor'\r\n                },\r\n                {\r\n                    type: 'glow',\r\n                    color: new Color(255, 50, 0, 100),\r\n                    intensity: 0.8,\r\n                    radius: 20,\r\n                    pulsate: true\r\n                }\r\n            ]\r\n        });\r\n\r\n        console.log(`Initialized ${this._effectConfigs.size} effect configurations`);\r\n    }\r\n\r\n    /**\r\n     * 添加特效到对象\r\n     */\r\n    public addEffectToObject(targetNode: Node, effectType: VisualEffectType, duration: number = -1, stackLevel: number = 1): string {\r\n        const objectId = targetNode.uuid;\r\n        const effectId = `${effectType}_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;\r\n        \r\n        // 检查是否启用特效叠加\r\n        if (this.enableEffectStacking) {\r\n            if (!this._effectStacks.has(objectId)) {\r\n                this._effectStacks.set(objectId, []);\r\n            }\r\n            \r\n            const existingStack = this._effectStacks.get(objectId)!;\r\n            const existingEffect = existingStack.find(layer => layer.effectType === effectType);\r\n            \r\n            if (existingEffect) {\r\n                // 更新现有特效的叠加层级\r\n                existingEffect.stackLevel = Math.min(existingEffect.stackLevel + stackLevel, 5);\r\n                this.updateEffectIntensity(existingEffect);\r\n                return effectId;\r\n            }\r\n        }\r\n\r\n        // 创建新的特效层\r\n        const effectNode = this.getEffectNode();\r\n        if (!effectNode) {\r\n            console.warn('No available effect nodes');\r\n            return '';\r\n        }\r\n\r\n        const effectLayer = this.createEffectLayer(effectNode, targetNode, effectType, duration, stackLevel);\r\n        if (!effectLayer) {\r\n            this.returnEffectNode(effectNode);\r\n            return '';\r\n        }\r\n\r\n        // 添加到堆栈\r\n        if (!this._effectStacks.has(objectId)) {\r\n            this._effectStacks.set(objectId, []);\r\n        }\r\n        this._effectStacks.get(objectId)!.push(effectLayer);\r\n\r\n        // 如果有持续时间，设置自动清理\r\n        if (duration > 0) {\r\n            this.scheduleOnce(() => {\r\n                this.removeEffectFromObject(targetNode, effectType);\r\n            }, duration);\r\n        }\r\n\r\n        console.log(`Added effect ${effectType} to object ${objectId}, stack level: ${stackLevel}`);\r\n        return effectId;\r\n    }\r\n\r\n    /**\r\n     * 从对象移除特效\r\n     */\r\n    public removeEffectFromObject(targetNode: Node, effectType?: VisualEffectType): void {\r\n        const objectId = targetNode.uuid;\r\n        const effectStack = this._effectStacks.get(objectId);\r\n        \r\n        if (!effectStack) return;\r\n\r\n        if (effectType) {\r\n            // 移除特定类型的特效\r\n            const index = effectStack.findIndex(layer => layer.effectType === effectType);\r\n            if (index !== -1) {\r\n                const layer = effectStack[index];\r\n                this.destroyEffectLayer(layer);\r\n                effectStack.splice(index, 1);\r\n            }\r\n        } else {\r\n            // 移除所有特效\r\n            effectStack.forEach(layer => this.destroyEffectLayer(layer));\r\n            effectStack.length = 0;\r\n        }\r\n\r\n        if (effectStack.length === 0) {\r\n            this._effectStacks.delete(objectId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建特效层\r\n     */\r\n    private createEffectLayer(effectNode: Node, targetNode: Node, effectType: VisualEffectType, duration: number, stackLevel: number): EffectStackLayer | null {\r\n        const config = this._effectConfigs.get(effectType);\r\n        if (!config) {\r\n            console.warn(`Effect config not found: ${effectType}`);\r\n            return null;\r\n        }\r\n\r\n        effectNode.active = true;\r\n        effectNode.parent = targetNode;\r\n        effectNode.setPosition(0, 0, 0);\r\n\r\n        // 根据配置类型创建特效\r\n        switch (config.type) {\r\n            case 'particle':\r\n                this.createParticleEffect(effectNode, config, stackLevel);\r\n                break;\r\n            case 'composite':\r\n                this.createCompositeEffect(effectNode, config, stackLevel);\r\n                break;\r\n            case 'shader':\r\n                this.createShaderEffect(effectNode, config, stackLevel);\r\n                break;\r\n            default:\r\n                console.warn(`Unknown effect type: ${config.type}`);\r\n                return null;\r\n        }\r\n\r\n        return {\r\n            effectType,\r\n            node: effectNode,\r\n            duration,\r\n            stackLevel,\r\n            blendMode: config.blend || 'normal',\r\n            priority: config.priority || 5,\r\n            isActive: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 创建粒子特效\r\n     */\r\n    private createParticleEffect(effectNode: Node, config: any, stackLevel: number): void {\r\n        const particle = effectNode.addComponent(ParticleSystem2D);\r\n        \r\n        // 基础粒子配置\r\n        particle.totalParticles = Math.floor(config.particleCount * stackLevel);\r\n        particle.duration = config.lifetime;\r\n        particle.emissionRate = config.emission * stackLevel;\r\n        \r\n        // 颜色配置\r\n        particle.startColor = config.startColor;\r\n        particle.endColor = config.endColor;\r\n        \r\n        // 大小配置\r\n        particle.startSize = config.startSize;\r\n        particle.endSize = config.endSize;\r\n        \r\n        // 运动配置\r\n        particle.speed = config.speed;\r\n        particle.speedVar = config.speed * 0.3;\r\n        \r\n        // 重力配置\r\n        if (config.gravity) {\r\n            particle.gravity = new Vec2(config.gravity.x, config.gravity.y);\r\n        }\r\n        \r\n        // 发射形状配置\r\n        switch (config.shape) {\r\n            case 'point':\r\n                particle.positionType = ParticleSystem2D.PositionType.FREE;\r\n                break;\r\n            case 'circle':\r\n                particle.positionType = ParticleSystem2D.PositionType.RELATIVE;\r\n                break;\r\n            case 'sphere':\r\n                particle.positionType = ParticleSystem2D.PositionType.GROUPED;\r\n                break;\r\n        }\r\n        \r\n        // 爆发模式\r\n        if (config.burst) {\r\n            particle.emissionRate = 0;\r\n            particle.totalParticles = config.particleCount * stackLevel;\r\n            this.scheduleOnce(() => {\r\n                particle.resetSystem();\r\n            }, 0.1);\r\n        }\r\n        \r\n        // 创建震荡波效果\r\n        if (config.shockwave) {\r\n            this.createShockwaveEffect(effectNode, stackLevel);\r\n        }\r\n        \r\n        particle.resetSystem();\r\n    }\r\n\r\n    /**\r\n     * 创建复合特效\r\n     */\r\n    private createCompositeEffect(effectNode: Node, config: any, stackLevel: number): void {\r\n        config.layers.forEach((layerConfig: any, index: number) => {\r\n            const layerNode = new Node(`Layer_${index}`);\r\n            effectNode.addChild(layerNode);\r\n            \r\n            switch (layerConfig.type) {\r\n                case 'particle':\r\n                    this.createParticleEffect(layerNode, layerConfig, stackLevel);\r\n                    break;\r\n                case 'glow':\r\n                    this.createGlowEffect(layerNode, layerConfig, stackLevel);\r\n                    break;\r\n                case 'distortion':\r\n                    this.createDistortionEffect(layerNode, layerConfig, stackLevel);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 创建发光效果\r\n     */\r\n    private createGlowEffect(effectNode: Node, config: any, stackLevel: number): void {\r\n        const sprite = effectNode.addComponent(Sprite);\r\n        const uiTransform = effectNode.addComponent(UITransform);\r\n        \r\n        // 创建发光贴图\r\n        const glowTexture = this.createGlowTexture(config.radius * stackLevel, config.color);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = glowTexture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        \r\n        uiTransform.setContentSize(config.radius * 2 * stackLevel, config.radius * 2 * stackLevel);\r\n        sprite.color = config.color;\r\n        \r\n        // 脉冲动画\r\n        if (config.pulsate) {\r\n            const originalScale = effectNode.scale.clone();\r\n            tween(effectNode)\r\n                .repeatForever(\r\n                    tween()\r\n                        .to(0.8, { scale: originalScale.multiplyScalar(1.2) })\r\n                        .to(0.8, { scale: originalScale })\r\n                )\r\n                .start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建震荡波效果\r\n     */\r\n    private createShockwaveEffect(effectNode: Node, stackLevel: number): void {\r\n        const shockwaveNode = new Node('Shockwave');\r\n        effectNode.addChild(shockwaveNode);\r\n        \r\n        const sprite = shockwaveNode.addComponent(Sprite);\r\n        const uiTransform = shockwaveNode.addComponent(UITransform);\r\n        \r\n        // 创建环形贴图\r\n        const ringTexture = this.createRingTexture(50 * stackLevel);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = ringTexture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        \r\n        uiTransform.setContentSize(20, 20);\r\n        sprite.color = new Color(255, 255, 255, 200);\r\n        \r\n        // 震荡波扩散动画\r\n        tween(shockwaveNode)\r\n            .parallel(\r\n                tween().to(0.5, { scale: new Vec3(5 * stackLevel, 5 * stackLevel, 1) }),\r\n                tween().to(0.5, { \r\n                    scale: new Vec3(5 * stackLevel, 5 * stackLevel, 1),\r\n                    color: new Color(255, 255, 255, 0)\r\n                })\r\n            )\r\n            .call(() => {\r\n                shockwaveNode.destroy();\r\n            })\r\n            .start();\r\n    }\r\n\r\n    /**\r\n     * 更新特效强度\r\n     */\r\n    private updateEffectIntensity(effectLayer: EffectStackLayer): void {\r\n        const particle = effectLayer.node.getComponent(ParticleSystem2D);\r\n        if (particle) {\r\n            const config = this._effectConfigs.get(effectLayer.effectType);\r\n            if (config) {\r\n                particle.totalParticles = Math.floor(config.particleCount * effectLayer.stackLevel);\r\n                particle.emissionRate = config.emission * effectLayer.stackLevel;\r\n                particle.resetSystem();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 工具方法\r\n     */\r\n    private getEffectNode(): Node | null {\r\n        for (const node of this._effectPool) {\r\n            if (!node.active) {\r\n                return node;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private returnEffectNode(node: Node): void {\r\n        node.active = false;\r\n        node.parent = this.node;\r\n        node.removeAllChildren();\r\n        // Remove all components except Transform and UITransform\r\n        const components = node.getComponents(Component);\r\n        components.forEach(component => {\r\n            if (component.constructor.name !== 'Transform' && component.constructor.name !== 'UITransform') {\r\n                component.destroy();\r\n            }\r\n        });\r\n    }\r\n\r\n    private destroyEffectLayer(layer: EffectStackLayer): void {\r\n        layer.isActive = false;\r\n        this.returnEffectNode(layer.node);\r\n    }\r\n\r\n    private getParticleCountByQuality(high: number, medium: number, low: number): number {\r\n        switch (this.effectQualityLevel) {\r\n            case 2: return high;\r\n            case 1: return medium;\r\n            case 0: return low;\r\n            default: return medium;\r\n        }\r\n    }\r\n\r\n    private createGlowTexture(radius: number, color: Color): Texture2D {\r\n        const size = radius * 2;\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = size;\r\n        canvas.height = size;\r\n        const ctx = canvas.getContext('2d')!;\r\n        \r\n        const gradient = ctx.createRadialGradient(radius, radius, 0, radius, radius, radius);\r\n        gradient.addColorStop(0, `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a / 255})`);\r\n        gradient.addColorStop(1, `rgba(${color.r}, ${color.g}, ${color.b}, 0)`);\r\n        \r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, size, size);\r\n        \r\n        const texture = new Texture2D();\r\n        // initWithElement is not available in Cocos Creator 3.x\r\n        // Using a workaround for texture creation\r\n        texture.reset({\r\n            width: canvas.width,\r\n            height: canvas.height,\r\n        });\r\n        return texture;\r\n    }\r\n\r\n    private createRingTexture(radius: number): Texture2D {\r\n        const size = radius * 2;\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = size;\r\n        canvas.height = size;\r\n        const ctx = canvas.getContext('2d')!;\r\n        \r\n        ctx.strokeStyle = 'white';\r\n        ctx.lineWidth = 3;\r\n        ctx.beginPath();\r\n        ctx.arc(radius, radius, radius - 2, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n        \r\n        const texture = new Texture2D();\r\n        // initWithElement is not available in Cocos Creator 3.x\r\n        // Using a workaround for texture creation\r\n        texture.reset({\r\n            width: canvas.width,\r\n            height: canvas.height,\r\n        });\r\n        return texture;\r\n    }\r\n\r\n    /**\r\n     * 特效管理方法\r\n     */\r\n    public clearAllEffects(): void {\r\n        this._effectStacks.forEach(stack => {\r\n            stack.forEach(layer => this.destroyEffectLayer(layer));\r\n        });\r\n        this._effectStacks.clear();\r\n    }\r\n\r\n    public setEffectQuality(level: number): void {\r\n        try {\r\n            const oldQuality = this.effectQualityLevel;\r\n            this.effectQualityLevel = Math.max(0, Math.min(2, Math.round(level || 0)));\r\n            \r\n            if (this.effectQualityLevel !== oldQuality) {\r\n                console.log(`Effect quality changed from ${oldQuality} to ${this.effectQualityLevel}`);\r\n                \r\n                // Update existing effects if needed\r\n                this.updateEffectsForQualityChange();\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Error setting effect quality:', error);\r\n            this.effectQualityLevel = 2; // Default to high quality\r\n        }\r\n    }\r\n\r\n    private updateEffectsForQualityChange(): void {\r\n        try {\r\n            // Update all active effects to match new quality level\r\n            this._effectStacks.forEach((stack) => {\r\n                stack.forEach(layer => {\r\n                    if (layer.isActive) {\r\n                        this.updateEffectIntensity(layer);\r\n                    }\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.warn('Error updating effects for quality change:', error);\r\n        }\r\n    }\r\n\r\n    public pauseAllEffects(): void {\r\n        this._effectStacks.forEach(stack => {\r\n            stack.forEach(layer => {\r\n                const particle = layer.node.getComponent(ParticleSystem2D);\r\n                if (particle && layer.isActive) {\r\n                    particle.stopSystem();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public resumeAllEffects(): void {\r\n        this._effectStacks.forEach(stack => {\r\n            stack.forEach(layer => {\r\n                const particle = layer.node.getComponent(ParticleSystem2D);\r\n                if (particle && layer.isActive) {\r\n                    particle.resetSystem();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 快捷方法\r\n     */\r\n    public addFireTrailToBall(ballNode: Node, duration: number = -1): string {\r\n        return this.addEffectToObject(ballNode, VisualEffectType.BALL_FIRE_TRAIL, duration);\r\n    }\r\n\r\n    public addIceAuraToBall(ballNode: Node, duration: number = -1): string {\r\n        return this.addEffectToObject(ballNode, VisualEffectType.BALL_ICE_AURA, duration);\r\n    }\r\n\r\n    public addElectricSparksToBall(ballNode: Node, duration: number = -1): string {\r\n        return this.addEffectToObject(ballNode, VisualEffectType.BALL_ELECTRIC_SPARK, duration);\r\n    }\r\n\r\n    public createBrickExplosion(brickNode: Node): void {\r\n        this.addEffectToObject(brickNode, VisualEffectType.BRICK_EXPLOSION, 1.0);\r\n    }\r\n\r\n    public addFireArmorToPaddle(paddleNode: Node, duration: number = -1): string {\r\n        return this.addEffectToObject(paddleNode, VisualEffectType.PADDLE_FIRE_ARMOR, duration);\r\n    }\r\n\r\n    public createShaderEffect(effectNode: Node, config: any, stackLevel: number): void {\r\n        // 着色器特效的实现留待后续扩展\r\n        console.log('Shader effects not implemented yet');\r\n    }\r\n\r\n    public createDistortionEffect(effectNode: Node, config: any, stackLevel: number): void {\r\n        // 扭曲特效的实现留待后续扩展\r\n        console.log('Distortion effects not implemented yet');\r\n    }\r\n}"]}