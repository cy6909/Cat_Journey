{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/gameplay/EnhancedBall.ts"],"names":["_decorator","Component","RigidBody2D","PhysicsMaterial","Collider2D","Contact2DType","Vec3","Color","Sprite","Vec2","Enum","GameManager","ccclass","property","BallType","EnhancedBall","type","_rigidBody","_collider","_sprite","_physicsMaterial","_currentSpeed","_targetSpeed","_speedMultiplier","_speedMultiplierTimer","_isElectric","_isPoisonous","_isPhasing","_remainingPenetrations","_effectTimer","_originalColor","_trailNodes","_particleTimer","onLoad","getComponent","color","clone","initializeBallType","setupPhysics","setupCollisionHandling","initialSpeed","start","launch","update","dt","maintainSpeed","updateEffects","updateVisualEffects","updateTimers","ballType","NORMAL","setBallColor","WHITE","HEAVY","damage","weight","SOFT","bounciness","FIRE","effectDuration","ICE","ELECTRIC","POISON","EXPLOSIVE","PIERCING","penetrationCount","SPLITTING","PHASE","PLASMA","QUANTUM","CHAOS","randomizeBallProperties","getRandomColor","friction","restitution","gravityScale","on","BEGIN_CONTACT","onBeginContact","selfCollider","otherCollider","contact","Math","random","console","log","showPhaseEffect","applyCollisionEffects","tag","onHitTarget","position","node","getWorldPosition","applyFireEffect","applyIceEffect","applyElectricEffect","applyPoisonEffect","applyExplosiveEffect","applySplittingEffect","HEALING","applyHealingEffect","CURSED","applyCursedEffect","applyRandomEffect","collider","nearbyObjects","findObjectsInRadius","areaRadius","obj","brick","takeDamage","scheduleFireDamage","ball","setSpeedMultiplier","createLightningEffect","schedulePoisonDamage","distance","max","floor","createExplosionEffect","gameManager","getInstance","createSplitBall","i","paddle","parent","getComponentInChildren","instantRepair","effects","effect","length","applyCurse","randomEffect","angle","PI","direction","cos","sin","velocity","multiplyScalar","linearVelocity","currentVelocity","currentSpeed","abs","normalizedVelocity","normalize","newVelocity","updateQuantumEffect","updatePlasmaEffect","createTrailEffect","updateGlowEffect","center","radius","allObjects","children","nearby","push","multiplier","duration","getSpeed","rigidBody","changeBallType","newType","target","ticks","interval","scheduleOnce","from","to"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, RigidBody2D, PhysicsMaterial, Collider2D, Contact2DType, IPhysics2DContact, Vec3, Color, Sprite, tween, Vec2, Enum } from 'cc';\r\nimport { GameManager } from './GameManager';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum BallType {\r\n    NORMAL = 0,\r\n    HEAVY = 1,           // 超重球，伤害高但速度慢\r\n    SOFT = 2,            // 超软球，特殊反弹效果\r\n    FIRE = 3,            // 火焰球，持续伤害\r\n    ICE = 4,             // 冰冻球，减速效果\r\n    ELECTRIC = 5,        // 电击球，连锁伤害\r\n    POISON = 6,          // 毒性球，毒素扩散\r\n    EXPLOSIVE = 7,       // 爆炸球，爆炸伤害\r\n    PIERCING = 8,        // 穿透球，穿透砖块\r\n    SPLITTING = 9,       // 分裂球，击中后分裂\r\n    MAGNETIC = 10,       // 磁性球，改变轨迹\r\n    PHASE = 11,          // 相位球，随机穿透\r\n    GRAVITY = 12,        // 重力球，影响重力\r\n    TIME = 13,           // 时间球，减慢时间\r\n    HEALING = 14,        // 治疗球，修复挡板\r\n    CURSED = 15,         // 诅咒球，负面效果\r\n    LIGHT = 16,          // 光明球，照亮区域\r\n    DARK = 17,           // 黑暗球，减少视野\r\n    CRYSTAL = 18,        // 水晶球，连锁反应\r\n    RUBBER = 19,         // 橡胶球，超强反弹\r\n    METAL = 20,          // 金属球，坚硬不变形\r\n    VOID = 21,           // 虚空球，吞噬效果\r\n    PLASMA = 22,         // 等离子球，高能量\r\n    QUANTUM = 23,        // 量子球，叠加态\r\n    CHAOS = 24           // 混沌球，随机效果\r\n}\r\n\r\n@ccclass('EnhancedBall')\r\nexport class EnhancedBall extends Component {\r\n    @property({type: Enum(BallType)})\r\n    public ballType: BallType = BallType.NORMAL;\r\n    \r\n    @property\r\n    public initialSpeed: number = 300;\r\n    \r\n    @property\r\n    public damage: number = 1;\r\n    \r\n    @property\r\n    public weight: number = 1.0; // 影响物理行为\r\n    \r\n    @property\r\n    public bounciness: number = 1.0; // 反弹系数\r\n    \r\n    @property\r\n    public penetrationCount: number = 0; // 穿透次数\r\n    \r\n    @property\r\n    public effectDuration: number = 5.0; // 效果持续时间\r\n    \r\n    @property\r\n    public areaRadius: number = 50; // 范围效果半径\r\n    \r\n    private _rigidBody: RigidBody2D | null = null;\r\n    private _collider: Collider2D | null = null;\r\n    private _sprite: Sprite | null = null;\r\n    private _physicsMaterial: PhysicsMaterial | null = null;\r\n    \r\n    // Ball state\r\n    private _currentSpeed: number = 0;\r\n    private _targetSpeed: number = 0;\r\n    private _speedMultiplier: number = 1.0;\r\n    private _speedMultiplierTimer: number = 0;\r\n    private _isElectric: boolean = false;\r\n    private _isPoisonous: boolean = false;\r\n    private _isPhasing: boolean = false;\r\n    private _remainingPenetrations: number = 0;\r\n    private _effectTimer: number = 0;\r\n    \r\n    // Visual effects\r\n    private _originalColor: Color = new Color();\r\n    private _trailNodes: Node[] = [];\r\n    private _particleTimer: number = 0;\r\n    \r\n    protected onLoad(): void {\r\n        this._rigidBody = this.getComponent(RigidBody2D);\r\n        this._collider = this.getComponent(Collider2D);\r\n        this._sprite = this.getComponent(Sprite);\r\n        \r\n        if (this._sprite) {\r\n            this._originalColor = this._sprite.color.clone();\r\n        }\r\n        \r\n        this.initializeBallType();\r\n        this.setupPhysics();\r\n        this.setupCollisionHandling();\r\n        \r\n        this._targetSpeed = this.initialSpeed;\r\n        this._currentSpeed = this.initialSpeed;\r\n    }\r\n    \r\n    protected start(): void {\r\n        this.launch();\r\n    }\r\n    \r\n    protected update(dt: number): void {\r\n        this.maintainSpeed();\r\n        this.updateEffects(dt);\r\n        this.updateVisualEffects(dt);\r\n        this.updateTimers(dt);\r\n    }\r\n    \r\n    private initializeBallType(): void {\r\n        switch (this.ballType) {\r\n            case BallType.NORMAL:\r\n                this.setBallColor(Color.WHITE);\r\n                break;\r\n                \r\n            case BallType.HEAVY:\r\n                this.damage = 3;\r\n                this.weight = 2.5;\r\n                this.initialSpeed = 200; // Slower but powerful\r\n                this.setBallColor(new Color(128, 128, 128)); // Dark gray\r\n                break;\r\n                \r\n            case BallType.SOFT:\r\n                this.damage = 1;\r\n                this.weight = 0.5;\r\n                this.bounciness = 1.5; // Extra bouncy\r\n                this.setBallColor(new Color(255, 192, 203)); // Pink\r\n                break;\r\n                \r\n            case BallType.FIRE:\r\n                this.damage = 2;\r\n                this.setBallColor(new Color(255, 100, 0)); // Orange-red\r\n                this._effectTimer = this.effectDuration;\r\n                break;\r\n                \r\n            case BallType.ICE:\r\n                this.damage = 1;\r\n                this.setBallColor(new Color(173, 216, 230)); // Light blue\r\n                break;\r\n                \r\n            case BallType.ELECTRIC:\r\n                this.damage = 1;\r\n                this._isElectric = true;\r\n                this.setBallColor(new Color(255, 255, 0)); // Yellow\r\n                break;\r\n                \r\n            case BallType.POISON:\r\n                this.damage = 1;\r\n                this._isPoisonous = true;\r\n                this.setBallColor(new Color(128, 0, 128)); // Purple\r\n                break;\r\n                \r\n            case BallType.EXPLOSIVE:\r\n                this.damage = 2;\r\n                this.setBallColor(new Color(255, 0, 0)); // Red\r\n                break;\r\n                \r\n            case BallType.PIERCING:\r\n                this.damage = 1;\r\n                this.penetrationCount = 3;\r\n                this._remainingPenetrations = 3;\r\n                this.setBallColor(new Color(0, 255, 255)); // Cyan\r\n                break;\r\n                \r\n            case BallType.SPLITTING:\r\n                this.damage = 1;\r\n                this.setBallColor(new Color(255, 255, 255)); // White with sparkles\r\n                break;\r\n                \r\n            case BallType.PHASE:\r\n                this.damage = 1;\r\n                this._isPhasing = true;\r\n                this.setBallColor(new Color(128, 128, 255, 150)); // Semi-transparent blue\r\n                break;\r\n                \r\n            case BallType.PLASMA:\r\n                this.damage = 4;\r\n                this.initialSpeed = 400;\r\n                this.setBallColor(new Color(255, 0, 255)); // Magenta\r\n                break;\r\n                \r\n            case BallType.QUANTUM:\r\n                this.damage = 2;\r\n                this.setBallColor(new Color(128, 255, 128)); // Light green\r\n                break;\r\n                \r\n            case BallType.CHAOS:\r\n                this.randomizeBallProperties();\r\n                this.setBallColor(this.getRandomColor());\r\n                break;\r\n        }\r\n    }\r\n    \r\n    private setBallColor(color: Color): void {\r\n        if (this._sprite) {\r\n            this._sprite.color = color;\r\n        }\r\n    }\r\n    \r\n    private setupPhysics(): void {\r\n        if (!this._rigidBody || !this._collider) return;\r\n        \r\n        // Create physics material based on ball type\r\n        this._physicsMaterial = new PhysicsMaterial();\r\n        this._physicsMaterial.friction = 0.0;\r\n        this._physicsMaterial.restitution = this.bounciness;\r\n        \r\n        // Apply weight scaling\r\n        this._rigidBody.gravityScale = this.weight;\r\n        \r\n        // Apply physics material (Cocos Creator handles this automatically)\r\n    }\r\n    \r\n    private setupCollisionHandling(): void {\r\n        if (!this._collider) return;\r\n        \r\n        this._collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n    }\r\n    \r\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null): void {\r\n        // Handle phase balls\r\n        if (this._isPhasing && Math.random() < 0.3) {\r\n            console.log('Ball phased through object');\r\n            this.showPhaseEffect();\r\n            return;\r\n        }\r\n        \r\n        // Apply ball-specific collision effects\r\n        this.applyCollisionEffects(otherCollider);\r\n        \r\n        // Handle penetration\r\n        if (this._remainingPenetrations > 0 && otherCollider.tag === 2000) { // Brick tag\r\n            this._remainingPenetrations--;\r\n            console.log(`Ball penetrated! Remaining: ${this._remainingPenetrations}`);\r\n            return; // Don't reflect, continue through\r\n        }\r\n        \r\n        // Standard collision response\r\n        this.onHitTarget(otherCollider);\r\n    }\r\n    \r\n    private applyCollisionEffects(otherCollider: Collider2D): void {\r\n        const position = otherCollider.node.getWorldPosition();\r\n        \r\n        switch (this.ballType) {\r\n            case BallType.FIRE:\r\n                this.applyFireEffect(otherCollider, position);\r\n                break;\r\n                \r\n            case BallType.ICE:\r\n                this.applyIceEffect(otherCollider, position);\r\n                break;\r\n                \r\n            case BallType.ELECTRIC:\r\n                this.applyElectricEffect(otherCollider, position);\r\n                break;\r\n                \r\n            case BallType.POISON:\r\n                this.applyPoisonEffect(otherCollider, position);\r\n                break;\r\n                \r\n            case BallType.EXPLOSIVE:\r\n                this.applyExplosiveEffect(position);\r\n                break;\r\n                \r\n            case BallType.SPLITTING:\r\n                this.applySplittingEffect();\r\n                break;\r\n                \r\n            case BallType.HEALING:\r\n                this.applyHealingEffect();\r\n                break;\r\n                \r\n            case BallType.CURSED:\r\n                this.applyCursedEffect();\r\n                break;\r\n                \r\n            case BallType.CHAOS:\r\n                this.applyRandomEffect(otherCollider, position);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    private applyFireEffect(collider: Collider2D, position: Vec3): void {\r\n        // Apply fire damage over time to nearby objects\r\n        const nearbyObjects = this.findObjectsInRadius(position, this.areaRadius);\r\n        for (const obj of nearbyObjects) {\r\n            const brick = obj.getComponent('EnhancedBrick') as any;\r\n            if (brick && brick.takeDamage) {\r\n                // Schedule fire damage over time\r\n                this.scheduleFireDamage(brick, 3, 0.5); // 3 ticks, every 0.5s\r\n            }\r\n        }\r\n        console.log('Fire effect applied');\r\n    }\r\n    \r\n    private applyIceEffect(collider: Collider2D, position: Vec3): void {\r\n        // Slow down nearby balls and freeze bricks temporarily\r\n        const nearbyObjects = this.findObjectsInRadius(position, this.areaRadius);\r\n        for (const obj of nearbyObjects) {\r\n            const ball = obj.getComponent('EnhancedBall') as any;\r\n            if (ball && ball !== this && ball.setSpeedMultiplier) {\r\n                ball.setSpeedMultiplier(0.5, 3.0);\r\n            }\r\n        }\r\n        console.log('Ice effect applied');\r\n    }\r\n    \r\n    private applyElectricEffect(collider: Collider2D, position: Vec3): void {\r\n        // Chain lightning to nearby objects\r\n        const nearbyObjects = this.findObjectsInRadius(position, this.areaRadius * 1.5);\r\n        for (const obj of nearbyObjects) {\r\n            const brick = obj.getComponent('EnhancedBrick') as any;\r\n            if (brick && brick.takeDamage) {\r\n                brick.takeDamage(1);\r\n                this.createLightningEffect(position, obj.getWorldPosition());\r\n            }\r\n        }\r\n        console.log('Electric chain applied');\r\n    }\r\n    \r\n    private applyPoisonEffect(collider: Collider2D, position: Vec3): void {\r\n        // Spread poison to nearby bricks\r\n        const nearbyObjects = this.findObjectsInRadius(position, this.areaRadius);\r\n        for (const obj of nearbyObjects) {\r\n            const brick = obj.getComponent('EnhancedBrick');\r\n            if (brick) {\r\n                this.schedulePoisonDamage(brick, 5, 1.0); // 5 ticks, every 1s\r\n            }\r\n        }\r\n        console.log('Poison spread');\r\n    }\r\n    \r\n    private applyExplosiveEffect(position: Vec3): void {\r\n        // Create explosion damage\r\n        const nearbyObjects = this.findObjectsInRadius(position, this.areaRadius * 2);\r\n        for (const obj of nearbyObjects) {\r\n            const distance = Vec3.distance(position, obj.getWorldPosition());\r\n            const damage = Math.max(1, Math.floor(this.damage * 2 * (1 - distance / (this.areaRadius * 2))));\r\n            \r\n            const brick = obj.getComponent('EnhancedBrick') as any;\r\n            if (brick && brick.takeDamage) {\r\n                brick.takeDamage(damage);\r\n            }\r\n        }\r\n        this.createExplosionEffect(position);\r\n        console.log('Explosion triggered');\r\n    }\r\n    \r\n    private applySplittingEffect(): void {\r\n        // Create multiple smaller balls\r\n        const gameManager = GameManager.getInstance();\r\n        if (gameManager && (gameManager as any).createSplitBall) {\r\n            for (let i = 0; i < 3; i++) {\r\n                (gameManager as any).createSplitBall(this.node.getWorldPosition(), this.ballType);\r\n            }\r\n        }\r\n        console.log('Ball split into multiple balls');\r\n    }\r\n    \r\n    private applyHealingEffect(): void {\r\n        // Heal the paddle\r\n        const paddle = this.node.parent?.getComponentInChildren('EnhancedPaddleController') as any;\r\n        if (paddle && paddle.instantRepair) {\r\n            paddle.instantRepair(15);\r\n            console.log('Paddle healed by healing ball');\r\n        }\r\n    }\r\n    \r\n    private applyCursedEffect(): void {\r\n        // Apply random negative effect\r\n        const effects = ['slow_paddle', 'damage_paddle', 'reverse_controls', 'reduce_score'];\r\n        const effect = effects[Math.floor(Math.random() * effects.length)];\r\n        \r\n        const gameManager = GameManager.getInstance();\r\n        if (gameManager && (gameManager as any).applyCurse) {\r\n            (gameManager as any).applyCurse(effect, 10.0); // 10 second curse\r\n        }\r\n        console.log(`Curse applied: ${effect}`);\r\n    }\r\n    \r\n    private applyRandomEffect(collider: Collider2D, position: Vec3): void {\r\n        // Randomly apply one of many effects\r\n        const effects = [\r\n            () => this.applyFireEffect(collider, position),\r\n            () => this.applyIceEffect(collider, position),\r\n            () => this.applyElectricEffect(collider, position),\r\n            () => this.applyExplosiveEffect(position),\r\n            () => this.applySplittingEffect(),\r\n            () => this.applyHealingEffect()\r\n        ];\r\n        \r\n        const randomEffect = effects[Math.floor(Math.random() * effects.length)];\r\n        randomEffect();\r\n        \r\n        // Change color to indicate new effect\r\n        this.setBallColor(this.getRandomColor());\r\n    }\r\n    \r\n    private launch(): void {\r\n        if (!this._rigidBody) return;\r\n        \r\n        const angle = Math.PI / 4; // 45 degrees\r\n        const direction = new Vec2(Math.cos(angle), Math.sin(angle));\r\n        const velocity = Vec2.multiplyScalar(new Vec2(), direction, this.initialSpeed);\r\n        \r\n        this._rigidBody.linearVelocity = velocity;\r\n    }\r\n    \r\n    private maintainSpeed(): void {\r\n        if (!this._rigidBody) return;\r\n        \r\n        const currentVelocity = this._rigidBody.linearVelocity;\r\n        const currentSpeed = currentVelocity.length();\r\n        \r\n        if (Math.abs(currentSpeed - (this._targetSpeed * this._speedMultiplier)) > 5) {\r\n            const normalizedVelocity = currentVelocity.normalize();\r\n            const newVelocity = Vec2.multiplyScalar(new Vec2(), normalizedVelocity, this._targetSpeed * this._speedMultiplier);\r\n            this._rigidBody.linearVelocity = newVelocity;\r\n        }\r\n    }\r\n    \r\n    private updateEffects(dt: number): void {\r\n        if (this._effectTimer > 0) {\r\n            this._effectTimer -= dt;\r\n        }\r\n        \r\n        // Update type-specific continuous effects\r\n        switch (this.ballType) {\r\n            case BallType.QUANTUM:\r\n                this.updateQuantumEffect(dt);\r\n                break;\r\n            case BallType.PLASMA:\r\n                this.updatePlasmaEffect(dt);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    private updateVisualEffects(dt: number): void {\r\n        this._particleTimer += dt;\r\n        \r\n        // Create trail effects for special balls\r\n        if (this._particleTimer >= 0.1) {\r\n            this.createTrailEffect();\r\n            this._particleTimer = 0;\r\n        }\r\n        \r\n        // Update visual states\r\n        this.updateGlowEffect(dt);\r\n    }\r\n    \r\n    private updateTimers(dt: number): void {\r\n        if (this._speedMultiplierTimer > 0) {\r\n            this._speedMultiplierTimer -= dt;\r\n            if (this._speedMultiplierTimer <= 0) {\r\n                this._speedMultiplier = 1.0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Utility methods\r\n    private findObjectsInRadius(center: Vec3, radius: number): Node[] {\r\n        const allObjects = this.node.parent?.children || [];\r\n        const nearby: Node[] = [];\r\n        \r\n        for (const obj of allObjects) {\r\n            const distance = Vec3.distance(center, obj.getWorldPosition());\r\n            if (distance <= radius && obj !== this.node) {\r\n                nearby.push(obj);\r\n            }\r\n        }\r\n        \r\n        return nearby;\r\n    }\r\n    \r\n    private randomizeBallProperties(): void {\r\n        this.damage = Math.floor(Math.random() * 3) + 1;\r\n        this.weight = Math.random() * 2 + 0.5;\r\n        this.bounciness = Math.random() * 0.5 + 0.75;\r\n        this.initialSpeed = Math.random() * 200 + 200;\r\n    }\r\n    \r\n    private getRandomColor(): Color {\r\n        return new Color(\r\n            Math.floor(Math.random() * 255),\r\n            Math.floor(Math.random() * 255),\r\n            Math.floor(Math.random() * 255),\r\n            255\r\n        );\r\n    }\r\n    \r\n    // Public methods\r\n    public setSpeedMultiplier(multiplier: number, duration: number): void {\r\n        this._speedMultiplier = multiplier;\r\n        this._speedMultiplierTimer = duration;\r\n    }\r\n    \r\n    public getSpeed(): number {\r\n        return this._rigidBody?.linearVelocity.length() || 0;\r\n    }\r\n    \r\n    public get rigidBody(): RigidBody2D | null {\r\n        return this._rigidBody;\r\n    }\r\n    \r\n    public changeBallType(newType: BallType): void {\r\n        this.ballType = newType;\r\n        this.initializeBallType();\r\n        this.setupPhysics();\r\n    }\r\n    \r\n    // Effect scheduling methods\r\n    private scheduleFireDamage(target: any, ticks: number, interval: number): void {\r\n        if (ticks <= 0) return;\r\n        \r\n        this.scheduleOnce(() => {\r\n            if (target && target.takeDamage) {\r\n                target.takeDamage(1);\r\n                this.scheduleFireDamage(target, ticks - 1, interval);\r\n            }\r\n        }, interval);\r\n    }\r\n    \r\n    private schedulePoisonDamage(target: any, ticks: number, interval: number): void {\r\n        if (ticks <= 0) return;\r\n        \r\n        this.scheduleOnce(() => {\r\n            if (target && target.takeDamage) {\r\n                target.takeDamage(1);\r\n                this.schedulePoisonDamage(target, ticks - 1, interval);\r\n            }\r\n        }, interval);\r\n    }\r\n    \r\n    // Visual effect methods  \r\n    private createTrailEffect(): void { console.log('Trail effect created'); }\r\n    private updateGlowEffect(dt: number): void { /* Implement glow effect */ }\r\n    private createExplosionEffect(position: Vec3): void { console.log('Explosion visual effect'); }\r\n    private createLightningEffect(from: Vec3, to: Vec3): void { console.log('Lightning effect'); }\r\n    private showPhaseEffect(): void { console.log('Phase visual effect'); }\r\n    private updateQuantumEffect(dt: number): void { console.log('Quantum effect update'); }\r\n    private updatePlasmaEffect(dt: number): void { console.log('Plasma effect update'); }\r\n    private onHitTarget(collider: Collider2D): void { console.log('Ball hit target'); }\r\n}"]}