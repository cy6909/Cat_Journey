{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/BackgroundDiagnostic.ts"],"names":["_decorator","Component","Sprite","SpriteFrame","Texture2D","Color","UITransform","view","Canvas","ccclass","property","BackgroundDiagnostic","onLoad","console","log","diagnoseEnvironment","diagnoseNode","createVisibleBackground","scheduleOnce","finalDiagnosis","currentNode","node","canvas","getComponent","parent","name","canvasTransform","width","height","renderMode","priority","error","designSize","getDesignResolutionSize","screenSize","getVisibleSize","active","children","length","position","x","y","z","scale","getSiblingIndex","components","forEach","comp","index","constructor","transform","anchorX","anchorY","sprites","getComponents","sprite","spriteFrame","color","r","g","b","a","addComponent","setContentSize","setAnchorPoint","existingSprites","destroy","texture","reset","format","PixelFormat","RGBA8888","data","Uint8Array","i","testColor","uploadData","WHITE","type","Type","SIMPLE","sizeMode","SizeMode","CUSTOM","markForUpdateRenderData","setSiblingIndex"],"mappings":"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","sourcesContent":["import { _decorator, Component, Sprite, SpriteFrame, Texture2D, Color, UITransform, view, Canvas, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BackgroundDiagnostic')\r\nexport class BackgroundDiagnostic extends Component {\r\n    @property\r\n    public testColor: Color = new Color(255, 0, 255, 255); // 洋红色，非常显眼\r\n\r\n    protected onLoad(): void {\r\n        console.log('=== BackgroundDiagnostic: 开始全面诊断 ===');\r\n        this.diagnoseEnvironment();\r\n        this.diagnoseNode();\r\n        this.createVisibleBackground();\r\n        this.scheduleOnce(() => {\r\n            this.finalDiagnosis();\r\n        }, 0.5);\r\n    }\r\n\r\n    private diagnoseEnvironment(): void {\r\n        console.log('--- 环境诊断 ---');\r\n        \r\n        // 1. 检查Canvas设置 - 遍历父节点查找Canvas\r\n        let currentNode = this.node;\r\n        let canvas: Canvas | null = null;\r\n        \r\n        while (currentNode && !canvas) {\r\n            canvas = currentNode.getComponent(Canvas);\r\n            if (!canvas) {\r\n                currentNode = currentNode.parent;\r\n            }\r\n        }\r\n        \r\n        if (canvas) {\r\n            console.log(`Canvas found: ${canvas.node.name}`);\r\n            const canvasTransform = canvas.getComponent(UITransform);\r\n            if (canvasTransform) {\r\n                console.log(`Canvas size: ${canvasTransform.width}x${canvasTransform.height}`);\r\n            }\r\n            console.log(`Canvas renderMode: ${canvas.renderMode}`);\r\n            console.log(`Canvas priority: ${canvas.priority}`);\r\n        } else {\r\n            console.error('❌ Canvas not found in parent nodes!');\r\n        }\r\n\r\n        // 2. 检查屏幕信息\r\n        const designSize = view.getDesignResolutionSize();\r\n        const screenSize = view.getVisibleSize();\r\n        console.log(`Design resolution: ${designSize.width}x${designSize.height}`);\r\n        console.log(`Screen size: ${screenSize.width}x${screenSize.height}`);\r\n    }\r\n\r\n    private diagnoseNode(): void {\r\n        console.log('--- 节点诊断 ---');\r\n        \r\n        // 1. 检查节点层级\r\n        console.log(`Node name: ${this.node.name}`);\r\n        console.log(`Node active: ${this.node.active}`);\r\n        console.log(`Node parent: ${this.node.parent ? this.node.parent.name : 'none'}`);\r\n        console.log(`Node children count: ${this.node.children.length}`);\r\n        console.log(`Node position: (${this.node.position.x}, ${this.node.position.y}, ${this.node.position.z})`);\r\n        console.log(`Node scale: (${this.node.scale.x}, ${this.node.scale.y}, ${this.node.scale.z})`);\r\n        console.log(`Node siblingIndex: ${this.node.getSiblingIndex()}`);\r\n\r\n        // 2. 检查现有组件\r\n        const components = this.node.components;\r\n        console.log(`Total components: ${components.length}`);\r\n        components.forEach((comp, index) => {\r\n            console.log(`Component ${index}: ${comp.constructor.name}`);\r\n        });\r\n\r\n        // 3. 检查UITransform\r\n        const transform = this.node.getComponent(UITransform);\r\n        if (transform) {\r\n            console.log(`UITransform size: ${transform.width}x${transform.height}`);\r\n            console.log(`UITransform anchor: (${transform.anchorX}, ${transform.anchorY})`);\r\n        } else {\r\n            console.error('❌ UITransform not found!');\r\n        }\r\n\r\n        // 4. 检查现有的Sprite组件\r\n        const sprites = this.node.getComponents(Sprite);\r\n        console.log(`Existing Sprite components: ${sprites.length}`);\r\n        sprites.forEach((sprite, index) => {\r\n            console.log(`Sprite ${index}: spriteFrame=${sprite.spriteFrame ? 'exists' : 'null'}, color=(${sprite.color.r},${sprite.color.g},${sprite.color.b},${sprite.color.a})`);\r\n        });\r\n    }\r\n\r\n    private createVisibleBackground(): void {\r\n        console.log('--- 创建可见背景 ---');\r\n\r\n        // 1. 强制设置节点尺寸\r\n        let transform = this.node.getComponent(UITransform);\r\n        if (!transform) {\r\n            transform = this.node.addComponent(UITransform);\r\n            console.log('Added UITransform component');\r\n        }\r\n\r\n        // 设置为固定的大尺寸，忽略其他设置\r\n        transform.setContentSize(960, 640);\r\n        transform.setAnchorPoint(0.5, 0.5);\r\n        console.log(`Set UITransform to: ${transform.width}x${transform.height}`);\r\n\r\n        // 2. 移除所有现有的Sprite\r\n        const existingSprites = this.node.getComponents(Sprite);\r\n        console.log(`Removing ${existingSprites.length} existing sprites`);\r\n        existingSprites.forEach(sprite => sprite.destroy());\r\n\r\n        // 3. 创建简单的4x4像素纹理（避免大纹理问题）\r\n        const texture = new Texture2D();\r\n        texture.reset({\r\n            width: 4,\r\n            height: 4,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        // 创建4x4红色像素\r\n        const data = new Uint8Array(4 * 4 * 4);\r\n        for (let i = 0; i < data.length; i += 4) {\r\n            data[i] = this.testColor.r;         // R\r\n            data[i + 1] = this.testColor.g;     // G\r\n            data[i + 2] = this.testColor.b;     // B\r\n            data[i + 3] = this.testColor.a;     // A\r\n        }\r\n        texture.uploadData(data);\r\n        console.log('Created 4x4 red texture');\r\n\r\n        // 4. 创建SpriteFrame并设置到Sprite\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = texture;\r\n        console.log('Created SpriteFrame');\r\n\r\n        // 5. 添加Sprite组件\r\n        const sprite = this.node.addComponent(Sprite);\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.color = Color.WHITE; // 确保没有颜色调制\r\n        sprite.type = Sprite.Type.SIMPLE;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM; // 自定义尺寸模式\r\n        console.log('Added and configured Sprite component');\r\n\r\n        // 6. 强制更新渲染\r\n        sprite.markForUpdateRenderData();\r\n        console.log('Marked sprite for render update');\r\n\r\n        // 7. 移到最前层\r\n        this.node.setSiblingIndex(-1); // 移到最后（最前层）\r\n        console.log(`Node moved to siblingIndex: ${this.node.getSiblingIndex()}`);\r\n    }\r\n\r\n    private finalDiagnosis(): void {\r\n        console.log('--- 最终诊断 ---');\r\n        \r\n        const transform = this.node.getComponent(UITransform);\r\n        const sprite = this.node.getComponent(Sprite);\r\n        \r\n        if (transform) {\r\n            console.log(`Final UITransform size: ${transform.width}x${transform.height}`);\r\n        }\r\n        \r\n        if (sprite) {\r\n            console.log(`Final Sprite: spriteFrame=${sprite.spriteFrame ? 'exists' : 'null'}`);\r\n            console.log(`Final Sprite color: (${sprite.color.r},${sprite.color.g},${sprite.color.b},${sprite.color.a})`);\r\n            console.log(`Final Sprite type: ${sprite.type}`);\r\n            console.log(`Final Sprite sizeMode: ${sprite.sizeMode}`);\r\n        }\r\n\r\n        console.log(`Final node active: ${this.node.active}`);\r\n        console.log(`Final node position: (${this.node.position.x}, ${this.node.position.y})`);\r\n        console.log(`Final node scale: (${this.node.scale.x}, ${this.node.scale.y})`);\r\n        console.log(`Final siblingIndex: ${this.node.getSiblingIndex()}`);\r\n        \r\n        console.log('=== 诊断完成 ===');\r\n        console.log('如果还是看不到红色背景，问题可能在于：');\r\n        console.log('1. 节点被其他UI遮挡');\r\n        console.log('2. Canvas或Camera配置问题');\r\n        console.log('3. 节点不在可视区域内');\r\n    }\r\n}"]}