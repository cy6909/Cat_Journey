{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/core/Brick.ts"],"names":["_decorator","Component","Collider2D","Contact2DType","Sprite","Color","Vec3","GameManager","RelicManager","RelicType","ccclass","property","Brick","_sprite","_originalColor","onLoad","getComponent","color","clone","collider","on","BEGIN_CONTACT","onBeginContact","onDestroy","off","selfCollider","otherCollider","contact","node","name","takeDamage","damage","health","updateVisual","destroyBrick","healthRatio","maxHealth","newColor","a","Math","max","gameManager","getInstance","onBrickDestroyed","scoreValue","position","dropsExperience","relicManager","hasRelic","EXPLOSIVE_BRICKS","explodeBrick","destroy","brickContainer","explosionRadius","brickPosition","bricks","children","brick","distance","brickScript","console","log","setHealth","setDropsExperience","drops"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Collider2D, IPhysics2DContact, Contact2DType, RigidBody2D, Sprite, Color, Vec3 } from 'cc';\r\nimport { GameManager } from '../gameplay/GameManager';\r\nimport { RelicManager, RelicType } from '../managers/RelicManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Brick')\r\nexport class Brick extends Component {\r\n    @property\r\n    public health: number = 1;\r\n\r\n    @property\r\n    public maxHealth: number = 1;\r\n\r\n    @property\r\n    public scoreValue: number = 10;\r\n    \r\n    @property\r\n    public dropsExperience: boolean = false;\r\n\r\n    private _sprite: Sprite | null = null;\r\n    private _originalColor: Color = new Color();\r\n\r\n    protected onLoad(): void {\r\n        this._sprite = this.getComponent(Sprite);\r\n        if (this._sprite) {\r\n            this._originalColor = this._sprite.color.clone();\r\n        }\r\n\r\n        const collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n        }\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        const collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.off(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n        }\r\n    }\r\n\r\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null): void {\r\n        if (otherCollider.node.name === 'Ball' || otherCollider.getComponent('Ball')) {\r\n            this.takeDamage(1);\r\n        }\r\n    }\r\n\r\n    public takeDamage(damage: number): void {\r\n        this.health -= damage;\r\n        this.updateVisual();\r\n\r\n        if (this.health <= 0) {\r\n            this.destroyBrick();\r\n        }\r\n    }\r\n\r\n    private updateVisual(): void {\r\n        if (!this._sprite) return;\r\n\r\n        const healthRatio = this.health / this.maxHealth;\r\n        const newColor = this._originalColor.clone();\r\n        newColor.a = Math.max(0.3, healthRatio) * 255;\r\n        this._sprite.color = newColor;\r\n    }\r\n\r\n    private destroyBrick(): void {\r\n        const gameManager = GameManager.getInstance();\r\n        if (gameManager) {\r\n            gameManager.onBrickDestroyed(this.scoreValue, this.node.position.clone(), this.dropsExperience);\r\n        }\r\n\r\n        const relicManager = RelicManager.getInstance();\r\n        if (relicManager && relicManager.hasRelic(RelicType.EXPLOSIVE_BRICKS)) {\r\n            this.explodeBrick();\r\n        }\r\n        \r\n        this.node.destroy();\r\n    }\r\n\r\n    private explodeBrick(): void {\r\n        const gameManager = GameManager.getInstance();\r\n        if (!gameManager || !gameManager.brickContainer) return;\r\n\r\n        const explosionRadius = 100;\r\n        const brickPosition = this.node.position;\r\n        const bricks = gameManager.brickContainer.children;\r\n\r\n        for (const brick of bricks) {\r\n            if (brick === this.node) continue;\r\n\r\n            const distance = Vec3.distance(brickPosition, brick.position);\r\n            if (distance <= explosionRadius) {\r\n                const brickScript = brick.getComponent('Brick');\r\n                if (brickScript) {\r\n                    (brickScript as any).takeDamage(1);\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(`Explosive brick detonated! Damaged bricks within ${explosionRadius} units.`);\r\n    }\r\n\r\n    public setHealth(health: number): void {\r\n        this.health = health;\r\n        this.maxHealth = health;\r\n        this.updateVisual();\r\n    }\r\n    \r\n    public setDropsExperience(drops: boolean): void {\r\n        this.dropsExperience = drops;\r\n    }\r\n}"]}