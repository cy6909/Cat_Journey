{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/gameplay/GameManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","director","Color","Sprite","RelicManager","LevelManager","LevelType","CoreController","Ball","ccclass","property","GameState","GameManager","_currentState","PRE_START","_bricks","_ballNode","_paddleNode","_coreController","_levelManager","getInstance","_instance","onLoad","addPersistRootNode","node","destroy","onDestroy","start","initializeGame","initializeCore","initializeLevelManager","setState","createBoundaryWalls","createPaddle","createBall","setupLevel","scheduleOnce","launchBall","PLAYING","coreNode","getComponent","console","warn","paddlePrefab","setPosition","canvas","parent","addChild","log","error","ballPrefab","wallPrefab","parentNode","leftWall","setScale","leftSprite","color","rightWall","rightSprite","topWall","topSprite","bottomWall","bottomSprite","ballScript","launch","getLevelLayout","level","basicLayout","row","length","col","Math","random","createBricksFromLayout","layout","brickPrefab","brickContainer","startX","startY","brickWidth","brickHeight","spacing","brickType","brick","x","y","brickScript","setHealth","setDropsExperience","push","clearBricks","forEach","isValid","onBrickDestroyed","scoreValue","brickPosition","dropsExperience","score","powerUpDropChance","dropPowerUp","dropExperienceOrb","filter","checkLevelComplete","position","powerUps","multiBallPowerUpPrefab","laserPaddlePowerUpPrefab","availablePowerUps","prefab","randomPowerUp","floor","powerUpNode","onBallLost","lives","takeDamage","GAME_OVER","resetBall","onCoreAttacked","damage","onCoreDestroyed","onBossDefeated","onLevelComplete","experienceOrbPrefab","orbNode","levelType","getCurrentLevelType","NORMAL","BOSS","LEVEL_COMPLETE","relicManager","grantRandomRelic","resetLevel","adjustDifficulty","newState","validStates","Object","values","includes","oldState","onStateChanged","_oldState","handleGameOver","handleLevelComplete","handleGamePlaying","getCurrentState","getBallPrefab","getScore","getLives","getLevel","getBrickCount","getBricks","getBallNode","getPaddleNode","getCoreController","getLevelManager","getGameState","addScore","points","decreaseLives","amount","max"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Vec3, director, Color, Sprite, BoxCollider2D } from 'cc';\r\nimport { RelicManager } from '../managers/RelicManager';\r\nimport { LevelManager, LevelType } from './LevelManager';\r\nimport { CoreController } from '../managers/CoreController';\r\nimport { Ball } from '../core/Ball';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum GameState {\r\n    PRE_START = 'PRE_START',\r\n    PLAYING = 'PLAYING',\r\n    LEVEL_COMPLETE = 'LEVEL_COMPLETE',\r\n    GAME_OVER = 'GAME_OVER'\r\n}\r\n\r\n@ccclass('GameManager')\r\nexport class GameManager extends Component {\r\n    @property(Prefab)\r\n    public brickPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public paddlePrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public ballPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public multiBallPowerUpPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public laserPaddlePowerUpPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public wallPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public deathZonePrefab: Prefab | null = null;\r\n\r\n    @property\r\n    public powerUpDropChance: number = 0.2;\r\n\r\n    @property(Node)\r\n    public brickContainer: Node | null = null;\r\n\r\n    @property(Node)\r\n    public coreNode: Node | null = null;\r\n\r\n    @property(Prefab)\r\n    public experienceOrbPrefab: Prefab | null = null;\r\n\r\n    @property\r\n    public lives: number = 3;\r\n\r\n    @property\r\n    public score: number = 0;\r\n\r\n    @property\r\n    public level: number = 1;\r\n\r\n    private static _instance: GameManager | null = null;\r\n    private _currentState: GameState = GameState.PRE_START;\r\n    private _bricks: Node[] = [];\r\n    private _ballNode: Node | null = null;\r\n    private _paddleNode: Node | null = null;\r\n    private _coreController: CoreController | null = null;\r\n    private _levelManager: LevelManager | null = null;\r\n\r\n    public static getInstance(): GameManager | null {\r\n        return GameManager._instance;\r\n    }\r\n\r\n    protected onLoad(): void {\r\n        if (GameManager._instance === null) {\r\n            GameManager._instance = this;\r\n            director.addPersistRootNode(this.node);\r\n        } else {\r\n            this.node.destroy();\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        if (GameManager._instance === this) {\r\n            GameManager._instance = null;\r\n        }\r\n    }\r\n\r\n    protected start(): void {\r\n        this.initializeGame();\r\n        this.initializeCore();\r\n        this.initializeLevelManager();\r\n    }\r\n\r\n    private initializeGame(): void {\r\n        this.setState(GameState.PRE_START);\r\n        this.createBoundaryWalls();\r\n        this.createPaddle();\r\n        this.createBall();\r\n        this.setupLevel();\r\n        \r\n        // 延迟发射球，确保所有物理对象都已初始化\r\n        this.scheduleOnce(() => {\r\n            this.launchBall();\r\n            this.setState(GameState.PLAYING);\r\n        }, 2.0);\r\n    }\r\n\r\n    private initializeCore(): void {\r\n        if (this.coreNode) {\r\n            this._coreController = this.coreNode.getComponent(CoreController);\r\n            if (!this._coreController) {\r\n                console.warn('CoreController not found on coreNode');\r\n            }\r\n        }\r\n    }\r\n\r\n    private initializeLevelManager(): void {\r\n        this._levelManager = LevelManager.getInstance();\r\n        if (!this._levelManager) {\r\n            console.warn('LevelManager instance not found');\r\n        }\r\n    }\r\n\r\n    private createPaddle(): void {\r\n        try {\r\n            if (!this.paddlePrefab) {\r\n                console.warn('Paddle prefab not assigned - skipping paddle creation');\r\n                return;\r\n            }\r\n            \r\n            this._paddleNode = instantiate(this.paddlePrefab);\r\n            if (this._paddleNode) {\r\n                this._paddleNode.setPosition(0, -250, 0);\r\n                // 统一添加到Canvas下\r\n                const canvas = this.node.parent;\r\n                if (canvas) {\r\n                    canvas.addChild(this._paddleNode);\r\n                    console.log('Paddle created successfully and added to Canvas');\r\n                } else {\r\n                    this.node.addChild(this._paddleNode);\r\n                    console.log('Paddle created successfully and added to GameManager');\r\n                }\r\n            } else {\r\n                console.error('Failed to instantiate paddle prefab');\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Error creating paddle:', error);\r\n        }\r\n    }\r\n\r\n    private createBall(): void {\r\n        try {\r\n            if (!this.ballPrefab) {\r\n                console.warn('Ball prefab not assigned - skipping ball creation');\r\n                return;\r\n            }\r\n            \r\n            this._ballNode = instantiate(this.ballPrefab);\r\n            if (this._ballNode) {\r\n                this._ballNode.setPosition(0, -100, 0); // 相对Canvas中心的位置\r\n                // 将Ball添加到Canvas下，而不是GameManager下\r\n                const canvas = this.node.parent;\r\n                if (canvas) {\r\n                    canvas.addChild(this._ballNode);\r\n                    console.log('Ball created successfully and added to Canvas');\r\n                } else {\r\n                    this.node.addChild(this._ballNode);\r\n                    console.log('Ball created successfully and added to GameManager');\r\n                }\r\n            } else {\r\n                console.error('Failed to instantiate ball prefab');\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Error creating ball:', error);\r\n        }\r\n    }\r\n\r\n    private createBoundaryWalls(): void {\r\n        try {\r\n            if (!this.wallPrefab) {\r\n                console.warn('Wall prefab not assigned - skipping boundary creation');\r\n                return;\r\n            }\r\n\r\n            // Screen boundaries for 640x960 portrait: left=-320, right=+320, top=+480, bottom=-480\r\n            const canvas = this.node.parent;\r\n            const parentNode = canvas || this.node;\r\n            \r\n            // Left wall\r\n            const leftWall = instantiate(this.wallPrefab);\r\n            leftWall.setPosition(-325, 0, 0); // 竖屏左边界\r\n            leftWall.setScale(1, 10, 1); // 高一些适应竖屏\r\n            const leftSprite = leftWall.getComponent(Sprite);\r\n            if (leftSprite) {\r\n                leftSprite.color = new Color(255, 0, 0, 128);\r\n            }\r\n            parentNode.addChild(leftWall);\r\n\r\n            // Right wall  \r\n            const rightWall = instantiate(this.wallPrefab);\r\n            rightWall.setPosition(325, 0, 0); // 竖屏右边界\r\n            rightWall.setScale(1, 10, 1);\r\n            const rightSprite = rightWall.getComponent(Sprite);\r\n            if (rightSprite) {\r\n                rightSprite.color = new Color(255, 0, 0, 128);\r\n            }\r\n            parentNode.addChild(rightWall);\r\n\r\n            // Top wall\r\n            const topWall = instantiate(this.wallPrefab);\r\n            topWall.setPosition(0, 485, 0); // 竖屏上边界\r\n            topWall.setScale(7, 1, 1); // 宽一些覆盖竖屏宽度\r\n            const topSprite = topWall.getComponent(Sprite);\r\n            if (topSprite) {\r\n                topSprite.color = new Color(0, 255, 0, 128);\r\n            }\r\n            parentNode.addChild(topWall);\r\n\r\n            // Bottom wall\r\n            const bottomWall = instantiate(this.wallPrefab);\r\n            bottomWall.setPosition(0, -485, 0); // 竖屏下边界\r\n            bottomWall.setScale(7, 1, 1);\r\n            const bottomSprite = bottomWall.getComponent(Sprite);\r\n            if (bottomSprite) {\r\n                bottomSprite.color = new Color(0, 0, 255, 128);\r\n            }\r\n            parentNode.addChild(bottomWall);\r\n\r\n            console.log('Boundary walls created successfully');\r\n        } catch (error) {\r\n            console.error('Error creating boundary walls:', error);\r\n        }\r\n    }\r\n\r\n    private launchBall(): void {\r\n        if (this._ballNode) {\r\n            const ballScript = this._ballNode.getComponent(Ball);\r\n            if (ballScript && typeof ballScript.launch === 'function') {\r\n                ballScript.launch();\r\n                console.log('Ball launched after physics initialization');\r\n            } else {\r\n                console.warn('Ball script not found or launch method not available');\r\n            }\r\n        } else {\r\n            console.warn('Ball node not found, cannot launch');\r\n        }\r\n    }\r\n\r\n    private setupLevel(): void {\r\n        console.log('SetupLevel called - temporarily skipping brick creation for physics testing');\r\n        // 暂时注释掉brick创建，专注测试Ball和Wall物理\r\n        /*\r\n        this.clearBricks();\r\n        \r\n        if (this._levelManager) {\r\n            this._levelManager.initializeLevel();\r\n            \r\n            const levelType = this._levelManager.getCurrentLevelType();\r\n            if (levelType !== LevelType.BOSS) {\r\n                const layout = this.getLevelLayout(this.level);\r\n                this.createBricksFromLayout(layout);\r\n            }\r\n        } else {\r\n            const layout = this.getLevelLayout(this.level);\r\n            this.createBricksFromLayout(layout);\r\n        }\r\n        */\r\n    }\r\n\r\n    private getLevelLayout(level: number): number[][] {\r\n        const basicLayout = [\r\n            [1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1]\r\n        ];\r\n\r\n        if (level > 1) {\r\n            for (let row = 0; row < basicLayout.length; row++) {\r\n                for (let col = 0; col < basicLayout[row].length; col++) {\r\n                    if (Math.random() < 0.3) {\r\n                        basicLayout[row][col] = 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return basicLayout;\r\n    }\r\n\r\n    private createBricksFromLayout(layout: number[][]): void {\r\n        if (!this.brickPrefab || !this.brickContainer) return;\r\n\r\n        const startX = -280;\r\n        const startY = 200;\r\n        const brickWidth = 80;\r\n        const brickHeight = 40;\r\n        const spacing = 10;\r\n\r\n        for (let row = 0; row < layout.length; row++) {\r\n            for (let col = 0; col < layout[row].length; col++) {\r\n                const brickType = layout[row][col];\r\n                if (brickType === 0) continue;\r\n\r\n                const brick = instantiate(this.brickPrefab);\r\n                const x = startX + col * (brickWidth + spacing);\r\n                const y = startY - row * (brickHeight + spacing);\r\n                \r\n                brick.setPosition(x, y, 0);\r\n                \r\n                const brickScript = brick.getComponent('Brick');\r\n                if (brickScript) {\r\n                    (brickScript as any).setHealth(brickType);\r\n                    \r\n                    // Some bricks drop experience orbs\r\n                    if (Math.random() < 0.1) { // 10% chance\r\n                        (brickScript as any).setDropsExperience(true);\r\n                    }\r\n                }\r\n\r\n                this.brickContainer.addChild(brick);\r\n                this._bricks.push(brick);\r\n            }\r\n        }\r\n    }\r\n\r\n    private clearBricks(): void {\r\n        this._bricks.forEach(brick => {\r\n            if (brick && brick.isValid) {\r\n                brick.destroy();\r\n            }\r\n        });\r\n        this._bricks = [];\r\n    }\r\n\r\n    public onBrickDestroyed(scoreValue: number = 10, brickPosition?: Vec3, dropsExperience: boolean = false): void {\r\n        this.score += scoreValue;\r\n        \r\n        if (brickPosition) {\r\n            // Drop power-ups\r\n            if (Math.random() < this.powerUpDropChance) {\r\n                this.dropPowerUp(brickPosition);\r\n            }\r\n            \r\n            // Drop experience orbs\r\n            if (dropsExperience) {\r\n                this.dropExperienceOrb(brickPosition);\r\n            }\r\n        }\r\n        \r\n        this._bricks = this._bricks.filter(brick => brick && brick.isValid);\r\n        \r\n        if (this._bricks.length === 0) {\r\n            this.checkLevelComplete();\r\n        }\r\n    }\r\n\r\n    private dropPowerUp(position: Vec3): void {\r\n        const powerUps = [this.multiBallPowerUpPrefab, this.laserPaddlePowerUpPrefab];\r\n        const availablePowerUps = powerUps.filter(prefab => prefab !== null);\r\n        \r\n        if (availablePowerUps.length === 0) return;\r\n        \r\n        const randomPowerUp = availablePowerUps[Math.floor(Math.random() * availablePowerUps.length)];\r\n        if (randomPowerUp) {\r\n            const powerUpNode = instantiate(randomPowerUp);\r\n            powerUpNode.setPosition(position);\r\n            this.node.addChild(powerUpNode);\r\n        }\r\n    }\r\n\r\n    public onBallLost(): void {\r\n        this.lives--;\r\n        \r\n        // Ball hitting core also deals damage\r\n        if (this._coreController) {\r\n            this._coreController.takeDamage(1, 'Ball lost');\r\n        }\r\n        \r\n        if (this.lives <= 0) {\r\n            this.setState(GameState.GAME_OVER);\r\n        } else {\r\n            this.resetBall();\r\n        }\r\n    }\r\n    \r\n    public onCoreAttacked(damage: number): void {\r\n        console.log(`Core attacked for ${damage} damage`);\r\n        \r\n        if (this._coreController) {\r\n            this._coreController.takeDamage(damage, 'External attack');\r\n        }\r\n    }\r\n    \r\n    public onCoreDestroyed(): void {\r\n        console.log('Core destroyed! Immediate game over!');\r\n        this.lives = 0;\r\n        this.setState(GameState.GAME_OVER);\r\n    }\r\n    \r\n    public onBossDefeated(scoreValue: number): void {\r\n        console.log(`Boss defeated! Awarded ${scoreValue} points`);\r\n        this.score += scoreValue;\r\n        \r\n        // Boss defeat triggers level completion\r\n        this.onLevelComplete();\r\n    }\r\n    \r\n    private dropExperienceOrb(position: Vec3): void {\r\n        if (!this.experienceOrbPrefab) return;\r\n        \r\n        const orbNode = instantiate(this.experienceOrbPrefab);\r\n        orbNode.setPosition(position);\r\n        this.node.addChild(orbNode);\r\n        console.log('Experience orb dropped');\r\n    }\r\n\r\n    private resetBall(): void {\r\n        if (this._ballNode) {\r\n            const ballScript = this._ballNode.getComponent('Ball');\r\n            if (ballScript) {\r\n                (ballScript as any).resetBall();\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkLevelComplete(): void {\r\n        const levelType = this._levelManager ? this._levelManager.getCurrentLevelType() : LevelType.NORMAL;\r\n        \r\n        if (levelType === LevelType.BOSS) {\r\n            // Boss levels complete when boss is defeated (handled in onBossDefeated)\r\n            return;\r\n        }\r\n        \r\n        this.onLevelComplete();\r\n    }\r\n\r\n    public onLevelComplete(): void {\r\n        this.setState(GameState.LEVEL_COMPLETE);\r\n        this.level++;\r\n        \r\n        const relicManager = RelicManager.getInstance();\r\n        if (relicManager) {\r\n            relicManager.grantRandomRelic();\r\n        }\r\n        \r\n        // Reset level manager for next level\r\n        if (this._levelManager) {\r\n            this._levelManager.resetLevel();\r\n            this._levelManager.adjustDifficulty(this.level);\r\n        }\r\n        \r\n        this.scheduleOnce(() => {\r\n            this.setupLevel();\r\n            this.setState(GameState.PLAYING);\r\n        }, 3.0);\r\n    }\r\n\r\n    public setState(newState: GameState): void {\r\n        try {\r\n            if (!newState || typeof newState !== 'string') {\r\n                console.warn('Invalid game state:', newState);\r\n                return;\r\n            }\r\n\r\n            const validStates = Object.values(GameState);\r\n            if (!validStates.includes(newState as GameState)) {\r\n                console.warn('Unknown game state:', newState);\r\n                return;\r\n            }\r\n\r\n            const oldState = this._currentState;\r\n            this._currentState = newState;\r\n            \r\n            console.log(`Game State Changed: ${oldState} -> ${newState}`);\r\n            \r\n            // Handle state-specific logic\r\n            this.onStateChanged(oldState, newState);\r\n            \r\n        } catch (error) {\r\n            console.error('Error setting game state:', error);\r\n        }\r\n    }\r\n\r\n    private onStateChanged(_oldState: GameState, newState: GameState): void {\r\n        try {\r\n            switch (newState) {\r\n                case GameState.GAME_OVER:\r\n                    this.handleGameOver();\r\n                    break;\r\n                case GameState.LEVEL_COMPLETE:\r\n                    this.handleLevelComplete();\r\n                    break;\r\n                case GameState.PLAYING:\r\n                    this.handleGamePlaying();\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            console.warn('Error in state change handler:', error);\r\n        }\r\n    }\r\n\r\n    private handleGameOver(): void {\r\n        console.log('Game Over - cleaning up resources');\r\n        // Stop any ongoing animations or sounds\r\n        // Save final score if needed\r\n    }\r\n\r\n    private handleLevelComplete(): void {\r\n        console.log('Level Complete - preparing next level');\r\n        // Award experience, update progression\r\n    }\r\n\r\n    private handleGamePlaying(): void {\r\n        console.log('Game Playing - all systems active');\r\n        // Ensure all game systems are ready\r\n    }\r\n\r\n    public getCurrentState(): GameState {\r\n        return this._currentState;\r\n    }\r\n\r\n    public getBallPrefab(): Prefab | null {\r\n        return this.ballPrefab;\r\n    }\r\n\r\n    public getScore(): number {\r\n        return this.score;\r\n    }\r\n\r\n    public getLives(): number {\r\n        return this.lives;\r\n    }\r\n\r\n    public getLevel(): number {\r\n        return this.level;\r\n    }\r\n\r\n    // 添加测试期望的方法\r\n    public getBrickCount(): number {\r\n        return this._bricks.length;\r\n    }\r\n\r\n    public getBricks(): Node[] {\r\n        return this._bricks;\r\n    }\r\n\r\n    public getBallNode(): Node | null {\r\n        return this._ballNode;\r\n    }\r\n\r\n    public getPaddleNode(): Node | null {\r\n        return this._paddleNode;\r\n    }\r\n\r\n    public getCoreController(): CoreController | null {\r\n        return this._coreController;\r\n    }\r\n\r\n    public getLevelManager(): LevelManager | null {\r\n        return this._levelManager;\r\n    }\r\n\r\n    public getGameState(): GameState {\r\n        return this._currentState;\r\n    }\r\n\r\n    public addScore(points: number): void {\r\n        this.score += points;\r\n        console.log(`Score increased by ${points}. Total: ${this.score}`);\r\n    }\r\n\r\n    public decreaseLives(amount: number = 1): void {\r\n        this.lives = Math.max(0, this.lives - amount);\r\n        console.log(`Lives decreased by ${amount}. Remaining: ${this.lives}`);\r\n        \r\n        if (this.lives <= 0) {\r\n            this.setState(GameState.GAME_OVER);\r\n        }\r\n    }\r\n}"]}