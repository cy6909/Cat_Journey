{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/gameplay/LayoutGenerator.ts"],"names":["LayoutGenerator","StandardGridLayout","SymmetricPatternLayout","TriangleLayout","DiamondLayout","PyramidLayout","SpiralLayout","CrossLayout","HexagonLayout","CheckerboardLayout","ChaosLayout","ClusterRandomLayout","FortressLayout","LayeredDefenseLayout","BrickType","generateLayout","config","level","generate","patterns","length","bricks","gridRows","gridCols","density","row","col","Math","random","push","type","NORMAL","health","baseHealth","centerCol","floor","width","startCol","i","centerRow","distanceFromCenter","abs","steps","direction","j","thickness","offset","exists","some","b","radius","min","distance","allPatterns","map","p","brickMap","Map","pattern","brick","key","has","set","clusterCount","clusterSize","c","offsetRow","offsetCol","wallThickness","wallHealth","gateWidth","gatePosition","REINFORCED","innerStartRow","innerDensity","EXPERIENCE","layers","PHASE","rows","REGENERATING","currentRow","layer","r"],"mappings":"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","sourcesContent":["import { BrickType } from \"./EnhancedBrick\";\r\nimport { DifficultyConfig } from \"./DifficultySystem\";\r\n\r\n/**\r\n * 砖块数据 - 用于布局生成\r\n */\r\nexport interface BrickData {\r\n    type: BrickType;\r\n    health: number;\r\n    row: number;\r\n    col: number;\r\n}\r\n\r\n/**\r\n * 布局模板接口\r\n */\r\nexport interface ILayoutTemplate {\r\n    generate(config: DifficultyConfig): BrickData[];\r\n}\r\n\r\n/**\r\n * 布局生成器 - 根据难度配置生成砖块布局\r\n *\r\n * Linus式设计：简单直接，关卡递进有明确结构感\r\n * - 1-3关: 基础矩形\r\n * - 4-6关: 简单图案\r\n * - 7-9关: 复杂图案\r\n * - 10+关: 特殊布局\r\n */\r\nexport class LayoutGenerator {\r\n    /**\r\n     * 根据难度配置选择并生成布局\r\n     * 关卡渐进式设计，而非完全随机\r\n     */\r\n    public static generateLayout(config: DifficultyConfig): BrickData[] {\r\n        const level = config.level || 1;\r\n\r\n        // 根据关卡选择布局类型 - 有明确的进阶感\r\n        if (level <= 3) {\r\n            // 初级关卡 - 整齐的矩形\r\n            return new StandardGridLayout().generate(config);\r\n        } else if (level <= 6) {\r\n            // 中级关卡 - 简单图案\r\n            const patterns = [\r\n                new TriangleLayout(),\r\n                new DiamondLayout(),\r\n                new PyramidLayout()\r\n            ];\r\n            return patterns[level % patterns.length].generate(config);\r\n        } else if (level <= 9) {\r\n            // 高级关卡 - 复杂图案\r\n            const patterns = [\r\n                new SpiralLayout(),\r\n                new CrossLayout(),\r\n                new HexagonLayout()\r\n            ];\r\n            return patterns[level % patterns.length].generate(config);\r\n        } else if (level <= 15) {\r\n            // 专家关卡 - 防御型布局\r\n            const patterns = [\r\n                new FortressLayout(),\r\n                new LayeredDefenseLayout(),\r\n                new CheckerboardLayout()\r\n            ];\r\n            return patterns[level % patterns.length].generate(config);\r\n        } else {\r\n            // 大师关卡 - 混合型布局\r\n            return new ChaosLayout().generate(config);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 标准网格布局 - 矩形阵列 + 随机空缺\r\n */\r\nclass StandardGridLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, density } = config;\r\n\r\n        for (let row = 0; row < gridRows; row++) {\r\n            for (let col = 0; col < gridCols; col++) {\r\n                // 根据密度随机决定是否放置砖块\r\n                if (Math.random() > density) continue;\r\n\r\n                bricks.push({\r\n                    type: BrickType.NORMAL,  // 默认类型，后续会被difficulty系统修改\r\n                    health: config.baseHealth,\r\n                    row,\r\n                    col\r\n                });\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 对称图案布局 - 已废弃，拆分为独立布局类\r\n */\r\nclass SymmetricPatternLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        // 向后兼容 - 使用三角形布局\r\n        return new TriangleLayout().generate(config);\r\n    }\r\n}\r\n\r\n/**\r\n * 三角形布局\r\n */\r\nclass TriangleLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n        const centerCol = Math.floor(gridCols / 2);\r\n\r\n        for (let row = 0; row < gridRows; row++) {\r\n            const width = row + 1;  // 每行宽度递增\r\n            const startCol = centerCol - Math.floor(width / 2);\r\n\r\n            for (let i = 0; i < width && startCol + i < gridCols; i++) {\r\n                if (startCol + i >= 0) {\r\n                    bricks.push({\r\n                        type: BrickType.NORMAL,\r\n                        health: baseHealth,\r\n                        row,\r\n                        col: startCol + i\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 菱形布局\r\n */\r\nclass DiamondLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n        const centerRow = Math.floor(gridRows / 2);\r\n        const centerCol = Math.floor(gridCols / 2);\r\n\r\n        for (let row = 0; row < gridRows; row++) {\r\n            const distanceFromCenter = Math.abs(row - centerRow);\r\n            const width = (centerRow + 1) - distanceFromCenter;\r\n            const startCol = centerCol - Math.floor(width / 2);\r\n\r\n            for (let i = 0; i < width && startCol + i >= 0 && startCol + i < gridCols; i++) {\r\n                bricks.push({\r\n                    type: BrickType.NORMAL,\r\n                    health: baseHealth,\r\n                    row,\r\n                    col: startCol + i\r\n                });\r\n            }\r\n        }\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 金字塔布局 - 倒三角形\r\n */\r\nclass PyramidLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n        const centerCol = Math.floor(gridCols / 2);\r\n\r\n        for (let row = 0; row < gridRows; row++) {\r\n            const width = gridRows - row;  // 每行宽度递减\r\n            const startCol = centerCol - Math.floor(width / 2);\r\n\r\n            for (let i = 0; i < width && startCol + i < gridCols; i++) {\r\n                if (startCol + i >= 0) {\r\n                    bricks.push({\r\n                        type: BrickType.NORMAL,\r\n                        health: baseHealth,\r\n                        row,\r\n                        col: startCol + i\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 螺旋布局 - 从中心向外螺旋\r\n */\r\nclass SpiralLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n        const centerRow = Math.floor(gridRows / 2);\r\n        const centerCol = Math.floor(gridCols / 2);\r\n\r\n        // 螺旋生成\r\n        let row = centerRow, col = centerCol;\r\n        let steps = 1;\r\n        let direction = 0; // 0=right, 1=down, 2=left, 3=up\r\n\r\n        bricks.push({ type: BrickType.NORMAL, health: baseHealth, row, col });\r\n\r\n        while (bricks.length < gridRows * gridCols * 0.6) { // 填充60%\r\n            for (let i = 0; i < 2; i++) { // 每个步长走两个方向\r\n                for (let j = 0; j < steps; j++) {\r\n                    switch (direction) {\r\n                        case 0: col++; break;\r\n                        case 1: row++; break;\r\n                        case 2: col--; break;\r\n                        case 3: row--; break;\r\n                    }\r\n\r\n                    if (row >= 0 && row < gridRows && col >= 0 && col < gridCols) {\r\n                        bricks.push({\r\n                            type: BrickType.NORMAL,\r\n                            health: baseHealth,\r\n                            row,\r\n                            col\r\n                        });\r\n                    }\r\n                }\r\n                direction = (direction + 1) % 4;\r\n            }\r\n            steps++;\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 十字布局\r\n */\r\nclass CrossLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n        const centerRow = Math.floor(gridRows / 2);\r\n        const centerCol = Math.floor(gridCols / 2);\r\n        const thickness = 2;  // 十字粗细\r\n\r\n        // 竖线\r\n        for (let row = 0; row < gridRows; row++) {\r\n            for (let offset = -thickness; offset <= thickness; offset++) {\r\n                const col = centerCol + offset;\r\n                if (col >= 0 && col < gridCols) {\r\n                    bricks.push({\r\n                        type: BrickType.NORMAL,\r\n                        health: baseHealth,\r\n                        row,\r\n                        col\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // 横线\r\n        for (let col = 0; col < gridCols; col++) {\r\n            for (let offset = -thickness; offset <= thickness; offset++) {\r\n                const row = centerRow + offset;\r\n                if (row >= 0 && row < gridRows) {\r\n                    const exists = bricks.some(b => b.row === row && b.col === col);\r\n                    if (!exists) {\r\n                        bricks.push({\r\n                            type: BrickType.NORMAL,\r\n                            health: baseHealth,\r\n                            row,\r\n                            col\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 六边形布局\r\n */\r\nclass HexagonLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n        const centerRow = Math.floor(gridRows / 2);\r\n        const centerCol = Math.floor(gridCols / 2);\r\n        const radius = Math.min(gridRows, gridCols) / 2;\r\n\r\n        for (let row = 0; row < gridRows; row++) {\r\n            for (let col = 0; col < gridCols; col++) {\r\n                const distance = Math.abs(row - centerRow) + Math.abs(col - centerCol);\r\n                if (distance <= radius) {\r\n                    bricks.push({\r\n                        type: BrickType.NORMAL,\r\n                        health: baseHealth,\r\n                        row,\r\n                        col\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 棋盘布局 - 黑白相间\r\n */\r\nclass CheckerboardLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n\r\n        for (let row = 0; row < gridRows; row++) {\r\n            for (let col = 0; col < gridCols; col++) {\r\n                // 棋盘格：行列和为偶数放砖块\r\n                if ((row + col) % 2 === 0) {\r\n                    bricks.push({\r\n                        type: BrickType.NORMAL,\r\n                        health: baseHealth,\r\n                        row,\r\n                        col\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 混沌布局 - 大师关卡的终极挑战\r\n */\r\nclass ChaosLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n\r\n        // 混合多种模式\r\n        const patterns = [\r\n            new DiamondLayout(),\r\n            new SpiralLayout(),\r\n            new CheckerboardLayout()\r\n        ];\r\n\r\n        // 获取每种模式的砖块\r\n        const allPatterns = patterns.map(p => p.generate(config));\r\n\r\n        // 合并并去重\r\n        const brickMap = new Map<string, BrickData>();\r\n        for (const pattern of allPatterns) {\r\n            for (const brick of pattern) {\r\n                const key = `${brick.row}-${brick.col}`;\r\n                if (!brickMap.has(key) || Math.random() > 0.5) {\r\n                    brickMap.set(key, brick);\r\n                }\r\n            }\r\n        }\r\n\r\n        // 随机移除一些砖块制造空洞\r\n        for (const [key, brick] of brickMap) {\r\n            if (Math.random() > 0.3) { // 70%保留率\r\n                bricks.push(brick);\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 随机团块布局 - 分散的砖块团\r\n */\r\nclass ClusterRandomLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n        const clusterCount = 4 + Math.floor(Math.random() * 3);  // 4-6个团块\r\n        const clusterSize = 12 + Math.floor(Math.random() * 7);  // 12-18个砖块/团\r\n\r\n        for (let c = 0; c < clusterCount; c++) {\r\n            const centerRow = Math.floor(Math.random() * gridRows);\r\n            const centerCol = Math.floor(Math.random() * gridCols);\r\n\r\n            for (let i = 0; i < clusterSize; i++) {\r\n                const offsetRow = Math.floor(Math.random() * 5) - 2;  // -2 to 2\r\n                const offsetCol = Math.floor(Math.random() * 5) - 2;\r\n\r\n                const row = centerRow + offsetRow;\r\n                const col = centerCol + offsetCol;\r\n\r\n                if (row >= 0 && row < gridRows && col >= 0 && col < gridCols) {\r\n                    // 避免重复\r\n                    const exists = bricks.some(b => b.row === row && b.col === col);\r\n                    if (!exists) {\r\n                        bricks.push({\r\n                            type: BrickType.NORMAL,\r\n                            health: baseHealth,\r\n                            row,\r\n                            col\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 堡垒布局 - 外墙+小孔+内部密集区\r\n */\r\nclass FortressLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n\r\n        // 外墙参数\r\n        const wallThickness = 2;\r\n        const wallHealth = baseHealth + 2;  // 外墙更厚\r\n        const gateWidth = 3;\r\n        const gatePosition = Math.floor(Math.random() * (gridCols - gateWidth - wallThickness * 2)) + wallThickness;\r\n\r\n        // 生成外墙\r\n        for (let row = 0; row < Math.min(wallThickness + 2, gridRows); row++) {\r\n            for (let col = 0; col < gridCols; col++) {\r\n                // 顶部墙 + 门洞\r\n                if (row < wallThickness) {\r\n                    if (col < gatePosition || col >= gatePosition + gateWidth) {\r\n                        bricks.push({\r\n                            type: BrickType.REINFORCED,\r\n                            health: wallHealth,\r\n                            row,\r\n                            col\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 内部密集区 (高价值砖块)\r\n        const innerStartRow = wallThickness + 2;\r\n        const innerDensity = 0.8;\r\n\r\n        for (let row = innerStartRow; row < gridRows; row++) {\r\n            for (let col = 2; col < gridCols - 2; col++) {\r\n                if (Math.random() < innerDensity) {\r\n                    bricks.push({\r\n                        type: BrickType.EXPERIENCE,  // 内部多放经验砖\r\n                        health: baseHealth,\r\n                        row,\r\n                        col\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n\r\n/**\r\n * 分层防御布局 - 不同类型砖块分层\r\n */\r\nclass LayeredDefenseLayout implements ILayoutTemplate {\r\n    public generate(config: DifficultyConfig): BrickData[] {\r\n        const bricks: BrickData[] = [];\r\n        const { gridRows, gridCols, baseHealth } = config;\r\n\r\n        // 定义层级\r\n        const layers = [\r\n            { type: BrickType.PHASE, health: 1, rows: 2 },           // 相位砖前排\r\n            { type: BrickType.REGENERATING, health: baseHealth + 1, rows: 2 }, // 再生砖中排\r\n            { type: BrickType.NORMAL, health: baseHealth, rows: gridRows - 4 }  // 普通砖后排\r\n        ];\r\n\r\n        let currentRow = 0;\r\n\r\n        for (const layer of layers) {\r\n            for (let r = 0; r < layer.rows && currentRow < gridRows; r++) {\r\n                for (let col = 0; col < gridCols; col++) {\r\n                    bricks.push({\r\n                        type: layer.type,\r\n                        health: layer.health,\r\n                        row: currentRow,\r\n                        col\r\n                    });\r\n                }\r\n                currentRow++;\r\n            }\r\n        }\r\n\r\n        return bricks;\r\n    }\r\n}\r\n"]}