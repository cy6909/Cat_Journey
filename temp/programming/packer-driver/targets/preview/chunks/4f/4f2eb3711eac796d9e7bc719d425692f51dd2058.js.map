{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/gameplay/GameManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","director","RelicManager","LevelManager","LevelType","CoreController","ccclass","property","GameState","GameManager","_currentState","PRE_START","_bricks","_ballNode","_paddleNode","_coreController","_levelManager","getInstance","_instance","onLoad","addPersistRootNode","node","destroy","onDestroy","start","initializeGame","initializeCore","initializeLevelManager","setState","createPaddle","createBall","setupLevel","scheduleOnce","PLAYING","coreNode","getComponent","console","warn","paddlePrefab","setPosition","addChild","log","error","ballPrefab","clearBricks","initializeLevel","levelType","getCurrentLevelType","BOSS","layout","getLevelLayout","level","createBricksFromLayout","basicLayout","row","length","col","Math","random","brickPrefab","brickContainer","startX","startY","brickWidth","brickHeight","spacing","brickType","brick","x","y","brickScript","setHealth","setDropsExperience","push","forEach","isValid","onBrickDestroyed","scoreValue","brickPosition","dropsExperience","score","powerUpDropChance","dropPowerUp","dropExperienceOrb","filter","checkLevelComplete","position","powerUps","multiBallPowerUpPrefab","laserPaddlePowerUpPrefab","availablePowerUps","prefab","randomPowerUp","floor","powerUpNode","onBallLost","lives","takeDamage","GAME_OVER","resetBall","onCoreAttacked","damage","onCoreDestroyed","onBossDefeated","onLevelComplete","experienceOrbPrefab","orbNode","ballScript","NORMAL","LEVEL_COMPLETE","relicManager","grantRandomRelic","resetLevel","adjustDifficulty","newState","validStates","Object","values","includes","oldState","onStateChanged","handleGameOver","handleLevelComplete","handleGamePlaying","getCurrentState","getBallPrefab","getScore","getLives","getLevel"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Vec3, director } from 'cc';\r\nimport { RelicManager } from '../managers/RelicManager';\r\nimport { LevelManager, LevelType } from './LevelManager';\r\nimport { CoreController } from '../managers/CoreController';\r\nimport { BossController } from '../managers/BossController';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum GameState {\r\n    PRE_START = 'PRE_START',\r\n    PLAYING = 'PLAYING',\r\n    LEVEL_COMPLETE = 'LEVEL_COMPLETE',\r\n    GAME_OVER = 'GAME_OVER'\r\n}\r\n\r\n@ccclass('GameManager')\r\nexport class GameManager extends Component {\r\n    @property(Prefab)\r\n    public brickPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public paddlePrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public ballPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public multiBallPowerUpPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public laserPaddlePowerUpPrefab: Prefab | null = null;\r\n\r\n    @property\r\n    public powerUpDropChance: number = 0.2;\r\n\r\n    @property(Node)\r\n    public brickContainer: Node | null = null;\r\n\r\n    @property(Node)\r\n    public coreNode: Node | null = null;\r\n\r\n    @property(Prefab)\r\n    public experienceOrbPrefab: Prefab | null = null;\r\n\r\n    @property\r\n    public lives: number = 3;\r\n\r\n    @property\r\n    public score: number = 0;\r\n\r\n    @property\r\n    public level: number = 1;\r\n\r\n    private static _instance: GameManager | null = null;\r\n    private _currentState: GameState = GameState.PRE_START;\r\n    private _bricks: Node[] = [];\r\n    private _ballNode: Node | null = null;\r\n    private _paddleNode: Node | null = null;\r\n    private _coreController: CoreController | null = null;\r\n    private _levelManager: LevelManager | null = null;\r\n\r\n    public static getInstance(): GameManager | null {\r\n        return GameManager._instance;\r\n    }\r\n\r\n    protected onLoad(): void {\r\n        if (GameManager._instance === null) {\r\n            GameManager._instance = this;\r\n            director.addPersistRootNode(this.node);\r\n        } else {\r\n            this.node.destroy();\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        if (GameManager._instance === this) {\r\n            GameManager._instance = null;\r\n        }\r\n    }\r\n\r\n    protected start(): void {\r\n        this.initializeGame();\r\n        this.initializeCore();\r\n        this.initializeLevelManager();\r\n    }\r\n\r\n    private initializeGame(): void {\r\n        this.setState(GameState.PRE_START);\r\n        this.createPaddle();\r\n        this.createBall();\r\n        this.setupLevel();\r\n        this.scheduleOnce(() => {\r\n            this.setState(GameState.PLAYING);\r\n        }, 2.0);\r\n    }\r\n\r\n    private initializeCore(): void {\r\n        if (this.coreNode) {\r\n            this._coreController = this.coreNode.getComponent(CoreController);\r\n            if (!this._coreController) {\r\n                console.warn('CoreController not found on coreNode');\r\n            }\r\n        }\r\n    }\r\n\r\n    private initializeLevelManager(): void {\r\n        this._levelManager = LevelManager.getInstance();\r\n        if (!this._levelManager) {\r\n            console.warn('LevelManager instance not found');\r\n        }\r\n    }\r\n\r\n    private createPaddle(): void {\n        try {\n            if (!this.paddlePrefab) {\n                console.warn('Paddle prefab not assigned - skipping paddle creation');\n                return;\n            }\n            \n            this._paddleNode = instantiate(this.paddlePrefab);\n            if (this._paddleNode) {\n                this._paddleNode.setPosition(0, -250, 0);\n                this.node.addChild(this._paddleNode);\n                console.log('Paddle created successfully');\n            } else {\n                console.error('Failed to instantiate paddle prefab');\n            }\n            \n        } catch (error) {\n            console.error('Error creating paddle:', error);\n        }\n    }\r\n\r\n    private createBall(): void {\n        try {\n            if (!this.ballPrefab) {\n                console.warn('Ball prefab not assigned - skipping ball creation');\n                return;\n            }\n            \n            this._ballNode = instantiate(this.ballPrefab);\n            if (this._ballNode) {\n                this._ballNode.setPosition(0, -150, 0);\n                this.node.addChild(this._ballNode);\n                console.log('Ball created successfully');\n            } else {\n                console.error('Failed to instantiate ball prefab');\n            }\n            \n        } catch (error) {\n            console.error('Error creating ball:', error);\n        }\n    }\r\n\r\n    private setupLevel(): void {\r\n        this.clearBricks();\r\n        \r\n        if (this._levelManager) {\r\n            this._levelManager.initializeLevel();\r\n            \r\n            const levelType = this._levelManager.getCurrentLevelType();\r\n            if (levelType !== LevelType.BOSS) {\r\n                const layout = this.getLevelLayout(this.level);\r\n                this.createBricksFromLayout(layout);\r\n            }\r\n        } else {\r\n            const layout = this.getLevelLayout(this.level);\r\n            this.createBricksFromLayout(layout);\r\n        }\r\n    }\r\n\r\n    private getLevelLayout(level: number): number[][] {\r\n        const basicLayout = [\r\n            [1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1]\r\n        ];\r\n\r\n        if (level > 1) {\r\n            for (let row = 0; row < basicLayout.length; row++) {\r\n                for (let col = 0; col < basicLayout[row].length; col++) {\r\n                    if (Math.random() < 0.3) {\r\n                        basicLayout[row][col] = 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return basicLayout;\r\n    }\r\n\r\n    private createBricksFromLayout(layout: number[][]): void {\r\n        if (!this.brickPrefab || !this.brickContainer) return;\r\n\r\n        const startX = -280;\r\n        const startY = 200;\r\n        const brickWidth = 80;\r\n        const brickHeight = 40;\r\n        const spacing = 10;\r\n\r\n        for (let row = 0; row < layout.length; row++) {\r\n            for (let col = 0; col < layout[row].length; col++) {\r\n                const brickType = layout[row][col];\r\n                if (brickType === 0) continue;\r\n\r\n                const brick = instantiate(this.brickPrefab);\r\n                const x = startX + col * (brickWidth + spacing);\r\n                const y = startY - row * (brickHeight + spacing);\r\n                \r\n                brick.setPosition(x, y, 0);\r\n                \r\n                const brickScript = brick.getComponent('Brick');\r\n                if (brickScript) {\r\n                    (brickScript as any).setHealth(brickType);\r\n                    \r\n                    // Some bricks drop experience orbs\r\n                    if (Math.random() < 0.1) { // 10% chance\r\n                        (brickScript as any).setDropsExperience(true);\r\n                    }\r\n                }\r\n\r\n                this.brickContainer.addChild(brick);\r\n                this._bricks.push(brick);\r\n            }\r\n        }\r\n    }\r\n\r\n    private clearBricks(): void {\r\n        this._bricks.forEach(brick => {\r\n            if (brick && brick.isValid) {\r\n                brick.destroy();\r\n            }\r\n        });\r\n        this._bricks = [];\r\n    }\r\n\r\n    public onBrickDestroyed(scoreValue: number = 10, brickPosition?: Vec3, dropsExperience: boolean = false): void {\r\n        this.score += scoreValue;\r\n        \r\n        if (brickPosition) {\r\n            // Drop power-ups\r\n            if (Math.random() < this.powerUpDropChance) {\r\n                this.dropPowerUp(brickPosition);\r\n            }\r\n            \r\n            // Drop experience orbs\r\n            if (dropsExperience) {\r\n                this.dropExperienceOrb(brickPosition);\r\n            }\r\n        }\r\n        \r\n        this._bricks = this._bricks.filter(brick => brick && brick.isValid);\r\n        \r\n        if (this._bricks.length === 0) {\r\n            this.checkLevelComplete();\r\n        }\r\n    }\r\n\r\n    private dropPowerUp(position: Vec3): void {\r\n        const powerUps = [this.multiBallPowerUpPrefab, this.laserPaddlePowerUpPrefab];\r\n        const availablePowerUps = powerUps.filter(prefab => prefab !== null);\r\n        \r\n        if (availablePowerUps.length === 0) return;\r\n        \r\n        const randomPowerUp = availablePowerUps[Math.floor(Math.random() * availablePowerUps.length)];\r\n        if (randomPowerUp) {\r\n            const powerUpNode = instantiate(randomPowerUp);\r\n            powerUpNode.setPosition(position);\r\n            this.node.addChild(powerUpNode);\r\n        }\r\n    }\r\n\r\n    public onBallLost(): void {\r\n        this.lives--;\r\n        \r\n        // Ball hitting core also deals damage\r\n        if (this._coreController) {\r\n            this._coreController.takeDamage(1, 'Ball lost');\r\n        }\r\n        \r\n        if (this.lives <= 0) {\r\n            this.setState(GameState.GAME_OVER);\r\n        } else {\r\n            this.resetBall();\r\n        }\r\n    }\r\n    \r\n    public onCoreAttacked(damage: number): void {\r\n        console.log(`Core attacked for ${damage} damage`);\r\n        \r\n        if (this._coreController) {\r\n            this._coreController.takeDamage(damage, 'External attack');\r\n        }\r\n    }\r\n    \r\n    public onCoreDestroyed(): void {\r\n        console.log('Core destroyed! Immediate game over!');\r\n        this.lives = 0;\r\n        this.setState(GameState.GAME_OVER);\r\n    }\r\n    \r\n    public onBossDefeated(scoreValue: number): void {\r\n        console.log(`Boss defeated! Awarded ${scoreValue} points`);\r\n        this.score += scoreValue;\r\n        \r\n        // Boss defeat triggers level completion\r\n        this.onLevelComplete();\r\n    }\r\n    \r\n    private dropExperienceOrb(position: Vec3): void {\r\n        if (!this.experienceOrbPrefab) return;\r\n        \r\n        const orbNode = instantiate(this.experienceOrbPrefab);\r\n        orbNode.setPosition(position);\r\n        this.node.addChild(orbNode);\r\n        console.log('Experience orb dropped');\r\n    }\r\n\r\n    private resetBall(): void {\r\n        if (this._ballNode) {\r\n            const ballScript = this._ballNode.getComponent('Ball');\r\n            if (ballScript) {\r\n                (ballScript as any).resetBall();\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkLevelComplete(): void {\r\n        const levelType = this._levelManager ? this._levelManager.getCurrentLevelType() : LevelType.NORMAL;\r\n        \r\n        if (levelType === LevelType.BOSS) {\r\n            // Boss levels complete when boss is defeated (handled in onBossDefeated)\r\n            return;\r\n        }\r\n        \r\n        this.onLevelComplete();\r\n    }\r\n\r\n    public onLevelComplete(): void {\r\n        this.setState(GameState.LEVEL_COMPLETE);\r\n        this.level++;\r\n        \r\n        const relicManager = RelicManager.getInstance();\r\n        if (relicManager) {\r\n            relicManager.grantRandomRelic();\r\n        }\r\n        \r\n        // Reset level manager for next level\r\n        if (this._levelManager) {\r\n            this._levelManager.resetLevel();\r\n            this._levelManager.adjustDifficulty(this.level);\r\n        }\r\n        \r\n        this.scheduleOnce(() => {\r\n            this.setupLevel();\r\n            this.setState(GameState.PLAYING);\r\n        }, 3.0);\r\n    }\r\n\r\n    public setState(newState: GameState): void {\n        try {\n            if (!newState || typeof newState !== 'string') {\n                console.warn('Invalid game state:', newState);\n                return;\n            }\n\n            const validStates = Object.values(GameState);\n            if (!validStates.includes(newState as GameState)) {\n                console.warn('Unknown game state:', newState);\n                return;\n            }\n\n            const oldState = this._currentState;\n            this._currentState = newState;\n            \n            console.log(`Game State Changed: ${oldState} -> ${newState}`);\n            \n            // Handle state-specific logic\n            this.onStateChanged(oldState, newState);\n            \n        } catch (error) {\n            console.error('Error setting game state:', error);\n        }\n    }\n\n    private onStateChanged(oldState: GameState, newState: GameState): void {\n        try {\n            switch (newState) {\n                case GameState.GAME_OVER:\n                    this.handleGameOver();\n                    break;\n                case GameState.LEVEL_COMPLETE:\n                    this.handleLevelComplete();\n                    break;\n                case GameState.PLAYING:\n                    this.handleGamePlaying();\n                    break;\n            }\n        } catch (error) {\n            console.warn('Error in state change handler:', error);\n        }\n    }\n\n    private handleGameOver(): void {\n        console.log('Game Over - cleaning up resources');\n        // Stop any ongoing animations or sounds\n        // Save final score if needed\n    }\n\n    private handleLevelComplete(): void {\n        console.log('Level Complete - preparing next level');\n        // Award experience, update progression\n    }\n\n    private handleGamePlaying(): void {\n        console.log('Game Playing - all systems active');\n        // Ensure all game systems are ready\n    }\r\n\r\n    public getCurrentState(): GameState {\r\n        return this._currentState;\r\n    }\r\n\r\n    public getBallPrefab(): Prefab | null {\r\n        return this.ballPrefab;\r\n    }\r\n\r\n    public getScore(): number {\r\n        return this.score;\r\n    }\r\n\r\n    public getLives(): number {\r\n        return this.lives;\r\n    }\r\n\r\n    public getLevel(): number {\r\n        return this.level;\r\n    }\r\n}"]}