{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/gameplay/GameManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Vec3","director","Color","Sprite","PhysicsSystem2D","RelicManager","CoreController","Ball","ccclass","property","GameState","GameManager","_currentState","PRE_START","_bricks","_ballNode","_paddleNode","_coreController","_levelManager","getInstance","_instance","onLoad","addPersistRootNode","node","destroy","onDestroy","start","initializeGame","initializeCore","setState","instance","debugDrawFlags","console","log","createBoundaryWalls","createPaddle","scheduleOnce","createBallBasedOnPaddle","setupLevel","PLAYING","coreNode","getComponent","warn","paddlePrefab","setPosition","canvas","parent","addChild","error","ballPrefab","paddlePos","position","x","y","z","ballPos","ballScript","setPaddleReference","createBall","wallPrefab","parentNode","leftWall","setScale","leftSprite","color","rightWall","rightSprite","topWall","topSprite","bottomWall","bottomSprite","launchBall","launch","clearBricks","layout","getLevelLayout","level","createBricksFromLayout","basicLayout","row","length","col","Math","random","brickPrefab","brickContainer","wallInnerBoundary","actualBrickWidth","actualBrickHeight","spacing","cols","totalBrickArea","finalCols","finalLayout","map","slice","finalTotalWidth","startX","startY","toFixed","brickType","brick","brickScript","enhancedBrickType","getBrickTypeFromValue","undefined","initializeBrickType","setHealth","setDropsExperience","push","layoutValue","BrickType","NORMAL","REINFORCED","EXPLOSIVE","ELECTRIC","EXPERIENCE","REGENERATING","PHASE","MAGNETIC","REFLECTIVE","POISON","ICE","FIRE","SPLITTING","TELEPORT","SHIELD","GRAVITY","TIME","HEALING","CURSED","CRYSTAL","RUBBER","METAL","VOID","LIGHT","DARK","totalPositions","levelDifficulty","rareTypes","typeIndex","earlySpecial","forEach","isValid","onBrickDestroyed","scoreValue","brickPosition","dropsExperience","score","powerUpDropChance","dropPowerUp","dropExperienceOrb","filter","checkLevelComplete","powerUps","multiBallPowerUpPrefab","laserPaddlePowerUpPrefab","availablePowerUps","prefab","randomPowerUp","floor","powerUpNode","onBallLost","lives","takeDamage","GAME_OVER","resetBall","onCoreAttacked","damage","onCoreDestroyed","onBossDefeated","onLevelComplete","experienceOrbPrefab","orbNode","LEVEL_COMPLETE","relicManager","grantRandomRelic","resetLevel","adjustDifficulty","newState","validStates","Object","values","includes","oldState","onStateChanged","_oldState","handleGameOver","handleLevelComplete","handleGamePlaying","getCurrentState","getBallPrefab","getScore","getLives","getLevel","getBrickCount","getBricks","getBallNode","getPaddleNode","getCoreController","getLevelManager","getGameState","addScore","points","decreaseLives","amount","max"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,e,OAAAA,e;;AACjFC,MAAAA,Y,iBAAAA,Y;;AAEAC,MAAAA,c,iBAAAA,c;;AACAC,MAAAA,I,iBAAAA,I;;;;;;;;;AACT;OACM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBd,U;;2BAElBe,S,0BAAAA,S;AAAAA,QAAAA,S;AAAAA,QAAAA,S;AAAAA,QAAAA,S;AAAAA,QAAAA,S;eAAAA,S;;;6BAQCC,W,WADZH,OAAO,CAAC,aAAD,C,UAEHC,QAAQ,CAACX,MAAD,C,UAGRW,QAAQ,CAACX,MAAD,C,UAGRW,QAAQ,CAACX,MAAD,C,UAGRW,QAAQ,CAACX,MAAD,C,UAGRW,QAAQ,CAACX,MAAD,C,UAGRW,QAAQ,CAACX,MAAD,C,UAGRW,QAAQ,CAACX,MAAD,C,UAMRW,QAAQ,CAACZ,IAAD,C,WAGRY,QAAQ,CAACZ,IAAD,C,WAGRY,QAAQ,CAACX,MAAD,C,sCAhCb,MACaa,WADb,SACiCf,SADjC,CAC2C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eA4C/BgB,aA5C+B,GA4CJF,SAAS,CAACG,SA5CN;AAAA,eA6C/BC,OA7C+B,GA6Cb,EA7Ca;AAAA,eA8C/BC,SA9C+B,GA8CN,IA9CM;AAAA,eA+C/BC,WA/C+B,GA+CJ,IA/CI;AAAA,eAgD/BC,eAhD+B,GAgDU,IAhDV;AAAA,eAiD/BC,aAjD+B,GAiDM,IAjDN;AAAA;;AAmDd,eAAXC,WAAW,GAAuB;AAC5C,iBAAOR,WAAW,CAACS,SAAnB;AACH;;AAESC,QAAAA,MAAM,GAAS;AACrB,cAAIV,WAAW,CAACS,SAAZ,KAA0B,IAA9B,EAAoC;AAChCT,YAAAA,WAAW,CAACS,SAAZ,GAAwB,IAAxB;AACAnB,YAAAA,QAAQ,CAACqB,kBAAT,CAA4B,KAAKC,IAAjC;AACH,WAHD,MAGO;AACH,iBAAKA,IAAL,CAAUC,OAAV;AACA;AACH;AACJ;;AAESC,QAAAA,SAAS,GAAS;AACxB,cAAId,WAAW,CAACS,SAAZ,KAA0B,IAA9B,EAAoC;AAChCT,YAAAA,WAAW,CAACS,SAAZ,GAAwB,IAAxB;AACH;AACJ;;AAESM,QAAAA,KAAK,GAAS;AACpB,eAAKC,cAAL;AACA,eAAKC,cAAL,GAFoB,CAGpB;AACH;;AAEOD,QAAAA,cAAc,GAAS;AAC3B,eAAKE,QAAL,CAAcnB,SAAS,CAACG,SAAxB,EAD2B,CAG3B;;AACAT,UAAAA,eAAe,CAAC0B,QAAhB,CAAyBC,cAAzB,GAA0C,CAA1C,CAJ2B,CAIkB;;AAC7CC,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AAEA,eAAKC,mBAAL;AACA,eAAKC,YAAL,GAR2B,CAU3B;;AACA,eAAKC,YAAL,CAAkB,MAAM;AACpB,iBAAKC,uBAAL;AACH,WAFD,EAEG,GAFH;AAIA,eAAKC,UAAL,GAf2B,CAgB3B;AAEA;;AACA,eAAKT,QAAL,CAAcnB,SAAS,CAAC6B,OAAxB;AACH;;AAEOX,QAAAA,cAAc,GAAS;AAC3B,cAAI,KAAKY,QAAT,EAAmB;AACf,iBAAKvB,eAAL,GAAuB,KAAKuB,QAAL,CAAcC,YAAd;AAAA;AAAA,iDAAvB;;AACA,gBAAI,CAAC,KAAKxB,eAAV,EAA2B;AACvBe,cAAAA,OAAO,CAACU,IAAR,CAAa,sCAAb;AACH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEYP,QAAAA,YAAY,GAAS;AACzB,cAAI;AACA,gBAAI,CAAC,KAAKQ,YAAV,EAAwB;AACpBX,cAAAA,OAAO,CAACU,IAAR,CAAa,uDAAb;AACA;AACH;;AAED,iBAAK1B,WAAL,GAAmBjB,WAAW,CAAC,KAAK4C,YAAN,CAA9B;;AACA,gBAAI,KAAK3B,WAAT,EAAsB;AAClB,mBAAKA,WAAL,CAAiB4B,WAAjB,CAA6B,CAA7B,EAAgC,CAAC,GAAjC,EAAsC,CAAtC,EADkB,CAElB;;;AACA,kBAAMC,MAAM,GAAG,KAAKtB,IAAL,CAAUuB,MAAzB;;AACA,kBAAID,MAAJ,EAAY;AACRA,gBAAAA,MAAM,CAACE,QAAP,CAAgB,KAAK/B,WAArB;AACAgB,gBAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AACH,eAHD,MAGO;AACH,qBAAKV,IAAL,CAAUwB,QAAV,CAAmB,KAAK/B,WAAxB;AACAgB,gBAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ;AACH;AACJ,aAXD,MAWO;AACHD,cAAAA,OAAO,CAACgB,KAAR,CAAc,qCAAd;AACH;AAEJ,WAtBD,CAsBE,OAAOA,KAAP,EAAc;AACZhB,YAAAA,OAAO,CAACgB,KAAR,CAAc,wBAAd,EAAwCA,KAAxC;AACH;AACJ;;AAEOX,QAAAA,uBAAuB,GAAS;AACpC,cAAI;AACA,gBAAI,CAAC,KAAKY,UAAV,EAAsB;AAClBjB,cAAAA,OAAO,CAACU,IAAR,CAAa,mDAAb;AACA;AACH;;AAED,gBAAI,CAAC,KAAK1B,WAAV,EAAuB;AACnBgB,cAAAA,OAAO,CAACgB,KAAR,CAAc,uCAAd;AACA;AACH,aATD,CAWA;;;AACA,gBAAME,SAAS,GAAG,KAAKlC,WAAL,CAAiBmC,QAAnC;AACAnB,YAAAA,OAAO,CAACC,GAAR,+BAAwCiB,SAAS,CAACE,CAAlD,UAAwDF,SAAS,CAACG,CAAlE,UAAwEH,SAAS,CAACI,CAAlF;AAEA,iBAAKvC,SAAL,GAAiBhB,WAAW,CAAC,KAAKkD,UAAN,CAA5B;;AACA,gBAAI,KAAKlC,SAAT,EAAoB;AAChB;AACA,kBAAMwC,OAAO,GAAG,IAAIvD,IAAJ,CAASkD,SAAS,CAACE,CAAnB,EAAsBF,SAAS,CAACG,CAAV,GAAc,EAApC,EAAwCH,SAAS,CAACI,CAAlD,CAAhB;;AACA,mBAAKvC,SAAL,CAAe6B,WAAf,CAA2BW,OAA3B;;AAEAvB,cAAAA,OAAO,CAACC,GAAR,2BAAoCsB,OAAO,CAACH,CAA5C,UAAkDG,OAAO,CAACF,CAA1D,UAAgEE,OAAO,CAACD,CAAxE,QALgB,CAOhB;;AACA,kBAAMT,MAAM,GAAG,KAAKtB,IAAL,CAAUuB,MAAzB;;AACA,kBAAID,MAAJ,EAAY;AACRA,gBAAAA,MAAM,CAACE,QAAP,CAAgB,KAAKhC,SAArB;AACAiB,gBAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACH,eAHD,MAGO;AACH,qBAAKV,IAAL,CAAUwB,QAAV,CAAmB,KAAKhC,SAAxB;AACAiB,gBAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACH,eAfe,CAiBhB;;;AACA,kBAAMuB,UAAU,GAAG,KAAKzC,SAAL,CAAe0B,YAAf,CAA4B,MAA5B,CAAnB;;AACA,kBAAIe,UAAU,IAAI,OAAQA,UAAD,CAAoBC,kBAA3B,KAAkD,UAApE,EAAgF;AAC3ED,gBAAAA,UAAD,CAAoBC,kBAApB,CAAuC,KAAKzC,WAA5C;AACH;AACJ,aAtBD,MAsBO;AACHgB,cAAAA,OAAO,CAACgB,KAAR,CAAc,mCAAd;AACH;AAEJ,WA1CD,CA0CE,OAAOA,KAAP,EAAc;AACZhB,YAAAA,OAAO,CAACgB,KAAR,CAAc,sCAAd,EAAsDA,KAAtD;AACH;AACJ;;AAEOU,QAAAA,UAAU,GAAS;AACvB,cAAI;AACA,gBAAI,CAAC,KAAKT,UAAV,EAAsB;AAClBjB,cAAAA,OAAO,CAACU,IAAR,CAAa,mDAAb;AACA;AACH;;AAED,iBAAK3B,SAAL,GAAiBhB,WAAW,CAAC,KAAKkD,UAAN,CAA5B;;AACA,gBAAI,KAAKlC,SAAT,EAAoB;AAChB,mBAAKA,SAAL,CAAe6B,WAAf,CAA2B,CAA3B,EAA8B,CAAC,GAA/B,EAAoC,CAApC,EADgB,CACwB;AACxC;;;AACA,kBAAMC,MAAM,GAAG,KAAKtB,IAAL,CAAUuB,MAAzB;;AACA,kBAAID,MAAJ,EAAY;AACRA,gBAAAA,MAAM,CAACE,QAAP,CAAgB,KAAKhC,SAArB;AACAiB,gBAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACH,eAHD,MAGO;AACH,qBAAKV,IAAL,CAAUwB,QAAV,CAAmB,KAAKhC,SAAxB;AACAiB,gBAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACH;AACJ,aAXD,MAWO;AACHD,cAAAA,OAAO,CAACgB,KAAR,CAAc,mCAAd;AACH;AAEJ,WAtBD,CAsBE,OAAOA,KAAP,EAAc;AACZhB,YAAAA,OAAO,CAACgB,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;AACH;AACJ;;AAEOd,QAAAA,mBAAmB,GAAS;AAChC,cAAI;AACA,gBAAI,CAAC,KAAKyB,UAAV,EAAsB;AAClB3B,cAAAA,OAAO,CAACU,IAAR,CAAa,uDAAb;AACA;AACH,aAJD,CAMA;;;AACA,gBAAMG,MAAM,GAAG,KAAKtB,IAAL,CAAUuB,MAAzB;AACA,gBAAMc,UAAU,GAAGf,MAAM,IAAI,KAAKtB,IAAlC,CARA,CAUA;;AACA,gBAAMsC,QAAQ,GAAG9D,WAAW,CAAC,KAAK4D,UAAN,CAA5B;AACAE,YAAAA,QAAQ,CAACjB,WAAT,CAAqB,CAAC,GAAtB,EAA2B,CAA3B,EAA8B,CAA9B,EAZA,CAYkC;;AAClCiB,YAAAA,QAAQ,CAACC,QAAT,CAAkB,CAAlB,EAAqB,EAArB,EAAyB,CAAzB,EAbA,CAa6B;;AAC7B,gBAAMC,UAAU,GAAGF,QAAQ,CAACpB,YAAT,CAAsBtC,MAAtB,CAAnB;;AACA,gBAAI4D,UAAJ,EAAgB;AACZA,cAAAA,UAAU,CAACC,KAAX,GAAmB,IAAI9D,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkB,CAAlB,EAAqB,GAArB,CAAnB;AACH;;AACD0D,YAAAA,UAAU,CAACb,QAAX,CAAoBc,QAApB,EAlBA,CAoBA;;AACA,gBAAMI,SAAS,GAAGlE,WAAW,CAAC,KAAK4D,UAAN,CAA7B;AACAM,YAAAA,SAAS,CAACrB,WAAV,CAAsB,GAAtB,EAA2B,CAA3B,EAA8B,CAA9B,EAtBA,CAsBkC;;AAClCqB,YAAAA,SAAS,CAACH,QAAV,CAAmB,CAAnB,EAAsB,EAAtB,EAA0B,CAA1B;AACA,gBAAMI,WAAW,GAAGD,SAAS,CAACxB,YAAV,CAAuBtC,MAAvB,CAApB;;AACA,gBAAI+D,WAAJ,EAAiB;AACbA,cAAAA,WAAW,CAACF,KAAZ,GAAoB,IAAI9D,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkB,CAAlB,EAAqB,GAArB,CAApB;AACH;;AACD0D,YAAAA,UAAU,CAACb,QAAX,CAAoBkB,SAApB,EA5BA,CA8BA;;AACA,gBAAME,OAAO,GAAGpE,WAAW,CAAC,KAAK4D,UAAN,CAA3B;AACAQ,YAAAA,OAAO,CAACvB,WAAR,CAAoB,CAApB,EAAuB,GAAvB,EAA4B,CAA5B,EAhCA,CAgCgC;;AAChCuB,YAAAA,OAAO,CAACL,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAjCA,CAiC2B;;AAC3B,gBAAMM,SAAS,GAAGD,OAAO,CAAC1B,YAAR,CAAqBtC,MAArB,CAAlB;;AACA,gBAAIiE,SAAJ,EAAe;AACXA,cAAAA,SAAS,CAACJ,KAAV,GAAkB,IAAI9D,KAAJ,CAAU,CAAV,EAAa,GAAb,EAAkB,CAAlB,EAAqB,GAArB,CAAlB;AACH;;AACD0D,YAAAA,UAAU,CAACb,QAAX,CAAoBoB,OAApB,EAtCA,CAwCA;;AACA,gBAAME,UAAU,GAAGtE,WAAW,CAAC,KAAK4D,UAAN,CAA9B;AACAU,YAAAA,UAAU,CAACzB,WAAX,CAAuB,CAAvB,EAA0B,CAAC,GAA3B,EAAgC,CAAhC,EA1CA,CA0CoC;;AACpCyB,YAAAA,UAAU,CAACP,QAAX,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACA,gBAAMQ,YAAY,GAAGD,UAAU,CAAC5B,YAAX,CAAwBtC,MAAxB,CAArB;;AACA,gBAAImE,YAAJ,EAAkB;AACdA,cAAAA,YAAY,CAACN,KAAb,GAAqB,IAAI9D,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,GAAhB,EAAqB,GAArB,CAArB;AACH;;AACD0D,YAAAA,UAAU,CAACb,QAAX,CAAoBsB,UAApB;AAEArC,YAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACH,WAnDD,CAmDE,OAAOe,KAAP,EAAc;AACZhB,YAAAA,OAAO,CAACgB,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEYuB,QAAAA,UAAU,GAAS;AACvB,cAAI,KAAKxD,SAAT,EAAoB;AAChB,gBAAMyC,UAAU,GAAG,KAAKzC,SAAL,CAAe0B,YAAf;AAAA;AAAA,6BAAnB;;AACA,gBAAIe,UAAU,IAAI,OAAOA,UAAU,CAACgB,MAAlB,KAA6B,UAA/C,EAA2D;AACvDhB,cAAAA,UAAU,CAACgB,MAAX;AACAxC,cAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACH,aAHD,MAGO;AACHD,cAAAA,OAAO,CAACU,IAAR,CAAa,sDAAb;AACH;AACJ,WARD,MAQO;AACHV,YAAAA,OAAO,CAACU,IAAR,CAAa,oCAAb;AACH;AACJ;;AAEOJ,QAAAA,UAAU,GAAS;AACvBN,UAAAA,OAAO,CAACC,GAAR,CAAY,oEAAZ,EADuB,CAEvB;;AACA,eAAKwC,WAAL,GAHuB,CAKvB;;AACA,cAAMC,MAAM,GAAG,KAAKC,cAAL,CAAoB,KAAKC,KAAzB,CAAf;AACA,eAAKC,sBAAL,CAA4BH,MAA5B;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACK;;AAEOC,QAAAA,cAAc,CAACC,KAAD,EAA4B;AAC9C;AACA,cAAME,WAAW,GAAG,CAChB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,CADgB,EAEhB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,CAFgB,EAGhB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,CAHgB,EAIhB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,CAJgB,EAKhB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,CALgB,EAMhB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,CANgB,CAApB;;AASA,cAAIF,KAAK,GAAG,CAAZ,EAAe;AACX,iBAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGD,WAAW,CAACE,MAApC,EAA4CD,GAAG,EAA/C,EAAmD;AAC/C,mBAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,WAAW,CAACC,GAAD,CAAX,CAAiBC,MAAzC,EAAiDC,GAAG,EAApD,EAAwD;AACpD,oBAAIC,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrBL,kBAAAA,WAAW,CAACC,GAAD,CAAX,CAAiBE,GAAjB,IAAwB,CAAxB;AACH;AACJ;AACJ;AACJ;;AAED,iBAAOH,WAAP;AACH;;AAEOD,QAAAA,sBAAsB,CAACH,MAAD,EAA2B;AACrD,cAAI,CAAC,KAAKU,WAAN,IAAqB,CAAC,KAAKC,cAA/B,EAA+C,OADM,CAGrD;;AACA,cAAMC,iBAAiB,GAAG,GAA1B,CAJqD,CAItB;;AAC/B,cAAMC,gBAAgB,GAAG,KAAK,KAA9B,CALqD,CAKf;;AACtC,cAAMC,iBAAiB,GAAG,KAAK,KAA/B,CANqD,CAMf;;AACtC,cAAMC,OAAO,GAAG,CAAhB,CAPqD,CAOjC;;AAEpB,cAAMC,IAAI,GAAGhB,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,CAAUM,MAAtB,GAA+B,CAA5C;AACA,cAAMW,cAAc,GAAGD,IAAI,GAAGH,gBAAP,GAA0B,CAACG,IAAI,GAAG,CAAR,IAAaD,OAA9D,CAVqD,CAYrD;;AACA,cAAIG,SAAS,GAAGF,IAAhB;AACA,cAAIG,WAAW,GAAGnB,MAAlB;;AAEA,cAAIiB,cAAc,GAAGL,iBAAiB,GAAG,CAAzC,EAA4C;AACxCtD,YAAAA,OAAO,CAACC,GAAR,2BAAqB0D,cAArB;AACAC,YAAAA,SAAS,GAAG,EAAZ;AACAC,YAAAA,WAAW,GAAGnB,MAAM,CAACoB,GAAP,CAAWf,GAAG,IAAIA,GAAG,CAACgB,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAlB,CAAd,CAHwC,CAGW;AACtD;;AAED,cAAMC,eAAe,GAAGJ,SAAS,GAAGL,gBAAZ,GAA+B,CAACK,SAAS,GAAG,CAAb,IAAkBH,OAAzE;AACA,cAAMQ,MAAM,GAAG,CAACD,eAAD,GAAmB,CAAnB,GAAuBT,gBAAgB,GAAG,CAAzD;AACA,cAAMW,MAAM,GAAG,GAAf;AAEAlE,UAAAA,OAAO,CAACC,GAAR,eAAwB4D,WAAW,CAACb,MAApC,SAA8CY,SAA9C,kCAAoFI,eAAe,CAACG,OAAhB,CAAwB,CAAxB,CAApF,6BAAmIb,iBAAnI;;AAEA,eAAK,IAAIP,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGc,WAAW,CAACb,MAApC,EAA4CD,GAAG,EAA/C,EAAmD;AAC/C,iBAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGW,SAAxB,EAAmCX,GAAG,EAAtC,EAA0C;AACtC,kBAAMmB,SAAS,GAAGP,WAAW,CAACd,GAAD,CAAX,CAAiBE,GAAjB,CAAlB;AACA,kBAAImB,SAAS,KAAK,CAAlB,EAAqB;AAErB,kBAAMC,KAAK,GAAGtG,WAAW,CAAC,KAAKqF,WAAN,CAAzB;AACA,kBAAMhC,CAAC,GAAG6C,MAAM,GAAGhB,GAAG,IAAIM,gBAAgB,GAAGE,OAAvB,CAAtB;AACA,kBAAMpC,CAAC,GAAG6C,MAAM,GAAGnB,GAAG,IAAIS,iBAAiB,GAAGC,OAAxB,CAAtB;AAEAY,cAAAA,KAAK,CAACzD,WAAN,CAAkBQ,CAAlB,EAAqBC,CAArB,EAAwB,CAAxB,EARsC,CAUtC;;AACAgD,cAAAA,KAAK,CAACvC,QAAN,CAAe,KAAf,EAAsB,KAAtB,EAA6B,CAA7B,EAXsC,CAatC;;AACA,kBAAMwC,WAAW,GAAGD,KAAK,CAAC5D,YAAN,CAAmB,eAAnB,KAAuC4D,KAAK,CAAC5D,YAAN,CAAmB,OAAnB,CAA3D;;AACA,kBAAI6D,WAAJ,EAAiB;AACb;AACA,oBAAMC,iBAAiB,GAAG,KAAKC,qBAAL,CAA2BJ,SAA3B,EAAsCrB,GAAtC,EAA2CE,GAA3C,CAA1B;;AAEA,oBAAKqB,WAAD,CAAqBF,SAArB,KAAmCK,SAAvC,EAAkD;AAC9C;AACCH,kBAAAA,WAAD,CAAqBF,SAArB,GAAiCG,iBAAjC,CAF8C,CAG9C;;AACA,sBAAKD,WAAD,CAAqBI,mBAAzB,EAA8C;AACzCJ,oBAAAA,WAAD,CAAqBI,mBAArB;AACH;AACJ,iBAPD,MAOO;AACH;AACCJ,kBAAAA,WAAD,CAAqBK,SAArB,CAA+BP,SAA/B;AACH,iBAdY,CAgBb;;;AACA,oBAAIlB,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AAAE;AACtBmB,kBAAAA,WAAD,CAAqBM,kBAArB,IAA4CN,WAAD,CAAqBM,kBAArB,CAAwC,IAAxC,CAA3C;AACH;AACJ;;AAED,mBAAKvB,cAAL,CAAoBtC,QAApB,CAA6BsD,KAA7B;;AACA,mBAAKvF,OAAL,CAAa+F,IAAb,CAAkBR,KAAlB;AACH;AACJ;;AAEDrE,UAAAA,OAAO,CAACC,GAAR,cAAuB,KAAKnB,OAAL,CAAakE,MAApC;AACH;AAED;AACJ;AACA;AACA;;;AACYwB,QAAAA,qBAAqB,CAACM,WAAD,EAAsB/B,GAAtB,EAAmCE,GAAnC,EAAwD;AACjF;AACA,cAAM8B,SAAS,GAAG;AACdC,YAAAA,MAAM,EAAE,CADM;AACHC,YAAAA,UAAU,EAAE,CADT;AACYC,YAAAA,SAAS,EAAE,CADvB;AAC0BC,YAAAA,QAAQ,EAAE,CADpC;AACuCC,YAAAA,UAAU,EAAE,CADnD;AAEdC,YAAAA,YAAY,EAAE,CAFA;AAEGC,YAAAA,KAAK,EAAE,CAFV;AAEaC,YAAAA,QAAQ,EAAE,CAFvB;AAE0BC,YAAAA,UAAU,EAAE,CAFtC;AAEyCC,YAAAA,MAAM,EAAE,CAFjD;AAGdC,YAAAA,GAAG,EAAE,EAHS;AAGLC,YAAAA,IAAI,EAAE,EAHD;AAGKC,YAAAA,SAAS,EAAE,EAHhB;AAGoBC,YAAAA,QAAQ,EAAE,EAH9B;AAGkCC,YAAAA,MAAM,EAAE,EAH1C;AAIdC,YAAAA,OAAO,EAAE,EAJK;AAIDC,YAAAA,IAAI,EAAE,EAJL;AAISC,YAAAA,OAAO,EAAE,EAJlB;AAIsBC,YAAAA,MAAM,EAAE,EAJ9B;AAIkCC,YAAAA,OAAO,EAAE,EAJ3C;AAKdC,YAAAA,MAAM,EAAE,EALM;AAKFC,YAAAA,KAAK,EAAE,EALL;AAKSC,YAAAA,IAAI,EAAE,EALf;AAKmBC,YAAAA,KAAK,EAAE,EAL1B;AAK8BC,YAAAA,IAAI,EAAE;AALpC,WAAlB,CAFiF,CAUjF;;AACA,cAAMC,cAAc,GAAI1D,GAAG,GAAG,CAAN,GAAUE,GAAlC,CAXiF,CAWzC;;AACxC,cAAMyD,eAAe,GAAG,KAAK9D,KAA7B,CAZiF,CAcjF;;AACA,cAAIkC,WAAW,KAAK,CAApB,EAAuB;AACnB;AACA,oBAAQ/B,GAAR;AACI,mBAAK,CAAL;AAAQ;AACJ,oBAAIE,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB,OAAO8B,SAAS,CAACe,MAAjB;AACnB,oBAAI7C,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB,OAAO8B,SAAS,CAACE,UAAjB;AACnB,uBAAOF,SAAS,CAACC,MAAjB;;AAEJ,mBAAK,CAAL;AAAQ;AACJ,oBAAI/B,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB,OAAO8B,SAAS,CAACG,SAAjB;AACnB,oBAAIjC,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB,OAAO8B,SAAS,CAACI,QAAjB;AACnB,oBAAIlC,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB,OAAO8B,SAAS,CAACK,UAAjB;AACnB,uBAAOL,SAAS,CAACC,MAAjB;;AAEJ,mBAAK,CAAL;AAAQ;AACJ,oBAAI/B,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB,OAAO8B,SAAS,CAACY,IAAjB;AACnB,oBAAI1C,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB,OAAO8B,SAAS,CAACW,GAAjB;AACnB,oBAAIzC,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB,OAAO8B,SAAS,CAACU,MAAjB;AACnB,uBAAOV,SAAS,CAACC,MAAjB;;AAEJ;AAAS;AACL,oBAAI/B,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,CAAzB,EAA4B,OAAO8B,SAAS,CAACkB,OAAjB,CADhC,CAC0D;;AACtD,oBAAIQ,cAAc,GAAG,EAAjB,KAAwB,CAA5B,EAA+B,OAAO1B,SAAS,CAACc,QAAjB;AAC/B,oBAAIY,cAAc,GAAG,EAAjB,KAAwB,CAA5B,EAA+B,OAAO1B,SAAS,CAACoB,OAAjB;AAC/B,uBAAOpB,SAAS,CAACC,MAAjB;AAtBR;AAwBH,WAzCgF,CA2CjF;;;AACA,cAAIF,WAAW,KAAK,CAApB,EAAuB;AACnB,gBAAM6B,SAAS,GAAG,CACd5B,SAAS,CAACgB,OADI,EACKhB,SAAS,CAACiB,IADf,EACqBjB,SAAS,CAACuB,IAD/B,EAEdvB,SAAS,CAACsB,KAFI,EAEGtB,SAAS,CAACO,KAFb,EAEoBP,SAAS,CAACQ,QAF9B,CAAlB,CADmB,CAMnB;;AACA,gBAAImB,eAAe,GAAG,CAAtB,EAAyB;AACrB,kBAAME,SAAS,GAAG,CAACH,cAAc,GAAGC,eAAlB,IAAqCC,SAAS,CAAC3D,MAAjE;AACA,qBAAO2D,SAAS,CAACC,SAAD,CAAhB;AACH,aAHD,MAGO;AACH;AACA,kBAAMC,YAAY,GAAG,CAAC9B,SAAS,CAACE,UAAX,EAAuBF,SAAS,CAACK,UAAjC,EAA6CL,SAAS,CAACkB,OAAvD,CAArB;AACA,qBAAOY,YAAY,CAACJ,cAAc,GAAGI,YAAY,CAAC7D,MAA/B,CAAnB;AACH;AACJ;;AAED,iBAAO+B,SAAS,CAACC,MAAjB;AACH;;AAEOvC,QAAAA,WAAW,GAAS;AACxB,eAAK3D,OAAL,CAAagI,OAAb,CAAqBzC,KAAK,IAAI;AAC1B,gBAAIA,KAAK,IAAIA,KAAK,CAAC0C,OAAnB,EAA4B;AACxB1C,cAAAA,KAAK,CAAC7E,OAAN;AACH;AACJ,WAJD;;AAKA,eAAKV,OAAL,GAAe,EAAf;AACH;;AAEMkI,QAAAA,gBAAgB,CAACC,UAAD,EAA0BC,aAA1B,EAAgDC,eAAhD,EAAwF;AAAA,cAAvFF,UAAuF;AAAvFA,YAAAA,UAAuF,GAAlE,EAAkE;AAAA;;AAAA,cAAxCE,eAAwC;AAAxCA,YAAAA,eAAwC,GAAb,KAAa;AAAA;;AAC3G,eAAKC,KAAL,IAAcH,UAAd;;AAEA,cAAIC,aAAJ,EAAmB;AACf;AACA,gBAAIhE,IAAI,CAACC,MAAL,KAAgB,KAAKkE,iBAAzB,EAA4C;AACxC,mBAAKC,WAAL,CAAiBJ,aAAjB;AACH,aAJc,CAMf;;;AACA,gBAAIC,eAAJ,EAAqB;AACjB,mBAAKI,iBAAL,CAAuBL,aAAvB;AACH;AACJ;;AAED,eAAKpI,OAAL,GAAe,KAAKA,OAAL,CAAa0I,MAAb,CAAoBnD,KAAK,IAAIA,KAAK,IAAIA,KAAK,CAAC0C,OAA5C,CAAf;;AAEA,cAAI,KAAKjI,OAAL,CAAakE,MAAb,KAAwB,CAA5B,EAA+B;AAC3B,iBAAKyE,kBAAL;AACH;AACJ;;AAEOH,QAAAA,WAAW,CAACnG,QAAD,EAAuB;AACtC,cAAMuG,QAAQ,GAAG,CAAC,KAAKC,sBAAN,EAA8B,KAAKC,wBAAnC,CAAjB;AACA,cAAMC,iBAAiB,GAAGH,QAAQ,CAACF,MAAT,CAAgBM,MAAM,IAAIA,MAAM,KAAK,IAArC,CAA1B;AAEA,cAAID,iBAAiB,CAAC7E,MAAlB,KAA6B,CAAjC,EAAoC;AAEpC,cAAM+E,aAAa,GAAGF,iBAAiB,CAAC3E,IAAI,CAAC8E,KAAL,CAAW9E,IAAI,CAACC,MAAL,KAAgB0E,iBAAiB,CAAC7E,MAA7C,CAAD,CAAvC;;AACA,cAAI+E,aAAJ,EAAmB;AACf,gBAAME,WAAW,GAAGlK,WAAW,CAACgK,aAAD,CAA/B;AACAE,YAAAA,WAAW,CAACrH,WAAZ,CAAwBO,QAAxB,EAFe,CAIf;;AACA,gBAAMN,MAAM,GAAG,KAAKtB,IAAL,CAAUuB,MAAzB;;AACA,gBAAID,MAAJ,EAAY;AACRA,cAAAA,MAAM,CAACE,QAAP,CAAgBkH,WAAhB;AACAjI,cAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACH,aAHD,MAGO;AACH,mBAAKV,IAAL,CAAUwB,QAAV,CAAmBkH,WAAnB;AACAjI,cAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACH;AACJ;AACJ;;AAEMiI,QAAAA,UAAU,GAAS;AACtB,eAAKC,KAAL,GADsB,CAGtB;;AACA,cAAI,KAAKlJ,eAAT,EAA0B;AACtB,iBAAKA,eAAL,CAAqBmJ,UAArB,CAAgC,CAAhC,EAAmC,WAAnC;AACH;;AAED,cAAI,KAAKD,KAAL,IAAc,CAAlB,EAAqB;AACjB,iBAAKtI,QAAL,CAAcnB,SAAS,CAAC2J,SAAxB;AACH,WAFD,MAEO;AACH,iBAAKC,SAAL;AACH;AACJ;;AAEMC,QAAAA,cAAc,CAACC,MAAD,EAAuB;AACxCxI,UAAAA,OAAO,CAACC,GAAR,wBAAiCuI,MAAjC;;AAEA,cAAI,KAAKvJ,eAAT,EAA0B;AACtB,iBAAKA,eAAL,CAAqBmJ,UAArB,CAAgCI,MAAhC,EAAwC,iBAAxC;AACH;AACJ;;AAEMC,QAAAA,eAAe,GAAS;AAC3BzI,UAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACA,eAAKkI,KAAL,GAAa,CAAb;AACA,eAAKtI,QAAL,CAAcnB,SAAS,CAAC2J,SAAxB;AACH;;AAEMK,QAAAA,cAAc,CAACzB,UAAD,EAA2B;AAC5CjH,UAAAA,OAAO,CAACC,GAAR,6BAAsCgH,UAAtC;AACA,eAAKG,KAAL,IAAcH,UAAd,CAF4C,CAI5C;;AACA,eAAK0B,eAAL;AACH;;AAEOpB,QAAAA,iBAAiB,CAACpG,QAAD,EAAuB;AAC5C,cAAI,CAAC,KAAKyH,mBAAV,EAA+B;AAE/B,cAAMC,OAAO,GAAG9K,WAAW,CAAC,KAAK6K,mBAAN,CAA3B;AACAC,UAAAA,OAAO,CAACjI,WAAR,CAAoBO,QAApB;AACA,eAAK5B,IAAL,CAAUwB,QAAV,CAAmB8H,OAAnB;AACA7I,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH;;AAEOqI,QAAAA,SAAS,GAAS;AACtB,cAAI,KAAKvJ,SAAT,EAAoB;AAChB,gBAAMyC,UAAU,GAAG,KAAKzC,SAAL,CAAe0B,YAAf,CAA4B,MAA5B,CAAnB;;AACA,gBAAIe,UAAJ,EAAgB;AACXA,cAAAA,UAAD,CAAoB8G,SAApB;AACH;AACJ;AACJ;;AAEOb,QAAAA,kBAAkB,GAAS;AAC/B;AACA,eAAKkB,eAAL;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACK;;AAEMA,QAAAA,eAAe,GAAS;AAC3B,eAAK9I,QAAL,CAAcnB,SAAS,CAACoK,cAAxB;AACA,eAAKlG,KAAL;AAEA,cAAMmG,YAAY,GAAG;AAAA;AAAA,4CAAa5J,WAAb,EAArB;;AACA,cAAI4J,YAAJ,EAAkB;AACdA,YAAAA,YAAY,CAACC,gBAAb;AACH,WAP0B,CAS3B;;;AACA,cAAI,KAAK9J,aAAT,EAAwB;AACpB,iBAAKA,aAAL,CAAmB+J,UAAnB;;AACA,iBAAK/J,aAAL,CAAmBgK,gBAAnB,CAAoC,KAAKtG,KAAzC;AACH;;AAED,eAAKxC,YAAL,CAAkB,MAAM;AACpB,iBAAKE,UAAL;AACA,iBAAKT,QAAL,CAAcnB,SAAS,CAAC6B,OAAxB;AACH,WAHD,EAGG,GAHH;AAIH;;AAEMV,QAAAA,QAAQ,CAACsJ,QAAD,EAA4B;AACvC,cAAI;AACA,gBAAI,CAACA,QAAD,IAAa,OAAOA,QAAP,KAAoB,QAArC,EAA+C;AAC3CnJ,cAAAA,OAAO,CAACU,IAAR,CAAa,qBAAb,EAAoCyI,QAApC;AACA;AACH;;AAED,gBAAMC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc5K,SAAd,CAApB;;AACA,gBAAI,CAAC0K,WAAW,CAACG,QAAZ,CAAqBJ,QAArB,CAAL,EAAkD;AAC9CnJ,cAAAA,OAAO,CAACU,IAAR,CAAa,qBAAb,EAAoCyI,QAApC;AACA;AACH;;AAED,gBAAMK,QAAQ,GAAG,KAAK5K,aAAtB;AACA,iBAAKA,aAAL,GAAqBuK,QAArB;AAEAnJ,YAAAA,OAAO,CAACC,GAAR,0BAAmCuJ,QAAnC,YAAkDL,QAAlD,EAfA,CAiBA;;AACA,iBAAKM,cAAL,CAAoBD,QAApB,EAA8BL,QAA9B;AAEH,WApBD,CAoBE,OAAOnI,KAAP,EAAc;AACZhB,YAAAA,OAAO,CAACgB,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACH;AACJ;;AAEOyI,QAAAA,cAAc,CAACC,SAAD,EAAuBP,QAAvB,EAAkD;AACpE,cAAI;AACA,oBAAQA,QAAR;AACI,mBAAKzK,SAAS,CAAC2J,SAAf;AACI,qBAAKsB,cAAL;AACA;;AACJ,mBAAKjL,SAAS,CAACoK,cAAf;AACI,qBAAKc,mBAAL;AACA;;AACJ,mBAAKlL,SAAS,CAAC6B,OAAf;AACI,qBAAKsJ,iBAAL;AACA;AATR;AAWH,WAZD,CAYE,OAAO7I,KAAP,EAAc;AACZhB,YAAAA,OAAO,CAACU,IAAR,CAAa,gCAAb,EAA+CM,KAA/C;AACH;AACJ;;AAEO2I,QAAAA,cAAc,GAAS;AAC3B3J,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAD2B,CAE3B;AACA;AACH;;AAEO2J,QAAAA,mBAAmB,GAAS;AAChC5J,UAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EADgC,CAEhC;AACH;;AAEO4J,QAAAA,iBAAiB,GAAS;AAC9B7J,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAD8B,CAE9B;AACH;;AAEM6J,QAAAA,eAAe,GAAc;AAChC,iBAAO,KAAKlL,aAAZ;AACH;;AAEMmL,QAAAA,aAAa,GAAkB;AAClC,iBAAO,KAAK9I,UAAZ;AACH;;AAEM+I,QAAAA,QAAQ,GAAW;AACtB,iBAAO,KAAK5C,KAAZ;AACH;;AAEM6C,QAAAA,QAAQ,GAAW;AACtB,iBAAO,KAAK9B,KAAZ;AACH;;AAEM+B,QAAAA,QAAQ,GAAW;AACtB,iBAAO,KAAKtH,KAAZ;AACH,SAztBsC,CA2tBvC;;;AACOuH,QAAAA,aAAa,GAAW;AAC3B,iBAAO,KAAKrL,OAAL,CAAakE,MAApB;AACH;;AAEMoH,QAAAA,SAAS,GAAW;AACvB,iBAAO,KAAKtL,OAAZ;AACH;;AAEMuL,QAAAA,WAAW,GAAgB;AAC9B,iBAAO,KAAKtL,SAAZ;AACH;;AAEMuL,QAAAA,aAAa,GAAgB;AAChC,iBAAO,KAAKtL,WAAZ;AACH;;AAEMuL,QAAAA,iBAAiB,GAA0B;AAC9C,iBAAO,KAAKtL,eAAZ;AACH;;AAEMuL,QAAAA,eAAe,GAAwB;AAC1C,iBAAO,KAAKtL,aAAZ;AACH;;AAEMuL,QAAAA,YAAY,GAAc;AAC7B,iBAAO,KAAK7L,aAAZ;AACH;;AAEM8L,QAAAA,QAAQ,CAACC,MAAD,EAAuB;AAClC,eAAKvD,KAAL,IAAcuD,MAAd;AACA3K,UAAAA,OAAO,CAACC,GAAR,yBAAkC0K,MAAlC,iBAAoD,KAAKvD,KAAzD;AACH;;AAEMwD,QAAAA,aAAa,CAACC,MAAD,EAA2B;AAAA,cAA1BA,MAA0B;AAA1BA,YAAAA,MAA0B,GAAT,CAAS;AAAA;;AAC3C,eAAK1C,KAAL,GAAajF,IAAI,CAAC4H,GAAL,CAAS,CAAT,EAAY,KAAK3C,KAAL,GAAa0C,MAAzB,CAAb;AACA7K,UAAAA,OAAO,CAACC,GAAR,yBAAkC4K,MAAlC,qBAAwD,KAAK1C,KAA7D;;AAEA,cAAI,KAAKA,KAAL,IAAc,CAAlB,EAAqB;AACjB,iBAAKtI,QAAL,CAAcnB,SAAS,CAAC2J,SAAxB;AACH;AACJ;;AApwBsC,O,UA2CxBjJ,S,GAAgC,I;;;;;iBAzCX,I;;;;;;;iBAGC,I;;;;;;;iBAGF,I;;;;;;;iBAGY,I;;;;;;;iBAGE,I;;;;;;;iBAGd,I;;;;;;;iBAGK,I;;4FAEvCX,Q;;;;;iBACkC,G;;;;;;;iBAGE,I;;;;;;;iBAGN,I;;;;;;;iBAGa,I;;iFAE3CA,Q;;;;;iBACsB,C;;iFAEtBA,Q;;;;;iBACsB,C;;iFAEtBA,Q;;;;;iBACsB,C","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Vec3, director, Color, Sprite, PhysicsSystem2D } from 'cc';\r\nimport { RelicManager } from '../managers/RelicManager';\r\nimport { LevelManager, LevelType } from './LevelManager';\r\nimport { CoreController } from '../managers/CoreController';\r\nimport { Ball } from '../core/Ball';\r\n// import { RuntimeDebugPanel } from '../debug/RuntimeDebugPanel';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum GameState {\r\n    PRE_START = 'PRE_START',\r\n    PLAYING = 'PLAYING',\r\n    LEVEL_COMPLETE = 'LEVEL_COMPLETE',\r\n    GAME_OVER = 'GAME_OVER'\r\n}\r\n\r\n@ccclass('GameManager')\r\nexport class GameManager extends Component {\r\n    @property(Prefab)\r\n    public brickPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public paddlePrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public ballPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public multiBallPowerUpPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public laserPaddlePowerUpPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public wallPrefab: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    public deathZonePrefab: Prefab | null = null;\r\n\r\n    @property\r\n    public powerUpDropChance: number = 0.2;\r\n\r\n    @property(Node)\r\n    public brickContainer: Node | null = null;\r\n\r\n    @property(Node)\r\n    public coreNode: Node | null = null;\r\n\r\n    @property(Prefab)\r\n    public experienceOrbPrefab: Prefab | null = null;\r\n\r\n    @property\r\n    public lives: number = 3;\r\n\r\n    @property\r\n    public score: number = 0;\r\n\r\n    @property\r\n    public level: number = 1;\r\n\r\n    private static _instance: GameManager | null = null;\r\n    private _currentState: GameState = GameState.PRE_START;\r\n    private _bricks: Node[] = [];\r\n    private _ballNode: Node | null = null;\r\n    private _paddleNode: Node | null = null;\r\n    private _coreController: CoreController | null = null;\r\n    private _levelManager: LevelManager | null = null;\r\n\r\n    public static getInstance(): GameManager | null {\r\n        return GameManager._instance;\r\n    }\r\n\r\n    protected onLoad(): void {\r\n        if (GameManager._instance === null) {\r\n            GameManager._instance = this;\r\n            director.addPersistRootNode(this.node);\r\n        } else {\r\n            this.node.destroy();\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        if (GameManager._instance === this) {\r\n            GameManager._instance = null;\r\n        }\r\n    }\r\n\r\n    protected start(): void {\r\n        this.initializeGame();\r\n        this.initializeCore();\r\n        // this.initializeLevelManager(); // 暂时注释掉\r\n    }\r\n\r\n    private initializeGame(): void {\r\n        this.setState(GameState.PRE_START);\r\n        \r\n        // 启用物理调试显示\r\n        PhysicsSystem2D.instance.debugDrawFlags = 1; // 启用调试绘制\r\n        console.log('Physics debug draw enabled');\r\n        \r\n        this.createBoundaryWalls();\r\n        this.createPaddle();\r\n        \r\n        // 延迟创建Ball，确保Paddle完全初始化\r\n        this.scheduleOnce(() => {\r\n            this.createBallBasedOnPaddle();\r\n        }, 0.1);\r\n        \r\n        this.setupLevel();\r\n        // this.createDebugPanel(); // 暂时注释掉，先修复场景加载问题\r\n        \r\n        // Ball现在由鼠标点击控制发射，不需要自动延迟发射\r\n        this.setState(GameState.PLAYING);\r\n    }\r\n\r\n    private initializeCore(): void {\r\n        if (this.coreNode) {\r\n            this._coreController = this.coreNode.getComponent(CoreController);\r\n            if (!this._coreController) {\r\n                console.warn('CoreController not found on coreNode');\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    private initializeLevelManager(): void {\r\n        this._levelManager = LevelManager.getInstance();\r\n        if (!this._levelManager) {\r\n            console.warn('LevelManager instance not found');\r\n        }\r\n    }\r\n    */\r\n\r\n    private createPaddle(): void {\r\n        try {\r\n            if (!this.paddlePrefab) {\r\n                console.warn('Paddle prefab not assigned - skipping paddle creation');\r\n                return;\r\n            }\r\n            \r\n            this._paddleNode = instantiate(this.paddlePrefab);\r\n            if (this._paddleNode) {\r\n                this._paddleNode.setPosition(0, -300, 0);\r\n                // 统一添加到Canvas下\r\n                const canvas = this.node.parent;\r\n                if (canvas) {\r\n                    canvas.addChild(this._paddleNode);\r\n                    console.log('Paddle created successfully and added to Canvas');\r\n                } else {\r\n                    this.node.addChild(this._paddleNode);\r\n                    console.log('Paddle created successfully and added to GameManager');\r\n                }\r\n            } else {\r\n                console.error('Failed to instantiate paddle prefab');\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Error creating paddle:', error);\r\n        }\r\n    }\r\n\r\n    private createBallBasedOnPaddle(): void {\r\n        try {\r\n            if (!this.ballPrefab) {\r\n                console.warn('Ball prefab not assigned - skipping ball creation');\r\n                return;\r\n            }\r\n            \r\n            if (!this._paddleNode) {\r\n                console.error('Cannot create ball - paddle not found');\r\n                return;\r\n            }\r\n            \r\n            // 获取Paddle的实际位置\r\n            const paddlePos = this._paddleNode.position;\r\n            console.log(`Paddle actual position: (${paddlePos.x}, ${paddlePos.y}, ${paddlePos.z})`);\r\n            \r\n            this._ballNode = instantiate(this.ballPrefab);\r\n            if (this._ballNode) {\r\n                // Ball位置基于Paddle实际位置，上方20像素\r\n                const ballPos = new Vec3(paddlePos.x, paddlePos.y + 20, paddlePos.z);\r\n                this._ballNode.setPosition(ballPos);\r\n                \r\n                console.log(`Ball positioned at: (${ballPos.x}, ${ballPos.y}, ${ballPos.z})`);\r\n                \r\n                // 将Ball添加到Canvas下，与Paddle同级\r\n                const canvas = this.node.parent;\r\n                if (canvas) {\r\n                    canvas.addChild(this._ballNode);\r\n                    console.log('Ball created successfully and added to Canvas');\r\n                } else {\r\n                    this.node.addChild(this._ballNode);\r\n                    console.log('Ball created successfully and added to GameManager');\r\n                }\r\n                \r\n                // 通知Ball找到Paddle引用\r\n                const ballScript = this._ballNode.getComponent('Ball');\r\n                if (ballScript && typeof (ballScript as any).setPaddleReference === 'function') {\r\n                    (ballScript as any).setPaddleReference(this._paddleNode);\r\n                }\r\n            } else {\r\n                console.error('Failed to instantiate ball prefab');\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Error creating ball based on paddle:', error);\r\n        }\r\n    }\r\n\r\n    private createBall(): void {\r\n        try {\r\n            if (!this.ballPrefab) {\r\n                console.warn('Ball prefab not assigned - skipping ball creation');\r\n                return;\r\n            }\r\n            \r\n            this._ballNode = instantiate(this.ballPrefab);\r\n            if (this._ballNode) {\r\n                this._ballNode.setPosition(0, -250, 0); // 与跟随逻辑一致：-300 + 50 = -250\r\n                // 将Ball添加到Canvas下，而不是GameManager下\r\n                const canvas = this.node.parent;\r\n                if (canvas) {\r\n                    canvas.addChild(this._ballNode);\r\n                    console.log('Ball created successfully and added to Canvas');\r\n                } else {\r\n                    this.node.addChild(this._ballNode);\r\n                    console.log('Ball created successfully and added to GameManager');\r\n                }\r\n            } else {\r\n                console.error('Failed to instantiate ball prefab');\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Error creating ball:', error);\r\n        }\r\n    }\r\n\r\n    private createBoundaryWalls(): void {\r\n        try {\r\n            if (!this.wallPrefab) {\r\n                console.warn('Wall prefab not assigned - skipping boundary creation');\r\n                return;\r\n            }\r\n\r\n            // Screen boundaries for 640x960 portrait: left=-320, right=+320, top=+480, bottom=-480\r\n            const canvas = this.node.parent;\r\n            const parentNode = canvas || this.node;\r\n            \r\n            // Left wall\r\n            const leftWall = instantiate(this.wallPrefab);\r\n            leftWall.setPosition(-325, 0, 0); // 竖屏左边界\r\n            leftWall.setScale(1, 10, 1); // 高一些适应竖屏\r\n            const leftSprite = leftWall.getComponent(Sprite);\r\n            if (leftSprite) {\r\n                leftSprite.color = new Color(255, 0, 0, 128);\r\n            }\r\n            parentNode.addChild(leftWall);\r\n\r\n            // Right wall  \r\n            const rightWall = instantiate(this.wallPrefab);\r\n            rightWall.setPosition(325, 0, 0); // 竖屏右边界\r\n            rightWall.setScale(1, 10, 1);\r\n            const rightSprite = rightWall.getComponent(Sprite);\r\n            if (rightSprite) {\r\n                rightSprite.color = new Color(255, 0, 0, 128);\r\n            }\r\n            parentNode.addChild(rightWall);\r\n\r\n            // Top wall\r\n            const topWall = instantiate(this.wallPrefab);\r\n            topWall.setPosition(0, 485, 0); // 竖屏上边界\r\n            topWall.setScale(7, 1, 1); // 宽一些覆盖竖屏宽度\r\n            const topSprite = topWall.getComponent(Sprite);\r\n            if (topSprite) {\r\n                topSprite.color = new Color(0, 255, 0, 128);\r\n            }\r\n            parentNode.addChild(topWall);\r\n\r\n            // Bottom wall\r\n            const bottomWall = instantiate(this.wallPrefab);\r\n            bottomWall.setPosition(0, -485, 0); // 竖屏下边界\r\n            bottomWall.setScale(7, 1, 1);\r\n            const bottomSprite = bottomWall.getComponent(Sprite);\r\n            if (bottomSprite) {\r\n                bottomSprite.color = new Color(0, 0, 255, 128);\r\n            }\r\n            parentNode.addChild(bottomWall);\r\n\r\n            console.log('Boundary walls created successfully');\r\n        } catch (error) {\r\n            console.error('Error creating boundary walls:', error);\r\n        }\r\n    }\r\n\r\n    /*\r\n    private createDebugPanel(): void {\r\n        try {\r\n            // 创建调试面板节点\r\n            const debugNode = new Node('RuntimeDebugPanel');\r\n            const debugPanel = debugNode.addComponent(RuntimeDebugPanel);\r\n            \r\n            // 添加到Canvas下，确保在UI层次结构中\r\n            const canvas = this.node.parent;\r\n            if (canvas) {\r\n                canvas.addChild(debugNode);\r\n                console.log('✅ Runtime debug panel created and added to Canvas');\r\n            } else {\r\n                this.node.addChild(debugNode);\r\n                console.log('✅ Runtime debug panel created and added to GameManager');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error creating debug panel:', error);\r\n        }\r\n    }\r\n    */\r\n\r\n    private launchBall(): void {\r\n        if (this._ballNode) {\r\n            const ballScript = this._ballNode.getComponent(Ball);\r\n            if (ballScript && typeof ballScript.launch === 'function') {\r\n                ballScript.launch();\r\n                console.log('Ball launched after physics initialization');\r\n            } else {\r\n                console.warn('Ball script not found or launch method not available');\r\n            }\r\n        } else {\r\n            console.warn('Ball node not found, cannot launch');\r\n        }\r\n    }\r\n\r\n    private setupLevel(): void {\r\n        console.log('SetupLevel called - restoring brick creation for full game testing');\r\n        // 恢复brick创建，测试完整游戏交互\r\n        this.clearBricks();\r\n        \r\n        // 暂时直接创建砖块，不依赖LevelManager\r\n        const layout = this.getLevelLayout(this.level);\r\n        this.createBricksFromLayout(layout);\r\n        \r\n        /*\r\n        if (this._levelManager) {\r\n            this._levelManager.initializeLevel();\r\n            \r\n            const levelType = this._levelManager.getCurrentLevelType();\r\n            if (levelType !== LevelType.BOSS) {\r\n                const layout = this.getLevelLayout(this.level);\r\n                this.createBricksFromLayout(layout);\r\n            }\r\n        } else {\r\n            const layout = this.getLevelLayout(this.level);\r\n            this.createBricksFromLayout(layout);\r\n        }\r\n        */\r\n    }\r\n\r\n    private getLevelLayout(level: number): number[][] {\r\n        // 更多砖块：从8x4增加到12x6，提升内容密度\r\n        const basicLayout = [\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n        ];\r\n\r\n        if (level > 1) {\r\n            for (let row = 0; row < basicLayout.length; row++) {\r\n                for (let col = 0; col < basicLayout[row].length; col++) {\r\n                    if (Math.random() < 0.3) {\r\n                        basicLayout[row][col] = 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return basicLayout;\r\n    }\r\n\r\n    private createBricksFromLayout(layout: number[][]): void {\r\n        if (!this.brickPrefab || !this.brickContainer) return;\r\n\r\n        // 基于真实砖块尺寸计算布局 - 消除缩放特殊情况\r\n        const wallInnerBoundary = 320; // 墙壁内边界 (325-5)\r\n        const actualBrickWidth = 80 * 0.625;  // 50像素实际宽度\r\n        const actualBrickHeight = 40 * 0.625; // 25像素实际高度\r\n        const spacing = 4;  // 减小间距适应更多砖块\r\n        \r\n        const cols = layout[0] ? layout[0].length : 0;\r\n        const totalBrickArea = cols * actualBrickWidth + (cols - 1) * spacing;\r\n        \r\n        // 如果12列太宽，减少到10列\r\n        let finalCols = cols;\r\n        let finalLayout = layout;\r\n        \r\n        if (totalBrickArea > wallInnerBoundary * 2) {\r\n            console.log(`12列太宽(${totalBrickArea})，减少到10列`);\r\n            finalCols = 10;\r\n            finalLayout = layout.map(row => row.slice(0, 10)); // 截取前10列\r\n        }\r\n        \r\n        const finalTotalWidth = finalCols * actualBrickWidth + (finalCols - 1) * spacing;\r\n        const startX = -finalTotalWidth / 2 + actualBrickWidth / 2;\r\n        const startY = 300;\r\n        \r\n        console.log(`Creating ${finalLayout.length}x${finalCols} brick grid, total width: ${finalTotalWidth.toFixed(1)}, wall boundary: ±${wallInnerBoundary}`);\r\n\r\n        for (let row = 0; row < finalLayout.length; row++) {\r\n            for (let col = 0; col < finalCols; col++) {\r\n                const brickType = finalLayout[row][col];\r\n                if (brickType === 0) continue;\r\n\r\n                const brick = instantiate(this.brickPrefab);\r\n                const x = startX + col * (actualBrickWidth + spacing);\r\n                const y = startY - row * (actualBrickHeight + spacing);\r\n                \r\n                brick.setPosition(x, y, 0);\r\n                \r\n                // 缩放砖块到新尺寸\r\n                brick.setScale(0.625, 0.625, 1);\r\n                \r\n                // Use EnhancedBrick component with programmatic types\r\n                const brickScript = brick.getComponent('EnhancedBrick') || brick.getComponent('Brick');\r\n                if (brickScript) {\r\n                    // Convert layout value to diverse brick types\r\n                    const enhancedBrickType = this.getBrickTypeFromValue(brickType, row, col);\r\n                    \r\n                    if ((brickScript as any).brickType !== undefined) {\r\n                        // EnhancedBrick system\r\n                        (brickScript as any).brickType = enhancedBrickType;\r\n                        // Trigger initialization after type assignment\r\n                        if ((brickScript as any).initializeBrickType) {\r\n                            (brickScript as any).initializeBrickType();\r\n                        }\r\n                    } else {\r\n                        // Legacy Brick system fallback\r\n                        (brickScript as any).setHealth(brickType);\r\n                    }\r\n                    \r\n                    // Some bricks drop experience orbs\r\n                    if (Math.random() < 0.1) { // 10% chance\r\n                        (brickScript as any).setDropsExperience && (brickScript as any).setDropsExperience(true);\r\n                    }\r\n                }\r\n\r\n                this.brickContainer.addChild(brick);\r\n                this._bricks.push(brick);\r\n            }\r\n        }\r\n        \r\n        console.log(`Created ${this._bricks.length} bricks with diverse types`);\r\n    }\r\n    \r\n    /**\r\n     * Convert layout value to enhanced brick type with strategic diversity\r\n     * 为每个砖块分配有意义的类型，而不是简单的随机化\r\n     */\r\n    private getBrickTypeFromValue(layoutValue: number, row: number, col: number): number {\r\n        // Import BrickType enum values  \r\n        const BrickType = {\r\n            NORMAL: 0, REINFORCED: 1, EXPLOSIVE: 2, ELECTRIC: 3, EXPERIENCE: 4,\r\n            REGENERATING: 5, PHASE: 6, MAGNETIC: 7, REFLECTIVE: 8, POISON: 9,\r\n            ICE: 10, FIRE: 11, SPLITTING: 12, TELEPORT: 13, SHIELD: 14,\r\n            GRAVITY: 15, TIME: 16, HEALING: 17, CURSED: 18, CRYSTAL: 19,\r\n            RUBBER: 20, METAL: 21, VOID: 22, LIGHT: 23, DARK: 24\r\n        };\r\n        \r\n        // Strategic brick placement based on position and level\r\n        const totalPositions = (row * 8 + col); // Unique position identifier\r\n        const levelDifficulty = this.level;\r\n        \r\n        // Base distribution: mostly normal bricks\r\n        if (layoutValue === 1) {\r\n            // Row-based strategy\r\n            switch (row) {\r\n                case 0: // Top row - defensive types\r\n                    if (col % 3 === 0) return BrickType.SHIELD;\r\n                    if (col % 4 === 1) return BrickType.REINFORCED;\r\n                    return BrickType.NORMAL;\r\n                    \r\n                case 1: // Second row - special effects\r\n                    if (col % 5 === 0) return BrickType.EXPLOSIVE;\r\n                    if (col % 5 === 2) return BrickType.ELECTRIC;\r\n                    if (col % 7 === 3) return BrickType.EXPERIENCE;\r\n                    return BrickType.NORMAL;\r\n                    \r\n                case 2: // Third row - element effects\r\n                    if (col % 4 === 0) return BrickType.FIRE;\r\n                    if (col % 4 === 2) return BrickType.ICE;\r\n                    if (col % 6 === 1) return BrickType.POISON;\r\n                    return BrickType.NORMAL;\r\n                    \r\n                default: // Bottom rows - utility and rare types\r\n                    if (col === 0 || col === 7) return BrickType.HEALING; // Corner healing\r\n                    if (totalPositions % 11 === 0) return BrickType.TELEPORT;\r\n                    if (totalPositions % 13 === 0) return BrickType.CRYSTAL;\r\n                    return BrickType.NORMAL;\r\n            }\r\n        }\r\n        \r\n        // Enhanced bricks for higher layout values\r\n        if (layoutValue === 2) {\r\n            const rareTypes = [\r\n                BrickType.GRAVITY, BrickType.TIME, BrickType.VOID, \r\n                BrickType.METAL, BrickType.PHASE, BrickType.MAGNETIC\r\n            ];\r\n            \r\n            // Add level scaling for rare types\r\n            if (levelDifficulty > 2) {\r\n                const typeIndex = (totalPositions + levelDifficulty) % rareTypes.length;\r\n                return rareTypes[typeIndex];\r\n            } else {\r\n                // Early levels: safer special types\r\n                const earlySpecial = [BrickType.REINFORCED, BrickType.EXPERIENCE, BrickType.HEALING];\r\n                return earlySpecial[totalPositions % earlySpecial.length];\r\n            }\r\n        }\r\n        \r\n        return BrickType.NORMAL;\r\n    }\r\n\r\n    private clearBricks(): void {\r\n        this._bricks.forEach(brick => {\r\n            if (brick && brick.isValid) {\r\n                brick.destroy();\r\n            }\r\n        });\r\n        this._bricks = [];\r\n    }\r\n\r\n    public onBrickDestroyed(scoreValue: number = 10, brickPosition?: Vec3, dropsExperience: boolean = false): void {\r\n        this.score += scoreValue;\r\n        \r\n        if (brickPosition) {\r\n            // Drop power-ups\r\n            if (Math.random() < this.powerUpDropChance) {\r\n                this.dropPowerUp(brickPosition);\r\n            }\r\n            \r\n            // Drop experience orbs\r\n            if (dropsExperience) {\r\n                this.dropExperienceOrb(brickPosition);\r\n            }\r\n        }\r\n        \r\n        this._bricks = this._bricks.filter(brick => brick && brick.isValid);\r\n        \r\n        if (this._bricks.length === 0) {\r\n            this.checkLevelComplete();\r\n        }\r\n    }\r\n\r\n    private dropPowerUp(position: Vec3): void {\r\n        const powerUps = [this.multiBallPowerUpPrefab, this.laserPaddlePowerUpPrefab];\r\n        const availablePowerUps = powerUps.filter(prefab => prefab !== null);\r\n        \r\n        if (availablePowerUps.length === 0) return;\r\n        \r\n        const randomPowerUp = availablePowerUps[Math.floor(Math.random() * availablePowerUps.length)];\r\n        if (randomPowerUp) {\r\n            const powerUpNode = instantiate(randomPowerUp);\r\n            powerUpNode.setPosition(position);\r\n            \r\n            // Add to Canvas for consistent coordinate system\r\n            const canvas = this.node.parent;\r\n            if (canvas) {\r\n                canvas.addChild(powerUpNode);\r\n                console.log('PowerUp dropped and added to Canvas');\r\n            } else {\r\n                this.node.addChild(powerUpNode);\r\n                console.log('PowerUp dropped and added to GameManager');\r\n            }\r\n        }\r\n    }\r\n\r\n    public onBallLost(): void {\r\n        this.lives--;\r\n        \r\n        // Ball hitting core also deals damage\r\n        if (this._coreController) {\r\n            this._coreController.takeDamage(1, 'Ball lost');\r\n        }\r\n        \r\n        if (this.lives <= 0) {\r\n            this.setState(GameState.GAME_OVER);\r\n        } else {\r\n            this.resetBall();\r\n        }\r\n    }\r\n    \r\n    public onCoreAttacked(damage: number): void {\r\n        console.log(`Core attacked for ${damage} damage`);\r\n        \r\n        if (this._coreController) {\r\n            this._coreController.takeDamage(damage, 'External attack');\r\n        }\r\n    }\r\n    \r\n    public onCoreDestroyed(): void {\r\n        console.log('Core destroyed! Immediate game over!');\r\n        this.lives = 0;\r\n        this.setState(GameState.GAME_OVER);\r\n    }\r\n    \r\n    public onBossDefeated(scoreValue: number): void {\r\n        console.log(`Boss defeated! Awarded ${scoreValue} points`);\r\n        this.score += scoreValue;\r\n        \r\n        // Boss defeat triggers level completion\r\n        this.onLevelComplete();\r\n    }\r\n    \r\n    private dropExperienceOrb(position: Vec3): void {\r\n        if (!this.experienceOrbPrefab) return;\r\n        \r\n        const orbNode = instantiate(this.experienceOrbPrefab);\r\n        orbNode.setPosition(position);\r\n        this.node.addChild(orbNode);\r\n        console.log('Experience orb dropped');\r\n    }\r\n\r\n    private resetBall(): void {\r\n        if (this._ballNode) {\r\n            const ballScript = this._ballNode.getComponent('Ball');\r\n            if (ballScript) {\r\n                (ballScript as any).resetBall();\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkLevelComplete(): void {\r\n        // 暂时简化：直接完成关卡，不检查Boss类型\r\n        this.onLevelComplete();\r\n        \r\n        /*\r\n        const levelType = this._levelManager ? this._levelManager.getCurrentLevelType() : LevelType.NORMAL;\r\n        \r\n        if (levelType === LevelType.BOSS) {\r\n            // Boss levels complete when boss is defeated (handled in onBossDefeated)\r\n            return;\r\n        }\r\n        \r\n        this.onLevelComplete();\r\n        */\r\n    }\r\n\r\n    public onLevelComplete(): void {\r\n        this.setState(GameState.LEVEL_COMPLETE);\r\n        this.level++;\r\n        \r\n        const relicManager = RelicManager.getInstance();\r\n        if (relicManager) {\r\n            relicManager.grantRandomRelic();\r\n        }\r\n        \r\n        // Reset level manager for next level\r\n        if (this._levelManager) {\r\n            this._levelManager.resetLevel();\r\n            this._levelManager.adjustDifficulty(this.level);\r\n        }\r\n        \r\n        this.scheduleOnce(() => {\r\n            this.setupLevel();\r\n            this.setState(GameState.PLAYING);\r\n        }, 3.0);\r\n    }\r\n\r\n    public setState(newState: GameState): void {\r\n        try {\r\n            if (!newState || typeof newState !== 'string') {\r\n                console.warn('Invalid game state:', newState);\r\n                return;\r\n            }\r\n\r\n            const validStates = Object.values(GameState);\r\n            if (!validStates.includes(newState as GameState)) {\r\n                console.warn('Unknown game state:', newState);\r\n                return;\r\n            }\r\n\r\n            const oldState = this._currentState;\r\n            this._currentState = newState;\r\n            \r\n            console.log(`Game State Changed: ${oldState} -> ${newState}`);\r\n            \r\n            // Handle state-specific logic\r\n            this.onStateChanged(oldState, newState);\r\n            \r\n        } catch (error) {\r\n            console.error('Error setting game state:', error);\r\n        }\r\n    }\r\n\r\n    private onStateChanged(_oldState: GameState, newState: GameState): void {\r\n        try {\r\n            switch (newState) {\r\n                case GameState.GAME_OVER:\r\n                    this.handleGameOver();\r\n                    break;\r\n                case GameState.LEVEL_COMPLETE:\r\n                    this.handleLevelComplete();\r\n                    break;\r\n                case GameState.PLAYING:\r\n                    this.handleGamePlaying();\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            console.warn('Error in state change handler:', error);\r\n        }\r\n    }\r\n\r\n    private handleGameOver(): void {\r\n        console.log('Game Over - cleaning up resources');\r\n        // Stop any ongoing animations or sounds\r\n        // Save final score if needed\r\n    }\r\n\r\n    private handleLevelComplete(): void {\r\n        console.log('Level Complete - preparing next level');\r\n        // Award experience, update progression\r\n    }\r\n\r\n    private handleGamePlaying(): void {\r\n        console.log('Game Playing - all systems active');\r\n        // Ensure all game systems are ready\r\n    }\r\n\r\n    public getCurrentState(): GameState {\r\n        return this._currentState;\r\n    }\r\n\r\n    public getBallPrefab(): Prefab | null {\r\n        return this.ballPrefab;\r\n    }\r\n\r\n    public getScore(): number {\r\n        return this.score;\r\n    }\r\n\r\n    public getLives(): number {\r\n        return this.lives;\r\n    }\r\n\r\n    public getLevel(): number {\r\n        return this.level;\r\n    }\r\n\r\n    // 添加测试期望的方法\r\n    public getBrickCount(): number {\r\n        return this._bricks.length;\r\n    }\r\n\r\n    public getBricks(): Node[] {\r\n        return this._bricks;\r\n    }\r\n\r\n    public getBallNode(): Node | null {\r\n        return this._ballNode;\r\n    }\r\n\r\n    public getPaddleNode(): Node | null {\r\n        return this._paddleNode;\r\n    }\r\n\r\n    public getCoreController(): CoreController | null {\r\n        return this._coreController;\r\n    }\r\n\r\n    public getLevelManager(): LevelManager | null {\r\n        return this._levelManager;\r\n    }\r\n\r\n    public getGameState(): GameState {\r\n        return this._currentState;\r\n    }\r\n\r\n    public addScore(points: number): void {\r\n        this.score += points;\r\n        console.log(`Score increased by ${points}. Total: ${this.score}`);\r\n    }\r\n\r\n    public decreaseLives(amount: number = 1): void {\r\n        this.lives = Math.max(0, this.lives - amount);\r\n        console.log(`Lives decreased by ${amount}. Remaining: ${this.lives}`);\r\n        \r\n        if (this.lives <= 0) {\r\n            this.setState(GameState.GAME_OVER);\r\n        }\r\n    }\r\n}"]}