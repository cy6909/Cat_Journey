{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/gameplay/GameManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Vec3","director","Color","Sprite","PhysicsSystem2D","input","Input","KeyCode","Vec2","RelicManager","CoreController","ExperienceManager","DifficultyCalculator","LayoutGenerator","BrickType","ccclass","property","GameState","GameManager","_currentState","PRE_START","_bricks","_ballNode","_paddleNode","_coreController","_levelManager","_currentDifficulty","_brickDistribution","getInstance","_instance","onLoad","addPersistRootNode","node","on","EventType","KEY_DOWN","onKeyDown","destroy","onDestroy","off","start","initializeGame","initializeCore","event","keyCode","SPACE","cycleBallType","ballScript","getComponent","cycleToNextBallType","setState","instance","debugDrawFlags","gravity","createBoundaryWalls","createPaddle","scheduleOnce","createBallBasedOnPaddle","setupLevel","PLAYING","coreNode","paddlePrefab","setPosition","canvas","parent","addChild","error","ballPrefab","paddlePos","position","ballPos","x","y","z","setPaddleReference","createBall","wallPrefab","parentNode","leftWall","setScale","leftSprite","color","rightWall","rightSprite","topWall","topSprite","bottomWall","bottomSprite","launchBall","launch","calculateDifficulty","level","getBrickDistribution","clearBricks","brickData","generateLayout","createBricksFromData","brickDataArray","brickPrefab","brickContainer","config","wallInnerBoundary","actualBrickWidth","actualBrickHeight","spacing","availableWidth","finalCols","gridCols","finalTotalWidth","filteredBricks","filter","brick","col","startX","startY","applyDifficultyToBricks","data","row","brickScript","brickType","type","initializeBrickType","typesWithHardcodedHealth","includes","health","_maxHealth","push","dist","reactiveBricks","finalType","Math","random","beneficialBrickChance","selectBrickTypeByWeight","beneficial","types","weights","harmfulBrickChance","harmful","reactive","chance","tooClose","pos","distance","abs","minDistance","floor","length","loadLevel","customConfig","getLevelLayout","basicLayout","createBricksFromLayout","layout","cols","totalBrickArea","finalLayout","map","slice","enhancedBrickType","getBrickTypeFromValue","undefined","setHealth","setDropsExperience","layoutValue","NORMAL","REINFORCED","EXPLOSIVE","ELECTRIC","EXPERIENCE","REGENERATING","PHASE","MAGNETIC","REFLECTIVE","POISON","ICE","FIRE","SPLITTING","TELEPORT","SHIELD","GRAVITY","TIME","HEALING","CURSED","CRYSTAL","RUBBER","METAL","VOID","LIGHT","DARK","totalPositions","levelDifficulty","rareTypes","typeIndex","earlySpecial","forEach","isValid","onBrickDestroyed","scoreValue","brickPosition","dropsExperience","score","orbExpValue","powerUpDropChance","dropPowerUp","dropExperienceOrb","checkLevelComplete","powerUps","multiBallPowerUpPrefab","laserPaddlePowerUpPrefab","availablePowerUps","prefab","randomPowerUp","powerUpNode","onBallLost","lives","takeDamage","GAME_OVER","resetBall","onCoreAttacked","damage","onCoreDestroyed","onBossDefeated","onLevelComplete","expValue","experienceOrbPrefab","orbNode","orbScript","experienceValue","setWorldPosition","LEVEL_COMPLETE","expManager","addExperience","relicManager","grantRandomRelic","resetLevel","adjustDifficulty","newState","validStates","Object","values","oldState","onStateChanged","_oldState","handleGameOver","handleLevelComplete","handleGamePlaying","getCurrentState","getBallPrefab","getScore","getLives","getLevel","getBrickCount","getBricks","getBallNode","getPaddleNode","getPaddle","addLife","amount","getCoreController","getLevelManager","getGameState","addScore","points","decreaseLives","max"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Vec3, director, Color, Sprite, PhysicsSystem2D, input, Input, EventKeyboard, KeyCode, Vec2 } from 'cc';\nimport { RelicManager } from '../managers/RelicManager';\nimport { LevelManager, LevelType } from './LevelManager';\nimport { CoreController } from '../managers/CoreController';\nimport { ExperienceManager } from '../managers/ExperienceManager';\nimport { DifficultyCalculator, DifficultyConfig, BrickDistribution } from './DifficultySystem';\nimport { LayoutGenerator, BrickData } from './LayoutGenerator';\nimport { BrickType } from './EnhancedBrick';\n// import { RuntimeDebugPanel } from '../debug/RuntimeDebugPanel';\nconst { ccclass, property } = _decorator;\n\nexport enum GameState {\n    PRE_START = 'PRE_START',\n    PLAYING = 'PLAYING',\n    LEVEL_COMPLETE = 'LEVEL_COMPLETE',\n    GAME_OVER = 'GAME_OVER'\n}\n\n@ccclass('GameManager')\nexport class GameManager extends Component {\n    @property(Prefab)\n    public brickPrefab: Prefab | null = null;\n\n    @property(Prefab)\n    public paddlePrefab: Prefab | null = null;\n\n    @property(Prefab)\n    public ballPrefab: Prefab | null = null;\n\n    @property(Prefab)\n    public multiBallPowerUpPrefab: Prefab | null = null;\n\n    @property(Prefab)\n    public laserPaddlePowerUpPrefab: Prefab | null = null;\n\n    @property(Prefab)\n    public wallPrefab: Prefab | null = null;\n\n    @property(Prefab)\n    public deathZonePrefab: Prefab | null = null;\n\n    @property\n    public powerUpDropChance: number = 0.2;\n\n    @property(Node)\n    public brickContainer: Node | null = null;\n\n    @property(Node)\n    public coreNode: Node | null = null;\n\n    @property(Prefab)\n    public experienceOrbPrefab: Prefab | null = null;\n\n    @property\n    public lives: number = 3;\n\n    @property\n    public score: number = 0;\n\n    @property\n    public level: number = 1;\n\n    private static _instance: GameManager | null = null;\n    private _currentState: GameState = GameState.PRE_START;\n    private _bricks: Node[] = [];\n    private _ballNode: Node | null = null;\n    private _paddleNode: Node | null = null;\n    private _coreController: CoreController | null = null;\n    private _levelManager: LevelManager | null = null;\n    private _currentDifficulty: DifficultyConfig | null = null;\n    private _brickDistribution: BrickDistribution | null = null;\n\n    public static getInstance(): GameManager | null {\n        return GameManager._instance;\n    }\n\n    protected onLoad(): void {\n        if (GameManager._instance === null) {\n            GameManager._instance = this;\n            director.addPersistRootNode(this.node);\n\n            // 添加键盘监听用于测试BallType切换\n            input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);\n        } else {\n            this.node.destroy();\n            return;\n        }\n    }\n\n    protected onDestroy(): void {\n        if (GameManager._instance === this) {\n            GameManager._instance = null;\n            // 移除键盘监听\n            input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);\n        }\n    }\n\n    protected start(): void {\n        this.initializeGame();\n        this.initializeCore();\n        // this.initializeLevelManager(); // 暂时注释掉\n    }\n    \n    private onKeyDown(event: EventKeyboard): void {\n        switch (event.keyCode) {\n            case KeyCode.SPACE:\n                // 空格键：切换Ball类型来验证25种颜色\n                this.cycleBallType();\n                break;\n            default:\n                break;\n        }\n    }\n\n    private cycleBallType(): void {\n        if (this._ballNode) {\n            // 尝试获取EnhancedBall组件\n            let ballScript = this._ballNode.getComponent('EnhancedBall');\n\n            // 如果没有EnhancedBall，尝试获取Ball组件\n            if (!ballScript) {\n                ballScript = this._ballNode.getComponent('Ball');\n            }\n\n            if (ballScript) {\n                // 检查是否有cycleToNextBallType方法\n                if (typeof (ballScript as any).cycleToNextBallType === 'function') {\n                    (ballScript as any).cycleToNextBallType();\n                }\n            }\n        }\n    }\n\n    private initializeGame(): void {\n        this.setState(GameState.PRE_START);\n        \n        // 关闭物理调试显示\n        PhysicsSystem2D.instance.debugDrawFlags = 0;\n        // 设置物理系统重力为0 - Breakout游戏不需要重力！\n        PhysicsSystem2D.instance.gravity = new Vec2(0, 0);\n        \n        this.createBoundaryWalls();\n        this.createPaddle();\n        \n        // 延迟创建Ball，确保Paddle完全初始化\n        this.scheduleOnce(() => {\n            this.createBallBasedOnPaddle();\n        }, 0.1);\n        \n        this.setupLevel();\n        // this.createDebugPanel(); // 暂时注释掉，先修复场景加载问题\n        \n        // Ball现在由鼠标点击控制发射，不需要自动延迟发射\n        this.setState(GameState.PLAYING);\n    }\n\n    private initializeCore(): void {\n        if (this.coreNode) {\n            this._coreController = this.coreNode.getComponent(CoreController);\n            if (!this._coreController) {\n                \n            }\n        }\n    }\n\n    /*\n    private initializeLevelManager(): void {\n        this._levelManager = LevelManager.getInstance();\n        if (!this._levelManager) {\n            \n        }\n    }\n    */\n\n    private createPaddle(): void {\n        try {\n            if (!this.paddlePrefab) {\n                // Silently skip if prefab not assigned\n                return;\n            }\n            \n            this._paddleNode = instantiate(this.paddlePrefab);\n            if (this._paddleNode) {\n                this._paddleNode.setPosition(0, -300, 0);\n                // 统一添加到Canvas下\n                const canvas = this.node.parent;\n                if (canvas) {\n                    canvas.addChild(this._paddleNode);\n                } else {\n                    this.node.addChild(this._paddleNode);\n                }\n            } else {\n                \n            }\n            \n        } catch (error) {\n            // Silently handle error\n        }\n    }\n\n    private createBallBasedOnPaddle(): void {\n        try {\n            if (!this.ballPrefab) {\n                \n                return;\n            }\n            \n            if (!this._paddleNode) {\n                \n                return;\n            }\n            \n            // 获取Paddle的实际位置\n            const paddlePos = this._paddleNode.position;\n\n            this._ballNode = instantiate(this.ballPrefab);\n            if (this._ballNode) {\n                // Ball位置基于Paddle实际位置，上方20像素\n                const ballPos = new Vec3(paddlePos.x, paddlePos.y + 20, paddlePos.z);\n                this._ballNode.setPosition(ballPos);\n\n                // 将Ball添加到Canvas下，与Paddle同级\n                const canvas = this.node.parent;\n                if (canvas) {\n                    canvas.addChild(this._ballNode);\n                } else {\n                    this.node.addChild(this._ballNode);\n                }\n                \n                // 通知Ball找到Paddle引用\n                const ballScript = this._ballNode.getComponent('EnhancedBall') || this._ballNode.getComponent('Ball');\n                if (ballScript && typeof (ballScript as any).setPaddleReference === 'function') {\n                    (ballScript as any).setPaddleReference(this._paddleNode);\n                }\n            } else {\n                \n            }\n            \n        } catch (error) {\n            \n        }\n    }\n\n    private createBall(): void {\n        try {\n            if (!this.ballPrefab) {\n                \n                return;\n            }\n            \n            this._ballNode = instantiate(this.ballPrefab);\n            if (this._ballNode) {\n                this._ballNode.setPosition(0, -250, 0); // 与跟随逻辑一致：-300 + 50 = -250\n                // 将Ball添加到Canvas下，而不是GameManager下\n                const canvas = this.node.parent;\n                if (canvas) {\n                    canvas.addChild(this._ballNode);\n                    \n                } else {\n                    this.node.addChild(this._ballNode);\n                    \n                }\n            } else {\n                \n            }\n            \n        } catch (error) {\n            \n        }\n    }\n\n    private createBoundaryWalls(): void {\n        try {\n            if (!this.wallPrefab) {\n                \n                return;\n            }\n\n            // Screen boundaries for 640x960 portrait: left=-320, right=+320, top=+480, bottom=-480\n            const canvas = this.node.parent;\n            const parentNode = canvas || this.node;\n            \n            // Left wall\n            const leftWall = instantiate(this.wallPrefab);\n            leftWall.setPosition(-325, 0, 0); // 竖屏左边界\n            leftWall.setScale(1, 10, 1); // 高一些适应竖屏\n            const leftSprite = leftWall.getComponent(Sprite);\n            if (leftSprite) {\n                leftSprite.color = new Color(255, 0, 0, 128);\n            }\n            parentNode.addChild(leftWall);\n\n            // Right wall  \n            const rightWall = instantiate(this.wallPrefab);\n            rightWall.setPosition(325, 0, 0); // 竖屏右边界\n            rightWall.setScale(1, 10, 1);\n            const rightSprite = rightWall.getComponent(Sprite);\n            if (rightSprite) {\n                rightSprite.color = new Color(255, 0, 0, 128);\n            }\n            parentNode.addChild(rightWall);\n\n            // Top wall\n            const topWall = instantiate(this.wallPrefab);\n            topWall.setPosition(0, 485, 0); // 竖屏上边界\n            topWall.setScale(7, 1, 1); // 宽一些覆盖竖屏宽度\n            const topSprite = topWall.getComponent(Sprite);\n            if (topSprite) {\n                topSprite.color = new Color(0, 255, 0, 128);\n            }\n            parentNode.addChild(topWall);\n\n            // Bottom wall\n            const bottomWall = instantiate(this.wallPrefab);\n            bottomWall.setPosition(0, -485, 0); // 竖屏下边界\n            bottomWall.setScale(7, 1, 1);\n            const bottomSprite = bottomWall.getComponent(Sprite);\n            if (bottomSprite) {\n                bottomSprite.color = new Color(0, 0, 255, 128);\n            }\n            parentNode.addChild(bottomWall);\n\n            \n        } catch (error) {\n            \n        }\n    }\n\n    /*\n    private createDebugPanel(): void {\n        try {\n            // 创建调试面板节点\n            const debugNode = new Node('RuntimeDebugPanel');\n            const debugPanel = debugNode.addComponent(RuntimeDebugPanel);\n            \n            // 添加到Canvas下，确保在UI层次结构中\n            const canvas = this.node.parent;\n            if (canvas) {\n                canvas.addChild(debugNode);\n                \n            } else {\n                this.node.addChild(debugNode);\n                \n            }\n        } catch (error) {\n            \n        }\n    }\n    */\n\n    private launchBall(): void {\n        if (this._ballNode) {\n            const ballScript = this._ballNode.getComponent('EnhancedBall') || this._ballNode.getComponent('Ball');\n            if (ballScript && typeof (ballScript as any).launch === 'function') {\n                (ballScript as any).launch();\n                \n            } else {\n                \n            }\n        } else {\n            \n        }\n    }\n\n    private setupLevel(): void {\n        // 计算当前关卡难度\n        this._currentDifficulty = DifficultyCalculator.calculateDifficulty(this.level);\n        this._brickDistribution = DifficultyCalculator.getBrickDistribution();\n\n        // 清除旧砖块\n        this.clearBricks();\n\n        // 使用新的布局生成系统\n        const brickData = LayoutGenerator.generateLayout(this._currentDifficulty);\n        this.createBricksFromData(brickData);\n    }\n\n    /**\n     * 从BrickData数组创建砖块 - 替代旧的createBricksFromLayout\n     */\n    private createBricksFromData(brickDataArray: BrickData[]): void {\n        if (!this.brickPrefab || !this.brickContainer || !this._currentDifficulty) {\n            \n            return;\n        }\n\n        const config = this._currentDifficulty;\n\n        // 基于真实砖块尺寸计算布局\n        const wallInnerBoundary = 310; // 墙壁内边界 (325 wall - 15 safety margin)\n        const actualBrickWidth = 80 * 0.625;  // 50像素实际宽度\n        const actualBrickHeight = 30 * 0.625; // 18.75像素实际高度\n        const spacing = 4;  // 间距\n\n        // 计算可用宽度和实际可放置的列数\n        const availableWidth = wallInnerBoundary * 2; // 左右各310，总共620\n        let finalCols = config.gridCols;\n        let finalTotalWidth = finalCols * actualBrickWidth + (finalCols - 1) * spacing;\n\n        // 如果砖块网格超出边界，减少列数\n        while (finalTotalWidth > availableWidth && finalCols > 1) {\n            finalCols--;\n            finalTotalWidth = finalCols * actualBrickWidth + (finalCols - 1) * spacing;\n        }\n\n        // 过滤掉超出列数的砖块\n        const filteredBricks = finalCols < config.gridCols\n            ? brickDataArray.filter(brick => brick.col < finalCols)\n            : brickDataArray;\n\n        const startX = -finalTotalWidth / 2 + actualBrickWidth / 2;\n        const startY = 300;\n\n        // 应用难度系统: 随机分配特殊砖块类型\n        this.applyDifficultyToBricks(filteredBricks);\n\n        for (const data of filteredBricks) {\n            const brick = instantiate(this.brickPrefab);\n            const x = startX + data.col * (actualBrickWidth + spacing);\n            const y = startY - data.row * (actualBrickHeight + spacing);\n\n            brick.setPosition(x, y, 0);\n            brick.setScale(0.625, 0.625, 1);\n\n            // 配置砖块类型和生命值\n            const brickScript = brick.getComponent('EnhancedBrick') || brick.getComponent('Brick');\n            if (brickScript) {\n                // 先设置类型\n                (brickScript as any).brickType = data.type;\n\n                // 调用initializeBrickType初始化颜色和默认属性\n                if (typeof (brickScript as any).initializeBrickType === 'function') {\n                    (brickScript as any).initializeBrickType();\n                }\n\n                // 检查是否需要覆盖生命值 (只覆盖不硬编码生命值的类型)\n                const typesWithHardcodedHealth = [1, 5, 14, 21]; // REINFORCED, REGENERATING, SHIELD, METAL\n                if (!typesWithHardcodedHealth.includes(data.type)) {\n                    // 对于其他类型，使用难度系统计算的生命值\n                    (brickScript as any).health = data.health;\n                    (brickScript as any)._maxHealth = data.health;\n                }\n            }\n\n            this.brickContainer.addChild(brick);\n            this._bricks.push(brick);\n        }\n\n        \n    }\n\n    /**\n     * 应用难度配置到砖块数据 - 根据概率分配特殊砖块类型\n     */\n    private applyDifficultyToBricks(brickDataArray: BrickData[]): void {\n        if (!this._currentDifficulty || !this._brickDistribution) return;\n\n        const config = this._currentDifficulty;\n        const dist = this._brickDistribution;\n\n        // 记录已使用的reactive砖块位置\n        const reactiveBricks: { row: number, col: number }[] = [];\n\n        for (const brick of brickDataArray) {\n            let finalType = brick.type;\n\n            // 1. 检查是否应该是有益砖块\n            if (Math.random() < config.beneficialBrickChance) {\n                finalType = DifficultyCalculator.selectBrickTypeByWeight(\n                    dist.beneficial.types,\n                    dist.beneficial.weights\n                );\n            }\n            // 2. 检查是否应该是减益砖块\n            else if (Math.random() < config.harmfulBrickChance) {\n                finalType = DifficultyCalculator.selectBrickTypeByWeight(\n                    dist.harmful.types,\n                    dist.harmful.weights\n                );\n            }\n            // 3. 检查是否应该是爆炸性砖块\n            else if (Math.random() < dist.reactive.chance) {\n                // 检查与其他reactive砖块的距离\n                let tooClose = false;\n                for (const pos of reactiveBricks) {\n                    const distance = Math.abs(brick.row - pos.row) + Math.abs(brick.col - pos.col);\n                    if (distance < dist.reactive.minDistance) {\n                        tooClose = true;\n                        break;\n                    }\n                }\n\n                if (!tooClose) {\n                    finalType = dist.reactive.types[Math.floor(Math.random() * dist.reactive.types.length)];\n                    reactiveBricks.push({ row: brick.row, col: brick.col });\n                }\n            }\n\n            brick.type = finalType;\n        }\n    }\n\n    /**\n     * 公开方法 - 供DevTools调用，加载指定关卡\n     */\n    public loadLevel(level: number, customConfig?: DifficultyConfig): void {\n        this.level = level;\n\n        if (customConfig) {\n            this._currentDifficulty = customConfig;\n        }\n\n        this.setupLevel();\n    }\n\n    private getLevelLayout(level: number): number[][] {\n        // 已废弃 - 保留用于向后兼容\n        // 更多砖块：从8x4增加到12x6，提升内容密度\n        const basicLayout = [\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        ];\n\n        if (level > 1) {\n            for (let row = 0; row < basicLayout.length; row++) {\n                for (let col = 0; col < basicLayout[row].length; col++) {\n                    if (Math.random() < 0.3) {\n                        basicLayout[row][col] = 2;\n                    }\n                }\n            }\n        }\n\n        return basicLayout;\n    }\n\n    private createBricksFromLayout(layout: number[][]): void {\n        if (!this.brickPrefab || !this.brickContainer) return;\n\n        // 基于真实砖块尺寸计算布局 - 消除缩放特殊情况\n        const wallInnerBoundary = 320; // 墙壁内边界 (325-5)\n        const actualBrickWidth = 80 * 0.625;  // 50像素实际宽度\n        const actualBrickHeight = 40 * 0.625; // 25像素实际高度\n        const spacing = 4;  // 减小间距适应更多砖块\n        \n        const cols = layout[0] ? layout[0].length : 0;\n        const totalBrickArea = cols * actualBrickWidth + (cols - 1) * spacing;\n        \n        // 如果12列太宽，减少到10列\n        let finalCols = cols;\n        let finalLayout = layout;\n        \n        if (totalBrickArea > wallInnerBoundary * 2) {\n            \n            finalCols = 10;\n            finalLayout = layout.map(row => row.slice(0, 10)); // 截取前10列\n        }\n        \n        const finalTotalWidth = finalCols * actualBrickWidth + (finalCols - 1) * spacing;\n        const startX = -finalTotalWidth / 2 + actualBrickWidth / 2;\n        const startY = 300;\n        \n        \n\n        for (let row = 0; row < finalLayout.length; row++) {\n            for (let col = 0; col < finalCols; col++) {\n                const brickType = finalLayout[row][col];\n                if (brickType === 0) continue;\n\n                const brick = instantiate(this.brickPrefab);\n                const x = startX + col * (actualBrickWidth + spacing);\n                const y = startY - row * (actualBrickHeight + spacing);\n                \n                brick.setPosition(x, y, 0);\n                \n                // 缩放砖块到新尺寸\n                brick.setScale(0.625, 0.625, 1);\n                \n                // Use EnhancedBrick component with programmatic types\n                const brickScript = brick.getComponent('EnhancedBrick') || brick.getComponent('Brick');\n                if (brickScript) {\n                    // Convert layout value to diverse brick types\n                    const enhancedBrickType = this.getBrickTypeFromValue(brickType, row, col);\n                    \n                    if ((brickScript as any).brickType !== undefined) {\n                        // EnhancedBrick system\n                        (brickScript as any).brickType = enhancedBrickType;\n                        // Trigger initialization after type assignment\n                        if ((brickScript as any).initializeBrickType) {\n                            (brickScript as any).initializeBrickType();\n                        }\n                    } else {\n                        // Legacy Brick system fallback\n                        (brickScript as any).setHealth(brickType);\n                    }\n                    \n                    // Some bricks drop experience orbs\n                    // 提高经验球掉落率到30%，让游戏更有收集感\n                    if (Math.random() < 0.3) { // 30% chance\n                        (brickScript as any).setDropsExperience && (brickScript as any).setDropsExperience(true);\n                    }\n                }\n\n                this.brickContainer.addChild(brick);\n                this._bricks.push(brick);\n            }\n        }\n        \n        \n    }\n    \n    /**\n     * Convert layout value to enhanced brick type with strategic diversity\n     * 为每个砖块分配有意义的类型，而不是简单的随机化\n     */\n    private getBrickTypeFromValue(layoutValue: number, row: number, col: number): number {\n        // Import BrickType enum values  \n        const BrickType = {\n            NORMAL: 0, REINFORCED: 1, EXPLOSIVE: 2, ELECTRIC: 3, EXPERIENCE: 4,\n            REGENERATING: 5, PHASE: 6, MAGNETIC: 7, REFLECTIVE: 8, POISON: 9,\n            ICE: 10, FIRE: 11, SPLITTING: 12, TELEPORT: 13, SHIELD: 14,\n            GRAVITY: 15, TIME: 16, HEALING: 17, CURSED: 18, CRYSTAL: 19,\n            RUBBER: 20, METAL: 21, VOID: 22, LIGHT: 23, DARK: 24\n        };\n        \n        // Strategic brick placement based on position and level\n        const totalPositions = (row * 8 + col); // Unique position identifier\n        const levelDifficulty = this.level;\n        \n        // Base distribution: mostly normal bricks\n        if (layoutValue === 1) {\n            // Row-based strategy\n            switch (row) {\n                case 0: // Top row - defensive types\n                    if (col % 3 === 0) return BrickType.SHIELD;\n                    if (col % 4 === 1) return BrickType.REINFORCED;\n                    return BrickType.NORMAL;\n                    \n                case 1: // Second row - special effects\n                    if (col % 5 === 0) return BrickType.EXPLOSIVE;\n                    if (col % 5 === 2) return BrickType.ELECTRIC;\n                    if (col % 7 === 3) return BrickType.EXPERIENCE;\n                    return BrickType.NORMAL;\n                    \n                case 2: // Third row - element effects\n                    if (col % 4 === 0) return BrickType.FIRE;\n                    if (col % 4 === 2) return BrickType.ICE;\n                    if (col % 6 === 1) return BrickType.POISON;\n                    return BrickType.NORMAL;\n                    \n                default: // Bottom rows - utility and rare types\n                    if (col === 0 || col === 7) return BrickType.HEALING; // Corner healing\n                    if (totalPositions % 11 === 0) return BrickType.TELEPORT;\n                    if (totalPositions % 13 === 0) return BrickType.CRYSTAL;\n                    return BrickType.NORMAL;\n            }\n        }\n        \n        // Enhanced bricks for higher layout values\n        if (layoutValue === 2) {\n            const rareTypes = [\n                BrickType.GRAVITY, BrickType.TIME, BrickType.VOID, \n                BrickType.METAL, BrickType.PHASE, BrickType.MAGNETIC\n            ];\n            \n            // Add level scaling for rare types\n            if (levelDifficulty > 2) {\n                const typeIndex = (totalPositions + levelDifficulty) % rareTypes.length;\n                return rareTypes[typeIndex];\n            } else {\n                // Early levels: safer special types\n                const earlySpecial = [BrickType.REINFORCED, BrickType.EXPERIENCE, BrickType.HEALING];\n                return earlySpecial[totalPositions % earlySpecial.length];\n            }\n        }\n        \n        return BrickType.NORMAL;\n    }\n\n    private clearBricks(): void {\n        this._bricks.forEach(brick => {\n            if (brick && brick.isValid) {\n                brick.destroy();\n            }\n        });\n        this._bricks = [];\n    }\n\n    public onBrickDestroyed(scoreValue: number = 10, brickPosition?: Vec3, dropsExperience: boolean = false, brickType?: number): void {\n        this.score += scoreValue;\n\n        // 不再直接添加经验值，而是通过经验球收集来获得\n        // 根据砖块类型决定经验球的经验值\n        let orbExpValue = 1; // 默认经验值\n\n        // 特殊砖块的经验球包含更多经验\n        if (brickType !== undefined) {\n            if (brickType === BrickType.EXPERIENCE) {\n                orbExpValue = 5; // 经验砖块的球给予5点\n                dropsExperience = true; // 经验砖块一定掉落经验球\n            } else if (brickType === BrickType.REINFORCED || brickType === BrickType.SHIELD) {\n                orbExpValue = 3; // 坚固砖块的球给予3点\n            } else if (brickType === BrickType.EXPLOSIVE || brickType === BrickType.ELECTRIC) {\n                orbExpValue = 2; // 爆炸/电击砖块的球给予2点\n            }\n        }\n\n        if (brickPosition) {\n            // Drop power-ups\n            if (Math.random() < this.powerUpDropChance) {\n                this.dropPowerUp(brickPosition);\n            }\n\n            // Drop experience orbs with calculated exp value\n            if (dropsExperience) {\n                this.dropExperienceOrb(brickPosition, orbExpValue);\n            }\n        }\n\n        this._bricks = this._bricks.filter(brick => brick && brick.isValid);\n\n        if (this._bricks.length === 0) {\n            this.checkLevelComplete();\n        }\n    }\n\n    private dropPowerUp(position: Vec3): void {\n        const powerUps = [this.multiBallPowerUpPrefab, this.laserPaddlePowerUpPrefab];\n        const availablePowerUps = powerUps.filter(prefab => prefab !== null);\n        \n        if (availablePowerUps.length === 0) return;\n        \n        const randomPowerUp = availablePowerUps[Math.floor(Math.random() * availablePowerUps.length)];\n        if (randomPowerUp) {\n            const powerUpNode = instantiate(randomPowerUp);\n            powerUpNode.setPosition(position);\n            \n            // Add to Canvas for consistent coordinate system\n            const canvas = this.node.parent;\n            if (canvas) {\n                canvas.addChild(powerUpNode);\n                \n            } else {\n                this.node.addChild(powerUpNode);\n                \n            }\n        }\n    }\n\n    public onBallLost(): void {\n        this.lives--;\n        \n        // Ball hitting core also deals damage\n        if (this._coreController) {\n            this._coreController.takeDamage(1, 'Ball lost');\n        }\n        \n        if (this.lives <= 0) {\n            this.setState(GameState.GAME_OVER);\n        } else {\n            this.resetBall();\n        }\n    }\n    \n    public onCoreAttacked(damage: number): void {\n        \n        \n        if (this._coreController) {\n            this._coreController.takeDamage(damage, 'External attack');\n        }\n    }\n    \n    public onCoreDestroyed(): void {\n        \n        this.lives = 0;\n        this.setState(GameState.GAME_OVER);\n    }\n    \n    public onBossDefeated(scoreValue: number): void {\n        \n        this.score += scoreValue;\n        \n        // Boss defeat triggers level completion\n        this.onLevelComplete();\n    }\n    \n    private dropExperienceOrb(position: Vec3, expValue: number = 1): void {\n        if (!this.experienceOrbPrefab) return;\n\n        const orbNode = instantiate(this.experienceOrbPrefab);\n\n        // 设置经验球的经验值\n        const orbScript = orbNode.getComponent('UltraSimpleExperienceOrb');\n        if (orbScript) {\n            (orbScript as any).experienceValue = expValue;\n        }\n\n        // 添加到Canvas而不是GameManager，确保坐标系正确\n        const canvas = this.node.parent;\n        if (canvas) {\n            // 先添加到Canvas\n            canvas.addChild(orbNode);\n            // 然后设置世界位置\n            orbNode.setWorldPosition(position);\n        } else {\n            // 后备方案\n            this.node.addChild(orbNode);\n            orbNode.setPosition(position);\n        }\n    }\n\n    private resetBall(): void {\n        if (this._ballNode) {\n            const ballScript = this._ballNode.getComponent('EnhancedBall') || this._ballNode.getComponent('Ball');\n            if (ballScript && typeof (ballScript as any).resetBall === 'function') {\n                (ballScript as any).resetBall();\n            }\n        }\n    }\n\n    private checkLevelComplete(): void {\n        // 暂时简化：直接完成关卡，不检查Boss类型\n        this.onLevelComplete();\n        \n        /*\n        const levelType = this._levelManager ? this._levelManager.getCurrentLevelType() : LevelType.NORMAL;\n        \n        if (levelType === LevelType.BOSS) {\n            // Boss levels complete when boss is defeated (handled in onBossDefeated)\n            return;\n        }\n        \n        this.onLevelComplete();\n        */\n    }\n\n    public onLevelComplete(): void {\n        this.setState(GameState.LEVEL_COMPLETE);\n        this.level++;\n\n        // 关卡完成奖励经验\n        const expManager = ExperienceManager.getInstance();\n        if (expManager) {\n            expManager.addExperience(50); // 关卡完成奖励50经验\n            \n        }\n\n        const relicManager = RelicManager.getInstance();\n        if (relicManager) {\n            relicManager.grantRandomRelic();\n        }\n\n        // Reset level manager for next level\n        if (this._levelManager) {\n            this._levelManager.resetLevel();\n            this._levelManager.adjustDifficulty(this.level);\n        }\n\n        this.scheduleOnce(() => {\n            this.setupLevel();\n            this.setState(GameState.PLAYING);\n        }, 3.0);\n    }\n\n    public setState(newState: GameState): void {\n        try {\n            if (!newState || typeof newState !== 'string') {\n                \n                return;\n            }\n\n            const validStates = Object.values(GameState);\n            if (!validStates.includes(newState as GameState)) {\n                \n                return;\n            }\n\n            const oldState = this._currentState;\n            this._currentState = newState;\n            \n            \n            \n            // Handle state-specific logic\n            this.onStateChanged(oldState, newState);\n            \n        } catch (error) {\n            \n        }\n    }\n\n    private onStateChanged(_oldState: GameState, newState: GameState): void {\n        try {\n            switch (newState) {\n                case GameState.GAME_OVER:\n                    this.handleGameOver();\n                    break;\n                case GameState.LEVEL_COMPLETE:\n                    this.handleLevelComplete();\n                    break;\n                case GameState.PLAYING:\n                    this.handleGamePlaying();\n                    break;\n            }\n        } catch (error) {\n            \n        }\n    }\n\n    private handleGameOver(): void {\n        \n        // Stop any ongoing animations or sounds\n        // Save final score if needed\n    }\n\n    private handleLevelComplete(): void {\n        \n        // Award experience, update progression\n    }\n\n    private handleGamePlaying(): void {\n        \n        // Ensure all game systems are ready\n    }\n\n    public getCurrentState(): GameState {\n        return this._currentState;\n    }\n\n    public getBallPrefab(): Prefab | null {\n        return this.ballPrefab;\n    }\n\n    public getScore(): number {\n        return this.score;\n    }\n\n    public getLives(): number {\n        return this.lives;\n    }\n\n    public getLevel(): number {\n        return this.level;\n    }\n\n    // 添加测试期望的方法\n    public getBrickCount(): number {\n        return this._bricks.length;\n    }\n\n    public getBricks(): Node[] {\n        return this._bricks;\n    }\n\n    public getBallNode(): Node | null {\n        return this._ballNode;\n    }\n\n    public getPaddleNode(): Node | null {\n        return this._paddleNode;\n    }\n\n    public getPaddle(): any {\n        if (this._paddleNode) {\n            return this._paddleNode.getComponent('EnhancedPaddleController') ||\n                   this._paddleNode.getComponent('PaddleController');\n        }\n        return null;\n    }\n\n    public addLife(amount: number): void {\n        this.lives += amount;\n        \n    }\n\n    public getCoreController(): CoreController | null {\n        return this._coreController;\n    }\n\n    public getLevelManager(): LevelManager | null {\n        return this._levelManager;\n    }\n\n    public getGameState(): GameState {\n        return this._currentState;\n    }\n\n    public addScore(points: number): void {\n        this.score += points;\n        \n    }\n\n    public decreaseLives(amount: number = 1): void {\n        this.lives = Math.max(0, this.lives - amount);\n        \n        \n        if (this.lives <= 0) {\n            this.setState(GameState.GAME_OVER);\n        }\n    }\n}"]}