{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/EnhancedBossController.ts"],"names":["_decorator","Component","Node","Vec3","RigidBody2D","Collider2D","Contact2DType","Sprite","Color","tween","Prefab","instantiate","math","Vec2","GameManager","EnhancedBrick","BrickType","ccclass","property","BossType","BossPhase","EnhancedBossController","type","_currentHealth","_currentPhase","PHASE_1","_isAttacking","_lastAttackTime","_attackCooldown","_phaseTransitionHealth","_rigidBody","_sprite","_collider","_attackPatterns","_spawnedObjects","_moveDirection","_specialTimer","_enragedMode","onLoad","getComponent","maxHealth","initializeBossType","setupCollisionHandling","scaleStatsForChapter","start","startBossBehavior","update","dt","updateMovement","updateAttackPatterns","updateSpecialBehavior","checkPhaseTransitions","bossType","GUARDIAN_WALL","initializeGuardianWall","STORM_CALLER","initializeStormCaller","BRICK_SPAWNER","initializeBrickSpawner","GRAVITY_MASTER","initializeGravityMaster","TIME_MANIPULATOR","initializeTimeManipulator","SHIELD_GENERATOR","initializeShieldGenerator","MULTI_PHASE","initializeMultiPhase","TELEPORTER","initializeTeleporter","ELEMENTAL_CHAOS","initializeElementalChaos","MIRROR_BOSS","initializeMirrorBoss","setBossColor","name","cooldown","damage","range","execute","regenerateShieldBricks","createDefensiveBarrier","createWindGust","lightningStrike","createTornado","spawnBasicBricks","spawnEliteBricks","createBrickRain","flipGravity","createGravityWell","activateZeroGravity","slowTime","accelerateTime","createTemporalRift","shieldAllBricks","energyPulse","phaseSpecificAttack","teleportSelf","teleportBricks","teleportBall","randomElementalAttack","elementalStorm","mirrorPaddleMovement","copyBallMovement","chapterMultiplier","chapter","Math","floor","attackPower","map","threshold","color","getRandomElementalColor","on","BEGIN_CONTACT","onBeginContact","selfCollider","otherCollider","contact","ball","takeDamage","laser","max","showDamageEffect","console","log","onBossDefeated","floatingMovement","horizontalMovement","position","node","getWorldPosition","velocity","multiplyScalar","x","moveSpeed","linearVelocity","time","sin","y","cos","setWorldPosition","worldPosition","pattern","executeAttackPattern","scheduleOnce","changeElementalColor","updateMultiPhaseVisuals","newPhase","ENRAGED","PHASE_3","PHASE_2","transitionToPhase","adjustAttackPatternsForPhase","showPhaseTransitionEffect","phase","speedMultiplier","damageMultiplier","bricks","parent","getComponentsInChildren","regenerated","brick","currentHealth","health","showRegenerationEffect","brickPrefab","positions","pos","barrier","brickType","SHIELD","setParent","add","push","balls","windForce","randomRangeInt","rigidBody","applyForceToCenter","paddleController","getComponentInChildren","tornado","destroy","i","brickComponent","NORMAL","randomX","randomY","eliteTypes","REINFORCED","EXPLOSIVE","ELECTRIC","random","length","colors","alpha","r","g","b","to","WHITE","RED","target","sprite","GREEN","obj","isValid","gameManager","getInstance","TRANSPARENT","call","maxHealthValue","currentPhase","isEnraged"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, RigidBody2D, Collider2D, Contact2DType, IPhysics2DContact, Sprite, Color, tween, Prefab, instantiate, math, Vec2 } from 'cc';\r\nimport { GameManager } from './GameManager';\r\nimport { EnhancedBrick, BrickType } from './EnhancedBrick';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum BossType {\r\n    GUARDIAN_WALL = 0,      // 守护墙Boss - 生成保护砖块\r\n    STORM_CALLER = 1,       // 风暴召唤者 - 改变球轨迹\r\n    BRICK_SPAWNER = 2,      // 砖块生成器 - 持续生成新砖块\r\n    GRAVITY_MASTER = 3,     // 重力主宰 - 控制重力方向\r\n    TIME_MANIPULATOR = 4,   // 时间操控者 - 影响游戏时间\r\n    SHIELD_GENERATOR = 5,   // 护盾生成器 - 为砖块提供护盾\r\n    MULTI_PHASE = 6,        // 多相位Boss - 多个阶段形态\r\n    TELEPORTER = 7,         // 传送者 - 传送砖块和球\r\n    ELEMENTAL_CHAOS = 8,    // 元素混沌 - 随机元素攻击\r\n    MIRROR_BOSS = 9         // 镜像Boss - 复制玩家行为\r\n}\r\n\r\nexport enum BossPhase {\r\n    PHASE_1 = 0,\r\n    PHASE_2 = 1, \r\n    PHASE_3 = 2,\r\n    ENRAGED = 3\r\n}\r\n\r\ninterface BossAttackPattern {\r\n    name: string;\r\n    cooldown: number;\r\n    damage: number;\r\n    range: number;\r\n    execute: () => void;\r\n}\r\n\r\n@ccclass('EnhancedBossController')\r\nexport class EnhancedBossController extends Component {\r\n    @property({type: BossType})\r\n    public bossType: BossType = BossType.GUARDIAN_WALL;\r\n    \r\n    @property\r\n    public maxHealth: number = 100;\r\n    \r\n    @property\r\n    public attackPower: number = 10;\r\n    \r\n    @property\r\n    public moveSpeed: number = 100;\r\n    \r\n    @property\r\n    public chapter: number = 1;\r\n    \r\n    @property({type: Prefab})\r\n    public brickPrefab: Prefab | null = null;\r\n    \r\n    @property({type: Prefab})\r\n    public projectilePrefab: Prefab | null = null;\r\n    \r\n    // Boss state\r\n    private _currentHealth: number = 0;\r\n    private _currentPhase: BossPhase = BossPhase.PHASE_1;\r\n    private _isAttacking: boolean = false;\r\n    private _lastAttackTime: number = 0;\r\n    private _attackCooldown: number = 3.0;\r\n    private _phaseTransitionHealth: number[] = [0.75, 0.5, 0.25];\r\n    \r\n    // Components\r\n    private _rigidBody: RigidBody2D | null = null;\r\n    private _sprite: Sprite | null = null;\r\n    private _collider: Collider2D | null = null;\r\n    \r\n    // Boss-specific data\r\n    private _attackPatterns: BossAttackPattern[] = [];\r\n    private _spawnedObjects: Node[] = [];\r\n    private _moveDirection: Vec3 = new Vec3(1, 0, 0);\r\n    private _specialTimer: number = 0;\r\n    private _enragedMode: boolean = false;\r\n    \r\n    protected onLoad(): void {\r\n        this._rigidBody = this.getComponent(RigidBody2D);\r\n        this._sprite = this.getComponent(Sprite);\r\n        this._collider = this.getComponent(Collider2D);\r\n        \r\n        this._currentHealth = this.maxHealth;\r\n        this.initializeBossType();\r\n        this.setupCollisionHandling();\r\n        \r\n        // Scale stats based on chapter\r\n        this.scaleStatsForChapter();\r\n    }\r\n    \r\n    protected start(): void {\r\n        this.startBossBehavior();\r\n    }\r\n    \r\n    protected update(dt: number): void {\r\n        this._lastAttackTime += dt;\r\n        this._specialTimer += dt;\r\n        \r\n        this.updateMovement(dt);\r\n        this.updateAttackPatterns(dt);\r\n        this.updateSpecialBehavior(dt);\r\n        this.checkPhaseTransitions();\r\n    }\r\n    \r\n    private initializeBossType(): void {\r\n        switch (this.bossType) {\r\n            case BossType.GUARDIAN_WALL:\r\n                this.initializeGuardianWall();\r\n                break;\r\n            case BossType.STORM_CALLER:\r\n                this.initializeStormCaller();\r\n                break;\r\n            case BossType.BRICK_SPAWNER:\r\n                this.initializeBrickSpawner();\r\n                break;\r\n            case BossType.GRAVITY_MASTER:\r\n                this.initializeGravityMaster();\r\n                break;\r\n            case BossType.TIME_MANIPULATOR:\r\n                this.initializeTimeManipulator();\r\n                break;\r\n            case BossType.SHIELD_GENERATOR:\r\n                this.initializeShieldGenerator();\r\n                break;\r\n            case BossType.MULTI_PHASE:\r\n                this.initializeMultiPhase();\r\n                break;\r\n            case BossType.TELEPORTER:\r\n                this.initializeTeleporter();\r\n                break;\r\n            case BossType.ELEMENTAL_CHAOS:\r\n                this.initializeElementalChaos();\r\n                break;\r\n            case BossType.MIRROR_BOSS:\r\n                this.initializeMirrorBoss();\r\n                break;\r\n        }\r\n        \r\n        this.setBossColor();\r\n    }\r\n    \r\n    private initializeGuardianWall(): void {\r\n        this._attackPatterns = [\r\n            {\r\n                name: 'Shield Regeneration',\r\n                cooldown: 5.0,\r\n                damage: 0,\r\n                range: 200,\r\n                execute: () => this.regenerateShieldBricks()\r\n            },\r\n            {\r\n                name: 'Defensive Burst',\r\n                cooldown: 8.0,\r\n                damage: 15,\r\n                range: 150,\r\n                execute: () => this.createDefensiveBarrier()\r\n            }\r\n        ];\r\n    }\r\n    \r\n    private initializeStormCaller(): void {\r\n        this._attackPatterns = [\r\n            {\r\n                name: 'Wind Gust',\r\n                cooldown: 3.0,\r\n                damage: 0,\r\n                range: 300,\r\n                execute: () => this.createWindGust()\r\n            },\r\n            {\r\n                name: 'Lightning Strike',\r\n                cooldown: 6.0,\r\n                damage: 20,\r\n                range: 100,\r\n                execute: () => this.lightningStrike()\r\n            },\r\n            {\r\n                name: 'Tornado',\r\n                cooldown: 12.0,\r\n                damage: 25,\r\n                range: 200,\r\n                execute: () => this.createTornado()\r\n            }\r\n        ];\r\n    }\r\n    \r\n    private initializeBrickSpawner(): void {\r\n        this._attackPatterns = [\r\n            {\r\n                name: 'Spawn Basic Bricks',\r\n                cooldown: 4.0,\r\n                damage: 0,\r\n                range: 0,\r\n                execute: () => this.spawnBasicBricks()\r\n            },\r\n            {\r\n                name: 'Spawn Elite Bricks',\r\n                cooldown: 8.0,\r\n                damage: 0,\r\n                range: 0,\r\n                execute: () => this.spawnEliteBricks()\r\n            },\r\n            {\r\n                name: 'Brick Rain',\r\n                cooldown: 15.0,\r\n                damage: 30,\r\n                range: 400,\r\n                execute: () => this.createBrickRain()\r\n            }\r\n        ];\r\n    }\r\n    \r\n    private initializeGravityMaster(): void {\r\n        this._attackPatterns = [\r\n            {\r\n                name: 'Gravity Flip',\r\n                cooldown: 8.0,\r\n                damage: 0,\r\n                range: 0,\r\n                execute: () => this.flipGravity()\r\n            },\r\n            {\r\n                name: 'Gravity Well',\r\n                cooldown: 10.0,\r\n                damage: 15,\r\n                range: 150,\r\n                execute: () => this.createGravityWell()\r\n            },\r\n            {\r\n                name: 'Zero Gravity',\r\n                cooldown: 20.0,\r\n                damage: 0,\r\n                range: 0,\r\n                execute: () => this.activateZeroGravity()\r\n            }\r\n        ];\r\n    }\r\n    \r\n    private initializeTimeManipulator(): void {\r\n        this._attackPatterns = [\r\n            {\r\n                name: 'Time Slow',\r\n                cooldown: 6.0,\r\n                damage: 0,\r\n                range: 0,\r\n                execute: () => this.slowTime()\r\n            },\r\n            {\r\n                name: 'Time Acceleration',\r\n                cooldown: 12.0,\r\n                damage: 20,\r\n                range: 0,\r\n                execute: () => this.accelerateTime()\r\n            },\r\n            {\r\n                name: 'Temporal Rift',\r\n                cooldown: 18.0,\r\n                damage: 35,\r\n                range: 200,\r\n                execute: () => this.createTemporalRift()\r\n            }\r\n        ];\r\n    }\r\n    \r\n    private initializeShieldGenerator(): void {\r\n        this._attackPatterns = [\r\n            {\r\n                name: 'Shield All Bricks',\r\n                cooldown: 10.0,\r\n                damage: 0,\r\n                range: 0,\r\n                execute: () => this.shieldAllBricks()\r\n            },\r\n            {\r\n                name: 'Energy Pulse',\r\n                cooldown: 7.0,\r\n                damage: 18,\r\n                range: 250,\r\n                execute: () => this.energyPulse()\r\n            }\r\n        ];\r\n    }\r\n    \r\n    private initializeMultiPhase(): void {\r\n        this._attackPatterns = [\r\n            {\r\n                name: 'Phase Attack',\r\n                cooldown: 4.0,\r\n                damage: 15,\r\n                range: 200,\r\n                execute: () => this.phaseSpecificAttack()\r\n            }\r\n        ];\r\n    }\r\n    \r\n    private initializeTeleporter(): void {\r\n        this._attackPatterns = [\r\n            {\r\n                name: 'Teleport Self',\r\n                cooldown: 5.0,\r\n                damage: 0,\r\n                range: 0,\r\n                execute: () => this.teleportSelf()\r\n            },\r\n            {\r\n                name: 'Teleport Bricks',\r\n                cooldown: 8.0,\r\n                damage: 0,\r\n                range: 0,\r\n                execute: () => this.teleportBricks()\r\n            },\r\n            {\r\n                name: 'Teleport Ball',\r\n                cooldown: 6.0,\r\n                damage: 10,\r\n                range: 0,\r\n                execute: () => this.teleportBall()\r\n            }\r\n        ];\r\n    }\r\n    \r\n    private initializeElementalChaos(): void {\r\n        this._attackPatterns = [\r\n            {\r\n                name: 'Random Elemental',\r\n                cooldown: 3.0,\r\n                damage: 20,\r\n                range: 180,\r\n                execute: () => this.randomElementalAttack()\r\n            },\r\n            {\r\n                name: 'Elemental Storm',\r\n                cooldown: 15.0,\r\n                damage: 40,\r\n                range: 300,\r\n                execute: () => this.elementalStorm()\r\n            }\r\n        ];\r\n    }\r\n    \r\n    private initializeMirrorBoss(): void {\r\n        this._attackPatterns = [\r\n            {\r\n                name: 'Mirror Paddle',\r\n                cooldown: 2.0,\r\n                damage: 0,\r\n                range: 0,\r\n                execute: () => this.mirrorPaddleMovement()\r\n            },\r\n            {\r\n                name: 'Copy Ball',\r\n                cooldown: 8.0,\r\n                damage: 0,\r\n                range: 0,\r\n                execute: () => this.copyBallMovement()\r\n            }\r\n        ];\r\n    }\r\n    \r\n    private scaleStatsForChapter(): void {\r\n        const chapterMultiplier = 1 + (this.chapter - 1) * 0.5;\r\n        this.maxHealth = Math.floor(this.maxHealth * chapterMultiplier);\r\n        this._currentHealth = this.maxHealth;\r\n        this.attackPower = Math.floor(this.attackPower * chapterMultiplier);\r\n        \r\n        // Update phase transition thresholds\r\n        this._phaseTransitionHealth = this._phaseTransitionHealth.map(threshold => \r\n            Math.floor(this.maxHealth * threshold)\r\n        );\r\n    }\r\n    \r\n    private setBossColor(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        switch (this.bossType) {\r\n            case BossType.GUARDIAN_WALL:\r\n                this._sprite.color = new Color(100, 100, 255); // Blue\r\n                break;\r\n            case BossType.STORM_CALLER:\r\n                this._sprite.color = new Color(200, 200, 200); // Gray\r\n                break;\r\n            case BossType.BRICK_SPAWNER:\r\n                this._sprite.color = new Color(139, 69, 19); // Brown\r\n                break;\r\n            case BossType.GRAVITY_MASTER:\r\n                this._sprite.color = new Color(128, 0, 128); // Purple\r\n                break;\r\n            case BossType.TIME_MANIPULATOR:\r\n                this._sprite.color = new Color(255, 215, 0); // Gold\r\n                break;\r\n            case BossType.SHIELD_GENERATOR:\r\n                this._sprite.color = new Color(0, 255, 255); // Cyan\r\n                break;\r\n            case BossType.MULTI_PHASE:\r\n                this._sprite.color = new Color(255, 0, 255); // Magenta\r\n                break;\r\n            case BossType.TELEPORTER:\r\n                this._sprite.color = new Color(255, 165, 0); // Orange\r\n                break;\r\n            case BossType.ELEMENTAL_CHAOS:\r\n                this._sprite.color = this.getRandomElementalColor();\r\n                break;\r\n            case BossType.MIRROR_BOSS:\r\n                this._sprite.color = new Color(192, 192, 192); // Silver\r\n                break;\r\n        }\r\n    }\r\n    \r\n    private setupCollisionHandling(): void {\r\n        if (!this._collider) return;\r\n        \r\n        this._collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n    }\r\n    \r\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null): void {\r\n        // Handle collision with ball or projectiles\r\n        const ball = otherCollider.getComponent('EnhancedBall') as any;\r\n        if (ball) {\r\n            this.takeDamage(ball.damage || 1);\r\n        }\r\n        \r\n        // Handle collision with laser or other attacks\r\n        const laser = otherCollider.getComponent('Laser') as any;\r\n        if (laser) {\r\n            this.takeDamage(laser.damage || 5);\r\n        }\r\n    }\r\n    \r\n    public takeDamage(damage: number): void {\r\n        this._currentHealth = Math.max(0, this._currentHealth - damage);\r\n        this.showDamageEffect();\r\n        \r\n        console.log(`Boss took ${damage} damage. Health: ${this._currentHealth}/${this.maxHealth}`);\r\n        \r\n        if (this._currentHealth <= 0) {\r\n            this.onBossDefeated();\r\n        }\r\n    }\r\n    \r\n    private updateMovement(dt: number): void {\r\n        if (!this._rigidBody) return;\r\n        \r\n        switch (this.bossType) {\r\n            case BossType.GUARDIAN_WALL:\r\n                // Stationary boss\r\n                break;\r\n            case BossType.STORM_CALLER:\r\n                this.floatingMovement(dt);\r\n                break;\r\n            case BossType.TELEPORTER:\r\n                // Movement handled by teleportation\r\n                break;\r\n            default:\r\n                this.horizontalMovement(dt);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    private horizontalMovement(dt: number): void {\r\n        const position = this.node.getWorldPosition();\r\n        const velocity = Vec2.multiplyScalar(new Vec2(), new Vec2(this._moveDirection.x, 0), this.moveSpeed);\r\n        \r\n        // Bounce off screen edges\r\n        if (position.x <= -400 || position.x >= 400) {\r\n            this._moveDirection.x *= -1;\r\n        }\r\n        \r\n        if (this._rigidBody) {\r\n            this._rigidBody.linearVelocity = velocity;\r\n        }\r\n    }\r\n    \r\n    private floatingMovement(dt: number): void {\r\n        const time = this._specialTimer;\r\n        const x = Math.sin(time * 2) * 150;\r\n        const y = Math.cos(time * 1.5) * 50;\r\n        \r\n        this.node.setWorldPosition(x, this.node.worldPosition.y + y * dt * 0.1, 0);\r\n    }\r\n    \r\n    private updateAttackPatterns(dt: number): void {\r\n        if (this._isAttacking) return;\r\n        \r\n        for (const pattern of this._attackPatterns) {\r\n            if (this._lastAttackTime >= pattern.cooldown) {\r\n                this.executeAttackPattern(pattern);\r\n                this._lastAttackTime = 0;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    private executeAttackPattern(pattern: BossAttackPattern): void {\r\n        console.log(`Boss executing: ${pattern.name}`);\r\n        this._isAttacking = true;\r\n        \r\n        pattern.execute();\r\n        \r\n        // Reset attack state after a short delay\r\n        this.scheduleOnce(() => {\r\n            this._isAttacking = false;\r\n        }, 1.0);\r\n    }\r\n    \r\n    private updateSpecialBehavior(dt: number): void {\r\n        switch (this.bossType) {\r\n            case BossType.ELEMENTAL_CHAOS:\r\n                if (this._specialTimer >= 1.0) {\r\n                    this.changeElementalColor();\r\n                    this._specialTimer = 0;\r\n                }\r\n                break;\r\n            case BossType.MULTI_PHASE:\r\n                this.updateMultiPhaseVisuals();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    private checkPhaseTransitions(): void {\r\n        let newPhase = this._currentPhase;\r\n        \r\n        if (this._currentHealth <= this._phaseTransitionHealth[2] && this._currentPhase < BossPhase.ENRAGED) {\r\n            newPhase = BossPhase.ENRAGED;\r\n        } else if (this._currentHealth <= this._phaseTransitionHealth[1] && this._currentPhase < BossPhase.PHASE_3) {\r\n            newPhase = BossPhase.PHASE_3;\r\n        } else if (this._currentHealth <= this._phaseTransitionHealth[0] && this._currentPhase < BossPhase.PHASE_2) {\r\n            newPhase = BossPhase.PHASE_2;\r\n        }\r\n        \r\n        if (newPhase !== this._currentPhase) {\r\n            this.transitionToPhase(newPhase);\r\n        }\r\n    }\r\n    \r\n    private transitionToPhase(newPhase: BossPhase): void {\r\n        console.log(`Boss transitioning to phase ${newPhase}`);\r\n        this._currentPhase = newPhase;\r\n        \r\n        // Adjust attack patterns based on phase\r\n        this.adjustAttackPatternsForPhase(newPhase);\r\n        \r\n        // Visual effects for phase transition\r\n        this.showPhaseTransitionEffect();\r\n        \r\n        if (newPhase === BossPhase.ENRAGED) {\r\n            this._enragedMode = true;\r\n            this.attackPower *= 1.5;\r\n            this._attackCooldown *= 0.7; // Attack faster\r\n        }\r\n    }\r\n    \r\n    private adjustAttackPatternsForPhase(phase: BossPhase): void {\r\n        const speedMultiplier = 1 + phase * 0.2;\r\n        const damageMultiplier = 1 + phase * 0.3;\r\n        \r\n        for (const pattern of this._attackPatterns) {\r\n            pattern.cooldown /= speedMultiplier;\r\n            pattern.damage = Math.floor(pattern.damage * damageMultiplier);\r\n        }\r\n    }\r\n    \r\n    // Attack pattern implementations\r\n    private regenerateShieldBricks(): void {\r\n        const bricks = this.node.parent?.getComponentsInChildren(EnhancedBrick) || [];\r\n        let regenerated = 0;\r\n        \r\n        for (const brick of bricks) {\r\n            if (brick.currentHealth < brick.maxHealth && regenerated < 3) {\r\n                brick.health = brick.maxHealth;\r\n                this.showRegenerationEffect(brick.node);\r\n                regenerated++;\r\n            }\r\n        }\r\n    }\r\n    \r\n    private createDefensiveBarrier(): void {\r\n        if (!this.brickPrefab) return;\r\n        \r\n        // Create a protective barrier around the boss\r\n        const positions = [\r\n            new Vec3(-100, -50, 0),\r\n            new Vec3(100, -50, 0),\r\n            new Vec3(-100, 50, 0),\r\n            new Vec3(100, 50, 0)\r\n        ];\r\n        \r\n        for (const pos of positions) {\r\n            const barrier = instantiate(this.brickPrefab);\r\n            const brick = barrier.getComponent(EnhancedBrick);\r\n            if (brick) {\r\n                brick.brickType = BrickType.SHIELD;\r\n                brick.health = 5;\r\n            }\r\n            \r\n            barrier.setParent(this.node.parent);\r\n            barrier.setWorldPosition(this.node.worldPosition.add(pos));\r\n            this._spawnedObjects.push(barrier);\r\n        }\r\n    }\r\n    \r\n    private createWindGust(): void {\r\n        // Apply force to all balls in the scene\r\n        const balls = this.node.parent?.getComponentsInChildren('EnhancedBall') || [];\r\n        const windForce = new Vec2(math.randomRangeInt(-500, 500), math.randomRangeInt(-200, 200));\r\n        \r\n        for (const ball of balls) {\r\n            const rigidBody = ball.getComponent(RigidBody2D);\r\n            if (rigidBody) {\r\n                rigidBody.applyForceToCenter(windForce, true);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private lightningStrike(): void {\r\n        // Create lightning at random positions\r\n        const paddleController = this.node.parent?.getComponentInChildren('EnhancedPaddleController') as any;\r\n        if (paddleController) {\r\n            paddleController.takeDamage(this.attackPower);\r\n        }\r\n    }\r\n    \r\n    private createTornado(): void {\r\n        // Create a spinning force field\r\n        const tornado = new Node('Tornado');\r\n        tornado.setParent(this.node.parent);\r\n        tornado.setWorldPosition(new Vec3(math.randomRangeInt(-300, 300), 0, 0));\r\n        \r\n        // Tornado effect would be implemented with custom component\r\n        this._spawnedObjects.push(tornado);\r\n        \r\n        // Auto-destroy after 5 seconds\r\n        this.scheduleOnce(() => {\r\n            tornado.destroy();\r\n        }, 5.0);\r\n    }\r\n    \r\n    private spawnBasicBricks(): void {\r\n        if (!this.brickPrefab) return;\r\n        \r\n        for (let i = 0; i < 3; i++) {\r\n            const brick = instantiate(this.brickPrefab);\r\n            const brickComponent = brick.getComponent(EnhancedBrick);\r\n            if (brickComponent) {\r\n                brickComponent.brickType = BrickType.NORMAL;\r\n            }\r\n            \r\n            brick.setParent(this.node.parent);\r\n            const randomX = math.randomRangeInt(-300, 300);\r\n            const randomY = math.randomRangeInt(100, 300);\r\n            brick.setWorldPosition(randomX, randomY, 0);\r\n            this._spawnedObjects.push(brick);\r\n        }\r\n    }\r\n    \r\n    private spawnEliteBricks(): void {\r\n        if (!this.brickPrefab) return;\r\n        \r\n        const eliteTypes = [BrickType.REINFORCED, BrickType.EXPLOSIVE, BrickType.ELECTRIC];\r\n        \r\n        for (let i = 0; i < 2; i++) {\r\n            const brick = instantiate(this.brickPrefab);\r\n            const brickComponent = brick.getComponent(EnhancedBrick);\r\n            if (brickComponent) {\r\n                brickComponent.brickType = eliteTypes[Math.floor(Math.random() * eliteTypes.length)];\r\n            }\r\n            \r\n            brick.setParent(this.node.parent);\r\n            const randomX = math.randomRangeInt(-300, 300);\r\n            const randomY = math.randomRangeInt(100, 300);\r\n            brick.setWorldPosition(randomX, randomY, 0);\r\n            this._spawnedObjects.push(brick);\r\n        }\r\n    }\r\n    \r\n    // Additional attack implementations would continue...\r\n    private createBrickRain(): void { console.log('Brick rain attack'); }\r\n    private flipGravity(): void { console.log('Gravity flipped'); }\r\n    private createGravityWell(): void { console.log('Gravity well created'); }\r\n    private activateZeroGravity(): void { console.log('Zero gravity activated'); }\r\n    private slowTime(): void { console.log('Time slowed'); }\r\n    private accelerateTime(): void { console.log('Time accelerated'); }\r\n    private createTemporalRift(): void { console.log('Temporal rift created'); }\r\n    private shieldAllBricks(): void { console.log('All bricks shielded'); }\r\n    private energyPulse(): void { console.log('Energy pulse released'); }\r\n    private phaseSpecificAttack(): void { console.log('Phase-specific attack'); }\r\n    private teleportSelf(): void { console.log('Boss teleported'); }\r\n    private teleportBricks(): void { console.log('Bricks teleported'); }\r\n    private teleportBall(): void { console.log('Ball teleported'); }\r\n    private randomElementalAttack(): void { console.log('Random elemental attack'); }\r\n    private elementalStorm(): void { console.log('Elemental storm'); }\r\n    private mirrorPaddleMovement(): void { console.log('Mirroring paddle movement'); }\r\n    private copyBallMovement(): void { console.log('Copying ball movement'); }\r\n    \r\n    // Utility methods\r\n    private getRandomElementalColor(): Color {\r\n        const colors = [\r\n            new Color(255, 0, 0),   // Red (Fire)\r\n            new Color(0, 0, 255),   // Blue (Ice)\r\n            new Color(255, 255, 0), // Yellow (Electric)\r\n            new Color(0, 255, 0)    // Green (Poison)\r\n        ];\r\n        return colors[Math.floor(Math.random() * colors.length)];\r\n    }\r\n    \r\n    private changeElementalColor(): void {\r\n        if (this._sprite && this.bossType === BossType.ELEMENTAL_CHAOS) {\r\n            this._sprite.color = this.getRandomElementalColor();\r\n        }\r\n    }\r\n    \r\n    private updateMultiPhaseVisuals(): void {\r\n        if (this._sprite) {\r\n            const alpha = 150 + Math.sin(this._specialTimer * 4) * 50;\r\n            this._sprite.color = new Color(this._sprite.color.r, this._sprite.color.g, this._sprite.color.b, alpha);\r\n        }\r\n    }\r\n    \r\n    private showDamageEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.1, { color: Color.WHITE })\r\n            .to(0.1, { color: this._sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private showPhaseTransitionEffect(): void {\r\n        if (!this._sprite) return;\r\n        \r\n        tween(this._sprite)\r\n            .to(0.5, { color: Color.RED })\r\n            .to(0.5, { color: this._sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private showRegenerationEffect(target: Node): void {\r\n        const sprite = target.getComponent(Sprite);\r\n        if (!sprite) return;\r\n        \r\n        tween(sprite)\r\n            .to(0.3, { color: Color.GREEN })\r\n            .to(0.3, { color: sprite.color })\r\n            .start();\r\n    }\r\n    \r\n    private startBossBehavior(): void {\r\n        console.log(`${BossType[this.bossType]} Boss activated - Chapter ${this.chapter}`);\r\n        console.log(`Boss Health: ${this._currentHealth}/${this.maxHealth}`);\r\n    }\r\n    \r\n    private onBossDefeated(): void {\r\n        console.log(`Boss defeated! ${BossType[this.bossType]} has fallen.`);\r\n        \r\n        // Clean up spawned objects\r\n        for (const obj of this._spawnedObjects) {\r\n            if (obj && obj.isValid) {\r\n                obj.destroy();\r\n            }\r\n        }\r\n        \r\n        // Notify GameManager\r\n        const gameManager = GameManager.getInstance();\r\n        if (gameManager && (gameManager as any).onBossDefeated) {\r\n            (gameManager as any).onBossDefeated(this.bossType, this.chapter);\r\n        }\r\n        \r\n        // Boss death animation\r\n        if (this._sprite) {\r\n            tween(this._sprite)\r\n                .to(1.0, { color: Color.TRANSPARENT })\r\n                .call(() => this.node.destroy())\r\n                .start();\r\n        }\r\n    }\r\n    \r\n    // Public accessors\r\n    public get currentHealth(): number { return this._currentHealth; }\r\n    public get maxHealthValue(): number { return this.maxHealth; }\r\n    public get currentPhase(): BossPhase { return this._currentPhase; }\r\n    public get isEnraged(): boolean { return this._enragedMode; }\r\n}"]}