{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/core/PaddleController.ts"],"names":["_decorator","Component","input","Input","Vec3","UITransform","Canvas","ccclass","property","PaddleController","_canvasComponent","_uiTransform","_camera","_isTouching","_lastTouchX","_screenWidth","onLoad","getComponent","node","parent","cameraComponent","onEnable","on","EventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","MOUSE_MOVE","onMouseMove","onDisable","off","moveLeft","deltaTime","currentPos","getPosition","newX","x","speed","clampedX","clampToScreenBounds","setPosition","y","z","moveRight","leftBound","paddleWidth","boundaryMargin","rightBound","Math","max","min","event","touches","getTouches","length","touch","getLocationX","updatePaddlePosition","getLocation","screenPos","worldPos","screenToWorld","localPos","convertToNodeSpaceAR","position","isTouching","lastTouchX","screenWidth","value"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, input, Input, EventTouch, Vec3, UITransform, Canvas, Camera, Vec2, Touch } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PaddleController')\r\nexport class PaddleController extends Component {\r\n    @property\r\n    public speed: number = 300;\r\n    \r\n    @property\r\n    public paddleWidth: number = 100;\r\n    \r\n    @property\r\n    public boundaryMargin: number = 50;\r\n\r\n    @property\r\n    public moveSpeed: number = 500;\r\n\r\n    private _canvasComponent: Canvas | null = null;\r\n    private _uiTransform: UITransform | null = null;\r\n    private _camera: Camera | null = null;\r\n    private _isTouching: boolean = false;\r\n    private _lastTouchX: number = 0;\r\n    private _screenWidth: number = 960;\r\n    \r\n    protected onLoad(): void {\r\n        this._uiTransform = this.getComponent(UITransform);\r\n        this._canvasComponent = this.node.parent?.getComponent(Canvas) || null;\r\n        this._camera = this._canvasComponent?.cameraComponent || null;\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);\r\n        input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        input.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);\r\n        input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        input.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        input.off(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n    }\r\n\r\n    // 测试需要的移动方法\r\n    public moveLeft(deltaTime: number): void {\r\n        const currentPos = this.node.getPosition();\r\n        const newX = currentPos.x - this.speed * deltaTime;\r\n        const clampedX = this.clampToScreenBounds(newX);\r\n        this.node.setPosition(clampedX, currentPos.y, currentPos.z);\r\n    }\r\n\r\n    public moveRight(deltaTime: number): void {\r\n        const currentPos = this.node.getPosition();\r\n        const newX = currentPos.x + this.speed * deltaTime;\r\n        const clampedX = this.clampToScreenBounds(newX);\r\n        this.node.setPosition(clampedX, currentPos.y, currentPos.z);\r\n    }\r\n\r\n    private clampToScreenBounds(x: number): number {\r\n        const leftBound = -(this._screenWidth / 2) + (this.paddleWidth / 2) + this.boundaryMargin;\r\n        const rightBound = (this._screenWidth / 2) - (this.paddleWidth / 2) - this.boundaryMargin;\r\n        return Math.max(leftBound, Math.min(rightBound, x));\r\n    }\r\n\r\n    private onTouchStart(event: EventTouch): void {\r\n        const touches = event.getTouches();\r\n        if (touches.length > 0) {\r\n            const touch = touches[0];\r\n            this._isTouching = true;\r\n            this._lastTouchX = touch.getLocationX();\r\n        }\r\n    }\r\n\r\n    private onTouchEnd(event: EventTouch): void {\r\n        this._isTouching = false;\r\n    }\r\n\r\n    private onTouchMove(event: EventTouch): void {\r\n        this.updatePaddlePosition(event.getLocation());\r\n    }\r\n\r\n    private onMouseMove(event: any): void {\r\n        this.updatePaddlePosition(event.getLocation());\r\n    }\r\n\r\n    private updatePaddlePosition(screenPos: Vec2): void {\r\n        if (!this._camera || !this._uiTransform) return;\r\n\r\n        const worldPos = this._camera.screenToWorld(new Vec3(screenPos.x, screenPos.y, 0));\r\n        const localPos = this.node.parent?.getComponent(UITransform)?.convertToNodeSpaceAR(worldPos) || worldPos;\r\n\r\n        const clampedX = this.clampToScreenBounds(localPos.x);\r\n        this.node.setPosition(clampedX, this.node.position.y, this.node.position.z);\r\n    }\r\n\r\n    // 公共访问器供测试使用\r\n    public get isTouching(): boolean {\r\n        return this._isTouching;\r\n    }\r\n\r\n    public get lastTouchX(): number {\r\n        return this._lastTouchX;\r\n    }\r\n\r\n    public get screenWidth(): number {\r\n        return this._screenWidth;\r\n    }\r\n\r\n    public set screenWidth(value: number) {\r\n        this._screenWidth = value;\r\n    }\r\n}"]}