{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/ui/MainMenuController.ts"],"names":["_decorator","Component","director","Node","AudioManager","ccclass","property","MainMenuController","onLoad","initializeScene","start","preloadAudioOnStart","preloadAudioResources","enableAutoPlay","startBackgroundMusic","startBackgroundAnimations","console","log","audioManager","instance","warn","validateSceneSetup","backgroundLayer","uiLayer","audioList","bgm","sfx","preloadAudio","playBGM","addSceneBreathingEffect","tween","Vec3","require","repeatForever","to","scale","onStartGame","fadeOutAndLoadScene","onContinueGame","onOpenSettings","openPanel","onOpenLeaderboard","onOpenShop","onOpenAchievements","onOpenMail","onOpenHelp","sceneName","fadeBGM","mgr","stopBGM","loadScene","panelName","playUISFX","switchBackgroundTheme","themeName","currentBgComponents","forEach","componentName","component","getComponent","removeComponent","newComponentName","bgmName","setAudioSettings","bgmVolume","sfxVolume","enabled","setBGMVolume","setSFXVolume","setAudioEnabled","getAudioSettings","enableAudio","onDestroy"],"mappings":"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","sourcesContent":["import { _decorator, Component, director, Node } from 'cc';\r\nimport { AudioManager } from '../managers/AudioManager';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MainMenuController')\r\nexport class MainMenuController extends Component {\r\n    @property(Node)\r\n    public backgroundLayer: Node = null!;\r\n\r\n    @property(Node)\r\n    public uiLayer: Node = null!;\r\n\r\n    @property(Node)\r\n    public audioManager: Node = null!;\r\n\r\n    @property\r\n    public enableAutoPlay: boolean = true;\r\n\r\n    @property\r\n    public preloadAudioOnStart: boolean = true;\r\n\r\n    protected onLoad(): void {\r\n        this.initializeScene();\r\n    }\r\n\r\n    protected start(): void {\r\n        if (this.preloadAudioOnStart) {\r\n            this.preloadAudioResources();\r\n        }\r\n        \r\n        if (this.enableAutoPlay) {\r\n            this.startBackgroundMusic();\r\n        }\r\n\r\n        this.startBackgroundAnimations();\r\n    }\r\n\r\n    private initializeScene(): void {\r\n        console.log(\"主界面场景初始化中...\");\r\n\r\n        // 确保AudioManager存在并初始化\r\n        if (this.audioManager && !AudioManager.instance) {\r\n            console.warn(\"AudioManager instance not found, scene may need AudioManager component\");\r\n        }\r\n\r\n        // 验证必要的组件\r\n        this.validateSceneSetup();\r\n    }\r\n\r\n    private validateSceneSetup(): void {\r\n        if (!this.backgroundLayer) {\r\n            console.warn(\"MainMenuController: backgroundLayer not assigned\");\r\n        }\r\n\r\n        if (!this.uiLayer) {\r\n            console.warn(\"MainMenuController: uiLayer not assigned\");\r\n        }\r\n\r\n        if (!this.audioManager) {\r\n            console.warn(\"MainMenuController: audioManager not assigned\");\r\n        }\r\n    }\r\n\r\n    private preloadAudioResources(): void {\r\n        if (!AudioManager.instance) {\r\n            console.warn(\"AudioManager not available for preloading\");\r\n            return;\r\n        }\r\n\r\n        const audioList = {\r\n            bgm: [\r\n                'main_theme',\r\n                'forest_theme',\r\n                'snow_theme',\r\n                'abyss_theme'\r\n            ],\r\n            sfx: [\r\n                'ui_click',\r\n                'ui_hover',\r\n                'ui_success',\r\n                'ui_error',\r\n                'ui_open',\r\n                'ui_close'\r\n            ]\r\n        };\r\n\r\n        AudioManager.instance.preloadAudio(audioList, () => {\r\n            console.log(\"主界面音频资源预加载完成\");\r\n        });\r\n    }\r\n\r\n    private startBackgroundMusic(): void {\r\n        if (AudioManager.instance) {\r\n            // 播放主题音乐，带淡入效果\r\n            AudioManager.instance.playBGM('main_theme', true, true);\r\n        }\r\n    }\r\n\r\n    private startBackgroundAnimations(): void {\r\n        console.log(\"主界面背景动画启动\");\r\n        \r\n        // 这里可以添加额外的场景级动画\r\n        // 比如整体的呼吸效果、光线变化等\r\n        this.addSceneBreathingEffect();\r\n    }\r\n\r\n    private addSceneBreathingEffect(): void {\r\n        // 添加非常轻微的整体呼吸效果\r\n        if (this.backgroundLayer) {\r\n            const { tween, Vec3 } = require('cc');\r\n            \r\n            tween(this.backgroundLayer)\r\n                .repeatForever(\r\n                    tween()\r\n                        .to(8, { scale: new Vec3(1.01, 1.01, 1) })\r\n                        .to(8, { scale: new Vec3(1.0, 1.0, 1) })\r\n                )\r\n                .start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 场景跳转方法\r\n     */\r\n    public onStartGame(): void {\r\n        this.fadeOutAndLoadScene('GameScene');\r\n    }\r\n\r\n    public onContinueGame(): void {\r\n        // TODO: 加载存档数据\r\n        this.fadeOutAndLoadScene('GameScene');\r\n    }\r\n\r\n    public onOpenSettings(): void {\r\n        this.openPanel('SettingsPanel');\r\n    }\r\n\r\n    public onOpenLeaderboard(): void {\r\n        this.openPanel('LeaderboardPanel');\r\n    }\r\n\r\n    public onOpenShop(): void {\r\n        this.openPanel('ShopPanel');\r\n    }\r\n\r\n    public onOpenAchievements(): void {\r\n        this.openPanel('AchievementsPanel');\r\n    }\r\n\r\n    public onOpenMail(): void {\r\n        this.openPanel('MailPanel');\r\n    }\r\n\r\n    public onOpenHelp(): void {\r\n        this.openPanel('HelpPanel');\r\n    }\r\n\r\n    private fadeOutAndLoadScene(sceneName: string): void {\r\n        const audioManager = AudioManager.instance;\r\n        if (audioManager) {\r\n            // 音乐淡出\r\n            audioManager.fadeBGM(0, 1.0, () => {\r\n                const mgr = AudioManager.instance;\r\n                if (mgr) {\r\n                    mgr.stopBGM();\r\n                }\r\n                director.loadScene(sceneName);\r\n            });\r\n        } else {\r\n            director.loadScene(sceneName);\r\n        }\r\n    }\r\n\r\n    private openPanel(panelName: string): void {\r\n        console.log(`打开面板: ${panelName}`);\r\n        \r\n        // TODO: 实现面板打开逻辑\r\n        // 这里可以实例化预制体或者显示隐藏的UI面板\r\n        \r\n        const audioManager = AudioManager.instance;\r\n        if (audioManager) {\r\n            audioManager.playUISFX('open');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 切换背景主题（用于测试不同主题背景）\r\n     */\r\n    public switchBackgroundTheme(themeName: 'forest' | 'snow' | 'abyss' | 'space'): void {\r\n        if (!this.backgroundLayer) return;\r\n\r\n        console.log(`切换背景主题到: ${themeName}`);\r\n\r\n        // 移除当前背景组件\r\n        const currentBgComponents = [\r\n            'StarFieldBackground',\r\n            'ForestThemeBackground', \r\n            'SnowMountainBackground',\r\n            'AbyssBackground'\r\n        ];\r\n\r\n        currentBgComponents.forEach(componentName => {\r\n            const component = this.backgroundLayer.getComponent(componentName);\r\n            if (component) {\r\n                this.backgroundLayer.removeComponent(component);\r\n            }\r\n        });\r\n\r\n        // 添加新的背景组件\r\n        let newComponentName = '';\r\n        let bgmName = '';\r\n        \r\n        switch (themeName) {\r\n            case 'forest':\r\n                newComponentName = 'ForestThemeBackground';\r\n                bgmName = 'forest_theme';\r\n                break;\r\n            case 'snow':\r\n                newComponentName = 'SnowMountainBackground';\r\n                bgmName = 'snow_theme';\r\n                break;\r\n            case 'abyss':\r\n                newComponentName = 'AbyssBackground';\r\n                bgmName = 'abyss_theme';\r\n                break;\r\n            case 'space':\r\n            default:\r\n                newComponentName = 'StarFieldBackground';\r\n                bgmName = 'main_theme';\r\n                break;\r\n        }\r\n\r\n        // 这里需要动态导入对应的背景组件类\r\n        // 在实际使用中，需要确保这些组件已经在项目中注册\r\n        console.log(`应用背景组件: ${newComponentName}`);\r\n        \r\n        // 切换对应的背景音乐\r\n        const audioManager = AudioManager.instance;\r\n        if (audioManager && bgmName) {\r\n            audioManager.playBGM(bgmName, true, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置音频选项\r\n     */\r\n    public setAudioSettings(bgmVolume: number, sfxVolume: number, enabled: boolean): void {\r\n        const audioManager = AudioManager.instance;\r\n        if (audioManager) {\r\n            audioManager.setBGMVolume(bgmVolume);\r\n            audioManager.setSFXVolume(sfxVolume);\r\n            audioManager.setAudioEnabled(enabled);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取当前音频状态（用于设置面板）\r\n     */\r\n    public getAudioSettings(): { bgmVolume: number; sfxVolume: number; enabled: boolean } {\r\n        const audioManager = AudioManager.instance;\r\n        if (audioManager) {\r\n            return {\r\n                bgmVolume: audioManager.bgmVolume,\r\n                sfxVolume: audioManager.sfxVolume,\r\n                enabled: audioManager.enableAudio\r\n            };\r\n        }\r\n        \r\n        return { bgmVolume: 0.8, sfxVolume: 1.0, enabled: true };\r\n    }\r\n\r\n    /**\r\n     * 场景清理\r\n     */\r\n    protected onDestroy(): void {\r\n        // 停止所有动画和音效\r\n        const audioManager = AudioManager.instance;\r\n        if (audioManager) {\r\n            audioManager.stopBGM();\r\n        }\r\n        \r\n        console.log(\"主界面场景清理完成\");\r\n    }\r\n}"]}