{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/SimpleBackgroundTest.ts"],"names":["_decorator","Component","Sprite","SpriteFrame","Texture2D","Color","UITransform","Graphics","ccclass","property","SimpleBackgroundTest","onLoad","console","log","createSimpleBackground","transform","node","getComponent","error","width","height","testWithGraphics","setTimeout","testWithTexture","graphics","addComponent","fillColor","testColor","rect","fill","destroy","texture","createSolidTexture","sprite","spriteFrame","color","w","Math","max","floor","h","reset","format","PixelFormat","RGBA8888","data","Uint8Array","i","length","r","g","b","a","uploadData"],"mappings":"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","sourcesContent":["import { _decorator, Component, Sprite, SpriteFrame, Texture2D, Color, UITransform, Node, Graphics } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SimpleBackgroundTest')\r\nexport class SimpleBackgroundTest extends Component {\r\n    @property\r\n    public testColor: Color = new Color(0, 100, 200, 255); // 蓝色测试\r\n\r\n    protected onLoad(): void {\r\n        console.log('SimpleBackgroundTest: Starting simple test');\r\n        this.createSimpleBackground();\r\n    }\r\n\r\n    private createSimpleBackground(): void {\r\n        const transform = this.node.getComponent(UITransform);\r\n        if (!transform) {\r\n            console.error('SimpleBackgroundTest: UITransform not found');\r\n            return;\r\n        }\r\n\r\n        console.log(`SimpleBackgroundTest: Node size is ${transform.width}x${transform.height}`);\r\n\r\n        // 方法1: 使用Graphics组件绘制简单矩形\r\n        this.testWithGraphics(transform);\r\n\r\n        // 方法2: 创建简单纹理测试\r\n        setTimeout(() => {\r\n            this.testWithTexture(transform);\r\n        }, 1000);\r\n    }\r\n\r\n    private testWithGraphics(transform: UITransform): void {\r\n        console.log('SimpleBackgroundTest: Testing with Graphics');\r\n        \r\n        const graphics = this.node.addComponent(Graphics);\r\n        graphics.fillColor = this.testColor;\r\n        graphics.rect(-transform.width/2, -transform.height/2, transform.width, transform.height);\r\n        graphics.fill();\r\n        \r\n        console.log('SimpleBackgroundTest: Graphics rect drawn');\r\n    }\r\n\r\n    private testWithTexture(transform: UITransform): void {\r\n        console.log('SimpleBackgroundTest: Testing with Texture');\r\n        \r\n        // 移除Graphics组件\r\n        const graphics = this.node.getComponent(Graphics);\r\n        if (graphics) {\r\n            graphics.destroy();\r\n        }\r\n\r\n        // 创建简单的纹理\r\n        const texture = this.createSolidTexture(transform.width, transform.height, this.testColor);\r\n        \r\n        const sprite = this.node.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = texture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        \r\n        console.log('SimpleBackgroundTest: Texture sprite created');\r\n    }\r\n\r\n    private createSolidTexture(width: number, height: number, color: Color): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = Math.max(1, Math.floor(width));\r\n        const h = Math.max(1, Math.floor(height));\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        \r\n        // 填充纯色\r\n        for (let i = 0; i < data.length; i += 4) {\r\n            data[i] = color.r;     // R\r\n            data[i + 1] = color.g; // G\r\n            data[i + 2] = color.b; // B\r\n            data[i + 3] = color.a; // A\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n}"]}