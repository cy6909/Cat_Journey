{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/managers/RelicManager.ts"],"names":["_decorator","Component","director","ccclass","property","RelicType","RelicManager","_activeRelics","Map","getInstance","_instance","onLoad","addPersistRootNode","node","initializeRelics","destroy","onDestroy","console","log","addRelic","relicType","relic","createRelic","set","name","onRelicAdded","hasRelic","has","getRelic","get","getActiveRelics","Array","from","values","removeRelic","delete","onRelicRemoved","clearAllRelics","clear","EXPLOSIVE_BRICKS","id","description","MULTI_BALL_START","LASER_DAMAGE_BOOST","BRICK_PENETRATION","SPEED_BOOST","grantRandomRelic","allRelicTypes","Object","availableRelics","filter","type","length","randomRelic","Math","floor","random","getRelicCount","size","canAcquireRelic","getRelicEffect","saveRelics","relicData","forEach","loadRelics","data","entries","includes","error","getRelicCombinations","activeTypes","keys","combinations","i","j","push"],"mappings":"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","sourcesContent":["import { _decorator, Component, director } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport interface Relic {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    icon?: string;\r\n}\r\n\r\nexport enum RelicType {\r\n    EXPLOSIVE_BRICKS = 'explosive_bricks',\r\n    MULTI_BALL_START = 'multi_ball_start',\r\n    LASER_DAMAGE_BOOST = 'laser_damage_boost',\r\n    BRICK_PENETRATION = 'brick_penetration',\r\n    SPEED_BOOST = 'speed_boost'\r\n}\r\n\r\n@ccclass('RelicManager')\r\nexport class RelicManager extends Component {\r\n    private static _instance: RelicManager | null = null;\r\n    private _activeRelics: Map<RelicType, Relic> = new Map();\r\n\r\n    public static getInstance(): RelicManager | null {\r\n        return RelicManager._instance;\r\n    }\r\n\r\n    protected onLoad(): void {\r\n        if (RelicManager._instance === null) {\r\n            RelicManager._instance = this;\r\n            director.addPersistRootNode(this.node);\r\n            this.initializeRelics();\r\n        } else {\r\n            this.node.destroy();\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        if (RelicManager._instance === this) {\r\n            RelicManager._instance = null;\r\n        }\r\n    }\r\n\r\n    private initializeRelics(): void {\r\n        console.log('RelicManager initialized');\r\n    }\r\n\r\n    public addRelic(relicType: RelicType): void {\r\n        const relic = this.createRelic(relicType);\r\n        if (relic) {\r\n            this._activeRelics.set(relicType, relic);\r\n            console.log(`Relic acquired: ${relic.name}`);\r\n            this.onRelicAdded(relicType);\r\n        }\r\n    }\r\n\r\n    public hasRelic(relicType: RelicType): boolean {\r\n        return this._activeRelics.has(relicType);\r\n    }\r\n\r\n    public getRelic(relicType: RelicType): Relic | undefined {\r\n        return this._activeRelics.get(relicType);\r\n    }\r\n\r\n    public getActiveRelics(): Relic[] {\r\n        return Array.from(this._activeRelics.values());\r\n    }\r\n\r\n    public removeRelic(relicType: RelicType): void {\r\n        const relic = this._activeRelics.get(relicType);\r\n        if (relic) {\r\n            this._activeRelics.delete(relicType);\r\n            console.log(`Relic removed: ${relic.name}`);\r\n            this.onRelicRemoved(relicType);\r\n        }\r\n    }\r\n\r\n    public clearAllRelics(): void {\r\n        this._activeRelics.clear();\r\n        console.log('All relics cleared');\r\n    }\r\n\r\n    private createRelic(relicType: RelicType): Relic | null {\r\n        switch (relicType) {\r\n            case RelicType.EXPLOSIVE_BRICKS:\r\n                return {\r\n                    id: 'explosive_bricks',\r\n                    name: 'Explosive Bricks',\r\n                    description: 'When a brick is destroyed, it deals damage to adjacent bricks'\r\n                };\r\n            case RelicType.MULTI_BALL_START:\r\n                return {\r\n                    id: 'multi_ball_start',\r\n                    name: 'Multi Ball Start',\r\n                    description: 'Start each level with 3 balls instead of 1'\r\n                };\r\n            case RelicType.LASER_DAMAGE_BOOST:\r\n                return {\r\n                    id: 'laser_damage_boost',\r\n                    name: 'Laser Power',\r\n                    description: 'Laser power-up deals double damage'\r\n                };\r\n            case RelicType.BRICK_PENETRATION:\r\n                return {\r\n                    id: 'brick_penetration',\r\n                    name: 'Penetrating Shots',\r\n                    description: 'Ball can pass through bricks, destroying multiple in a row'\r\n                };\r\n            case RelicType.SPEED_BOOST:\r\n                return {\r\n                    id: 'speed_boost',\r\n                    name: 'Speed Boost',\r\n                    description: 'Ball moves 25% faster'\r\n                };\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private onRelicAdded(relicType: RelicType): void {\r\n        switch (relicType) {\r\n            case RelicType.EXPLOSIVE_BRICKS:\r\n                break;\r\n            case RelicType.MULTI_BALL_START:\r\n                break;\r\n            case RelicType.LASER_DAMAGE_BOOST:\r\n                break;\r\n            case RelicType.BRICK_PENETRATION:\r\n                break;\r\n            case RelicType.SPEED_BOOST:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onRelicRemoved(relicType: RelicType): void {\r\n    }\r\n\r\n    public grantRandomRelic(): RelicType | null {\r\n        const allRelicTypes = Object.values(RelicType);\r\n        const availableRelics = allRelicTypes.filter((type: RelicType) => !this.hasRelic(type));\r\n        \r\n        if (availableRelics.length > 0) {\r\n            const randomRelic = availableRelics[Math.floor(Math.random() * availableRelics.length)];\r\n            this.addRelic(randomRelic);\r\n            return randomRelic;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // 添加测试需要的方法\r\n    public getRelicCount(): number {\r\n        return this._activeRelics.size;\r\n    }\r\n\r\n    public canAcquireRelic(relicType: RelicType): boolean {\r\n        return !this.hasRelic(relicType);\r\n    }\r\n\r\n    public getRelicEffect(relicType: RelicType): string {\r\n        const relic = this.getRelic(relicType);\r\n        return relic ? relic.description : '';\r\n    }\r\n\r\n    public saveRelics(): any {\r\n        const relicData: any = {};\r\n        this._activeRelics.forEach((relic, type) => {\r\n            relicData[type] = relic;\r\n        });\r\n        return relicData;\r\n    }\r\n\r\n    public loadRelics(data: any): boolean {\r\n        try {\r\n            this.clearAllRelics();\r\n            for (const [type, relicData] of Object.entries(data)) {\r\n                if (Object.values(RelicType).includes(type as RelicType)) {\r\n                    this._activeRelics.set(type as RelicType, relicData as Relic);\r\n                }\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Failed to load relics:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public getRelicCombinations(): RelicType[][] {\r\n        const activeTypes = Array.from(this._activeRelics.keys());\r\n        const combinations: RelicType[][] = [];\r\n        \r\n        // 生成所有可能的组合\r\n        for (let i = 0; i < activeTypes.length; i++) {\r\n            for (let j = i + 1; j < activeTypes.length; j++) {\r\n                combinations.push([activeTypes[i], activeTypes[j]]);\r\n            }\r\n        }\r\n        \r\n        return combinations;\r\n    }\r\n}"]}