{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/ui/ExperienceBar.ts"],"names":["_decorator","Component","Node","ProgressBar","Label","tween","Vec3","UIOpacity","ExperienceManager","ccclass","property","ExperienceBar","_expManager","_lastLevel","onLoad","levelUpEffect","active","updateDisplay","start","getInstance","console","warn","on","EVENT_EXP_CHANGED","onExpChanged","EVENT_LEVEL_UP","onLevelUp","refreshDisplay","onDestroy","off","data","currentExp","expToNextLevel","level","progressBar","targetProgress","progress","to","easing","log","newLevel","playLevelUpEffect","updateLevelDisplay","expToNext","levelLabel","string","expLabel","Math","floor","node","activeInHierarchy","originalScale","bigScale","scale","opacity","getComponent","addComponent","call","startPos","endPos","setPosition","position","getCurrentExp","getExpToNextLevel","getCurrentLevel","setProgressBarColor","barSprite","color","set","testAddExp","amount","addExperience"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, ProgressBar, Label, tween, Vec3, UIOpacity } from 'cc';\r\nimport { ExperienceManager } from '../managers/ExperienceManager';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * 经验条UI组件\r\n *\r\n * 显示玩家的经验值进度和等级\r\n * 简洁实现，无冗余动画\r\n */\r\n@ccclass('ExperienceBar')\r\nexport class ExperienceBar extends Component {\r\n    @property(ProgressBar)\r\n    public progressBar: ProgressBar | null = null;\r\n\r\n    @property(Label)\r\n    public levelLabel: Label | null = null;\r\n\r\n    @property(Label)\r\n    public expLabel: Label | null = null;\r\n\r\n    @property(Node)\r\n    public levelUpEffect: Node | null = null;  // 升级特效节点\r\n\r\n    private _expManager: ExperienceManager | null = null;\r\n    private _lastLevel: number = 1;\r\n\r\n    protected onLoad(): void {\r\n        // 初始隐藏升级特效\r\n        if (this.levelUpEffect) {\r\n            this.levelUpEffect.active = false;\r\n        }\r\n\r\n        // 初始化显示\r\n        this.updateDisplay(0, 100, 1);\r\n    }\r\n\r\n    protected start(): void {\r\n        // 获取经验管理器\r\n        this._expManager = ExperienceManager.getInstance();\r\n        if (!this._expManager) {\r\n            console.warn('ExperienceBar: ExperienceManager not found');\r\n            return;\r\n        }\r\n\r\n        // 监听经验值变化事件\r\n        this._expManager.on(ExperienceManager.EVENT_EXP_CHANGED, this.onExpChanged, this);\r\n        this._expManager.on(ExperienceManager.EVENT_LEVEL_UP, this.onLevelUp, this);\r\n\r\n        // 初始化显示当前状态\r\n        this.refreshDisplay();\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        // 清理事件监听\r\n        if (this._expManager) {\r\n            this._expManager.off(ExperienceManager.EVENT_EXP_CHANGED, this.onExpChanged, this);\r\n            this._expManager.off(ExperienceManager.EVENT_LEVEL_UP, this.onLevelUp, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 经验值变化处理\r\n     */\r\n    private onExpChanged(data: any): void {\r\n        this.updateDisplay(data.currentExp, data.expToNextLevel, data.level);\r\n\r\n        // 平滑更新进度条\r\n        if (this.progressBar) {\r\n            const targetProgress = data.progress;\r\n            tween(this.progressBar)\r\n                .to(0.3, { progress: targetProgress }, { easing: 'quadOut' })\r\n                .start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 升级处理\r\n     */\r\n    private onLevelUp(data: any): void {\r\n        console.log(`Level Up! New level: ${data.newLevel}`);\r\n\r\n        // 显示升级特效\r\n        this.playLevelUpEffect();\r\n\r\n        // 更新等级显示\r\n        this._lastLevel = data.newLevel;\r\n        this.updateLevelDisplay(data.newLevel);\r\n    }\r\n\r\n    /**\r\n     * 更新显示\r\n     */\r\n    private updateDisplay(currentExp: number, expToNext: number, level: number): void {\r\n        // 更新等级文本\r\n        if (this.levelLabel) {\r\n            this.levelLabel.string = `Lv.${level}`;\r\n        }\r\n\r\n        // 更新经验值文本\r\n        if (this.expLabel) {\r\n            this.expLabel.string = `${Math.floor(currentExp)}/${Math.floor(expToNext)}`;\r\n        }\r\n\r\n        // 更新进度条 (初始不使用动画)\r\n        if (this.progressBar && !this.node.activeInHierarchy) {\r\n            this.progressBar.progress = currentExp / expToNext;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新等级显示\r\n     */\r\n    private updateLevelDisplay(level: number): void {\r\n        if (this.levelLabel) {\r\n            // 简单的放大缩小动画\r\n            const originalScale = new Vec3(1, 1, 1);\r\n            const bigScale = new Vec3(1.3, 1.3, 1);\r\n\r\n            this.levelLabel.string = `Lv.${level}`;\r\n\r\n            tween(this.levelLabel.node)\r\n                .to(0.1, { scale: bigScale })\r\n                .to(0.2, { scale: originalScale })\r\n                .start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放升级特效\r\n     */\r\n    private playLevelUpEffect(): void {\r\n        if (!this.levelUpEffect) return;\r\n\r\n        // 显示特效节点\r\n        this.levelUpEffect.active = true;\r\n\r\n        // 重置透明度\r\n        let opacity = this.levelUpEffect.getComponent(UIOpacity);\r\n        if (!opacity) {\r\n            opacity = this.levelUpEffect.addComponent(UIOpacity);\r\n        }\r\n        opacity.opacity = 255;\r\n\r\n        // 简单的淡出动画\r\n        tween(opacity)\r\n            .to(0.5, { opacity: 255 })\r\n            .to(0.5, { opacity: 0 })\r\n            .call(() => {\r\n                this.levelUpEffect!.active = false;\r\n            })\r\n            .start();\r\n\r\n        // 可选：上升动画\r\n        const startPos = new Vec3(0, 0, 0);\r\n        const endPos = new Vec3(0, 50, 0);\r\n\r\n        this.levelUpEffect.setPosition(startPos);\r\n        tween(this.levelUpEffect)\r\n            .to(1.0, { position: endPos })\r\n            .start();\r\n    }\r\n\r\n    /**\r\n     * 刷新显示\r\n     */\r\n    public refreshDisplay(): void {\r\n        if (!this._expManager) return;\r\n\r\n        const currentExp = this._expManager.getCurrentExp();\r\n        const expToNext = this._expManager.getExpToNextLevel();\r\n        const level = this._expManager.getCurrentLevel();\r\n\r\n        this.updateDisplay(currentExp, expToNext, level);\r\n\r\n        if (this.progressBar) {\r\n            this.progressBar.progress = currentExp / expToNext;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置进度条颜色\r\n     * 可根据等级改变颜色\r\n     */\r\n    public setProgressBarColor(level: number): void {\r\n        if (!this.progressBar) return;\r\n\r\n        // 简单的颜色分级\r\n        // 1-10: 绿色, 11-20: 蓝色, 21-30: 紫色, 31+: 金色\r\n        const barSprite = this.progressBar.barSprite;\r\n        if (!barSprite) return;\r\n\r\n        if (level <= 10) {\r\n            barSprite.color.set(100, 255, 100);  // 绿色\r\n        } else if (level <= 20) {\r\n            barSprite.color.set(100, 150, 255);  // 蓝色\r\n        } else if (level <= 30) {\r\n            barSprite.color.set(200, 100, 255);  // 紫色\r\n        } else {\r\n            barSprite.color.set(255, 215, 0);    // 金色\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 测试方法 - 用于开发调试\r\n     */\r\n    public testAddExp(amount: number): void {\r\n        if (this._expManager) {\r\n            this._expManager.addExperience(amount);\r\n        }\r\n    }\r\n}"]}