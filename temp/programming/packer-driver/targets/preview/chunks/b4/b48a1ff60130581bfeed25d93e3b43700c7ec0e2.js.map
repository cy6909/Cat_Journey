{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/LevelManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","director","GameManager","BossController","ccclass","property","LevelType","LevelManager","_pressureTimer","_pressureActive","_currentLevelType","NORMAL","_bossNode","_levelStartTime","getInstance","_instance","onLoad","onDestroy","start","initializeLevel","update","dt","updatePressureSystem","getTotalTime","gameManager","currentLevel","getLevel","determineLevelType","console","log","BOSS","setupBossLevel","setupNormalLevel","level","ELITE","Math","random","TIME_ATTACK","clearAllBricks","spawnBoss","pressureStartDelay","bossPrefab","error","setPosition","bossScript","getComponent","healthMultiplier","damageMultiplier","maxHealth","floor","attackDamage","scoreValue","node","addChild","applyBrickPressure","brickContainer","adjustedSpeed","pressureMoveSpeed","pow","pressureAcceleration","children","paddleHit","child","currentPos","position","newY","y","x","z","onBricksReachPaddle","remainingBricks","countRemainingBricks","rowsRemaining","ceil","damage","max","onCoreAttacked","resetBrickPositions","length","destroy","getCurrentLevelType","isPressureActive","getPressureTimer","onBossDefeated","onLevelComplete","resetLevel","isValid","adjustDifficulty","difficultyMultiplier"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Vec3, director } from 'cc';\nimport { GameManager, GameState } from './GameManager';\nimport { BossController } from './BossController';\n\nconst { ccclass, property } = _decorator;\n\nexport enum LevelType {\n    NORMAL = 'NORMAL',\n    BOSS = 'BOSS',\n    ELITE = 'ELITE',\n    TIME_ATTACK = 'TIME_ATTACK'\n}\n\n@ccclass('LevelManager')\nexport class LevelManager extends Component {\n    @property\n    public pressureMoveSpeed: number = 10.0; // Speed at which bricks move down\n    \n    @property\n    public pressureStartDelay: number = 30.0; // Seconds before pressure begins\n    \n    @property\n    public pressureAcceleration: number = 1.5; // Speed multiplier per level\n    \n    @property(Prefab)\n    public bossPrefab: Prefab | null = null;\n    \n    @property(Node)\n    public brickContainer: Node | null = null;\n    \n    private static _instance: LevelManager | null = null;\n    private _pressureTimer: number = 0;\n    private _pressureActive: boolean = false;\n    private _currentLevelType: LevelType = LevelType.NORMAL;\n    private _bossNode: Node | null = null;\n    private _levelStartTime: number = 0;\n    \n    public static getInstance(): LevelManager | null {\n        return LevelManager._instance;\n    }\n    \n    protected onLoad(): void {\n        if (LevelManager._instance === null) {\n            LevelManager._instance = this;\n        }\n    }\n    \n    protected onDestroy(): void {\n        if (LevelManager._instance === this) {\n            LevelManager._instance = null;\n        }\n    }\n    \n    protected start(): void {\n        this.initializeLevel();\n    }\n    \n    protected update(dt: number): void {\n        this.updatePressureSystem(dt);\n    }\n    \n    public initializeLevel(): void {\n        this._levelStartTime = director.getTotalTime();\n        this._pressureTimer = 0;\n        this._pressureActive = false;\n        \n        const gameManager = GameManager.getInstance();\n        if (!gameManager) return;\n        \n        const currentLevel = gameManager.getLevel();\n        this._currentLevelType = this.determineLevelType(currentLevel);\n        \n        console.log(`Starting ${this._currentLevelType} level ${currentLevel}`);\n        \n        if (this._currentLevelType === LevelType.BOSS) {\n            this.setupBossLevel();\n        } else {\n            this.setupNormalLevel();\n        }\n    }\n    \n    private determineLevelType(level: number): LevelType {\n        // Boss levels every 10 levels\n        if (level % 10 === 0) {\n            return LevelType.BOSS;\n        }\n        \n        // Elite levels every 5 levels (but not boss levels)\n        if (level % 5 === 0) {\n            return LevelType.ELITE;\n        }\n        \n        // Time attack levels occasionally\n        if (level > 5 && Math.random() < 0.15) {\n            return LevelType.TIME_ATTACK;\n        }\n        \n        return LevelType.NORMAL;\n    }\n    \n    private setupBossLevel(): void {\n        // Clear existing bricks for boss fight\n        this.clearAllBricks();\n        \n        // Spawn boss\n        this.spawnBoss();\n        \n        // No pressure system during boss fights\n        this._pressureActive = false;\n    }\n    \n    private setupNormalLevel(): void {\n        // Enable pressure system for normal levels\n        this._pressureActive = true;\n        this._pressureTimer = this.pressureStartDelay;\n    }\n    \n    private spawnBoss(): void {\n        if (!this.bossPrefab) {\n            console.error('Boss prefab not assigned!');\n            return;\n        }\n        \n        this._bossNode = instantiate(this.bossPrefab);\n        this._bossNode.setPosition(0, 150, 0); // Position at top of screen\n        \n        // Configure boss based on level\n        const bossScript = this._bossNode.getComponent(BossController);\n        if (bossScript) {\n            const gameManager = GameManager.getInstance();\n            const level = gameManager ? gameManager.getLevel() : 1;\n            \n            // Scale boss health and damage with level\n            const healthMultiplier = 1 + (level / 10);\n            const damageMultiplier = 1 + (level / 20);\n            \n            bossScript.maxHealth = Math.floor(100 * healthMultiplier);\n            bossScript.attackDamage = Math.floor(1 * damageMultiplier);\n            bossScript.scoreValue = Math.floor(500 * healthMultiplier);\n        }\n        \n        this.node.addChild(this._bossNode);\n    }\n    \n    private updatePressureSystem(dt: number): void {\n        if (!this._pressureActive || this._currentLevelType === LevelType.BOSS) {\n            return;\n        }\n        \n        this._pressureTimer -= dt;\n        \n        if (this._pressureTimer <= 0) {\n            this.applyBrickPressure(dt);\n        }\n    }\n    \n    private applyBrickPressure(dt: number): void {\n        if (!this.brickContainer) return;\n        \n        const gameManager = GameManager.getInstance();\n        if (!gameManager) return;\n        \n        const level = gameManager.getLevel();\n        const adjustedSpeed = this.pressureMoveSpeed * Math.pow(this.pressureAcceleration, level / 5);\n        \n        // Move all bricks down\n        const children = this.brickContainer.children;\n        let paddleHit = false;\n        \n        for (const child of children) {\n            const currentPos = child.position;\n            const newY = currentPos.y - adjustedSpeed * dt;\n            child.setPosition(currentPos.x, newY, currentPos.z);\n            \n            // Check if bricks reached paddle level (danger zone)\n            if (newY < -200 && !paddleHit) {\n                paddleHit = true;\n                this.onBricksReachPaddle();\n            }\n        }\n    }\n    \n    private onBricksReachPaddle(): void {\n        const gameManager = GameManager.getInstance();\n        if (!gameManager) return;\n        \n        // Calculate damage based on remaining brick rows\n        const remainingBricks = this.countRemainingBricks();\n        const rowsRemaining = Math.ceil(remainingBricks / 8); // Assuming 8 bricks per row\n        const damage = Math.max(1, rowsRemaining);\n        \n        console.log(`Bricks reached paddle! Taking ${damage} damage from ${rowsRemaining} rows`);\n        gameManager.onCoreAttacked(damage);\n        \n        // Reset all bricks to higher position to continue pressure\n        this.resetBrickPositions();\n    }\n    \n    private resetBrickPositions(): void {\n        if (!this.brickContainer) return;\n        \n        const children = this.brickContainer.children;\n        for (const child of children) {\n            const currentPos = child.position;\n            child.setPosition(currentPos.x, currentPos.y + 100, currentPos.z);\n        }\n    }\n    \n    private countRemainingBricks(): number {\n        if (!this.brickContainer) return 0;\n        return this.brickContainer.children.length;\n    }\n    \n    private clearAllBricks(): void {\n        if (!this.brickContainer) return;\n        \n        const children = [...this.brickContainer.children];\n        for (const child of children) {\n            child.destroy();\n        }\n    }\n    \n    public getCurrentLevelType(): LevelType {\n        return this._currentLevelType;\n    }\n    \n    public isPressureActive(): boolean {\n        return this._pressureActive;\n    }\n    \n    public getPressureTimer(): number {\n        return this._pressureTimer;\n    }\n    \n    public onBossDefeated(): void {\n        console.log('Boss defeated! Level complete!');\n        \n        const gameManager = GameManager.getInstance();\n        if (gameManager) {\n            // Boss levels give extra rewards\n            gameManager.onLevelComplete();\n        }\n    }\n    \n    public resetLevel(): void {\n        this._pressureTimer = this.pressureStartDelay;\n        this._pressureActive = false;\n        \n        if (this._bossNode && this._bossNode.isValid) {\n            this._bossNode.destroy();\n            this._bossNode = null;\n        }\n    }\n    \n    public adjustDifficulty(level: number): void {\n        // Adjust pressure system based on level\n        const difficultyMultiplier = 1 + (level / 10);\n        this.pressureMoveSpeed = 10 * difficultyMultiplier;\n        this.pressureStartDelay = Math.max(15, 30 - level);\n    }\n}"]}