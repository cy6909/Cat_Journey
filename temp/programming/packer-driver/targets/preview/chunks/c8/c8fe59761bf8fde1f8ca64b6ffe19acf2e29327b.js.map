{"version":3,"sources":["file:///E:/work_space/wx/Cat_Journey/assets/scripts/background/SnowMountainBackground.ts"],"names":["_decorator","Component","Sprite","SpriteFrame","Texture2D","Color","UITransform","view","Node","ParticleSystem2D","tween","Vec3","Vec2","ccclass","property","SnowMountainBackground","onLoad","createSnowMountainBackground","transform","node","getComponent","console","error","setupNodeSize","createMountainGradient","createMountainSilhouette","createSnowflakeParticles","createAuroraEffect","createIcicleDecorations","enableCatCharacter","createSnowCat","designSize","getDesignResolutionSize","targetWidth","Math","max","width","targetHeight","height","setContentSize","setAnchorPoint","gradientNode","setParent","layerTransform","addComponent","gradientTexture","createMountainGradientTexture","sprite","spriteFrame","texture","sizeMode","SizeMode","CUSTOM","color","WHITE","w","floor","h","reset","format","PixelFormat","RGBA8888","data","Uint8Array","y","ratio","r","mountainStartColor","mountainEndColor","g","b","x","index","uploadData","silhouetteNode","silhouetteTexture","createMountainSilhouetteTexture","i","length","mountainZoneStart","mountainNoise","heightFactor","intensity","random","particleNode","particleSystem","duration","emissionRate","life","startSize","endSize","startColor","endColor","gravity","speed","speedVar","angle","angleVar","startSpin","endSpin","startSpinVar","snowflakeTexture","createSnowflakeTexture","size","centerX","centerY","dx","dy","abs","auroraCount","createSingleAurora","auroraNode","setPosition","auroraTransform","createAuroraTexture","colors","startAuroraAnimation","waveHeight","sin","distance","alpha","originalPos","position","clone","repeatForever","to","start","originalColor","log","icicleCount","createSingleIcicle","icicleNode","icicleTransform","createIcicleTexture","catNode","setScale","catTransform","createSnowCatTexture","startSnowCatAnimation","isInCatShape","bodyRadius","sqrt","schedule","scale","n"],"mappings":"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","sourcesContent":["import { _decorator, Component, Sprite, SpriteFrame, Texture2D, Color, UITransform, view, Node, ParticleSystem2D, tween, Vec3, Vec2 } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SnowMountainBackground')\r\nexport class SnowMountainBackground extends Component {\r\n    @property\r\n    public snowflakeCount: number = 30;\r\n    \r\n    @property\r\n    public auroraCount: number = 3;\r\n    \r\n    @property\r\n    public icicleCount: number = 8;\r\n    \r\n    @property\r\n    public enableCatCharacter: boolean = true;\r\n    \r\n    // 雪山主题色彩配置\r\n    @property\r\n    public mountainStartColor: Color = new Color(30, 58, 138, 255); // #1E3A8A 深蓝\r\n    \r\n    @property\r\n    public mountainEndColor: Color = new Color(248, 250, 252, 255); // #F8FAFC 雪白\r\n\r\n    protected onLoad(): void {\r\n        this.createSnowMountainBackground();\r\n    }\r\n\r\n    private createSnowMountainBackground(): void {\r\n        const transform = this.node.getComponent(UITransform);\r\n        if (!transform) {\r\n            console.error('UITransform component not found');\r\n            return;\r\n        }\r\n\r\n        this.setupNodeSize(transform);\r\n\r\n        // 创建雪山主题分层背景\r\n        this.createMountainGradient(transform);\r\n        this.createMountainSilhouette(transform);\r\n        this.createSnowflakeParticles(transform);\r\n        this.createAuroraEffect(transform);\r\n        this.createIcicleDecorations(transform);\r\n        \r\n        if (this.enableCatCharacter) {\r\n            this.createSnowCat(transform);\r\n        }\r\n    }\r\n\r\n    private setupNodeSize(transform: UITransform): void {\r\n        const designSize = view.getDesignResolutionSize();\r\n        const targetWidth = Math.max(designSize.width, 960);\r\n        const targetHeight = Math.max(designSize.height, 640);\r\n        \r\n        transform.setContentSize(targetWidth, targetHeight);\r\n        transform.setAnchorPoint(0.5, 0.5);\r\n    }\r\n\r\n    private createMountainGradient(transform: UITransform): void {\r\n        const gradientNode = new Node('MountainGradient');\r\n        gradientNode.setParent(this.node);\r\n        \r\n        const layerTransform = gradientNode.addComponent(UITransform);\r\n        layerTransform.setContentSize(transform.width, transform.height);\r\n        layerTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const gradientTexture = this.createMountainGradientTexture(transform.width, transform.height);\r\n        const sprite = gradientNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = gradientTexture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM;\r\n        sprite.color = Color.WHITE;\r\n    }\r\n\r\n    private createMountainGradientTexture(width: number, height: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = Math.max(1, Math.floor(width));\r\n        const h = Math.max(1, Math.floor(height));\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        \r\n        for (let y = 0; y < h; y++) {\r\n            const ratio = y / h;\r\n            // 雪山渐变：上方深蓝（夜空），下方雪白（雪地）\r\n            const r = Math.floor(this.mountainStartColor.r + (this.mountainEndColor.r - this.mountainStartColor.r) * ratio);\r\n            const g = Math.floor(this.mountainStartColor.g + (this.mountainEndColor.g - this.mountainStartColor.g) * ratio);\r\n            const b = Math.floor(this.mountainStartColor.b + (this.mountainEndColor.b - this.mountainStartColor.b) * ratio);\r\n            \r\n            for (let x = 0; x < w; x++) {\r\n                const index = (y * w + x) * 4;\r\n                data[index] = r;     // R\r\n                data[index + 1] = g; // G\r\n                data[index + 2] = b; // B\r\n                data[index + 3] = 255; // A\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private createMountainSilhouette(transform: UITransform): void {\r\n        const silhouetteNode = new Node('MountainSilhouette');\r\n        silhouetteNode.setParent(this.node);\r\n        \r\n        const layerTransform = silhouetteNode.addComponent(UITransform);\r\n        layerTransform.setContentSize(transform.width, transform.height);\r\n        layerTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const silhouetteTexture = this.createMountainSilhouetteTexture(transform.width, transform.height);\r\n        const sprite = silhouetteNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = silhouetteTexture;\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM;\r\n        sprite.color = new Color(255, 255, 255, 150); // 半透明白色\r\n    }\r\n\r\n    private createMountainSilhouetteTexture(width: number, height: number): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = Math.max(1, Math.floor(width));\r\n        const h = Math.max(1, Math.floor(height));\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        \r\n        // 初始化为透明\r\n        for (let i = 0; i < data.length; i += 4) {\r\n            data[i + 3] = 0; // 透明\r\n        }\r\n\r\n        // 绘制山峰剪影 - 底部1/2区域\r\n        const mountainZoneStart = Math.floor(h * 0.5);\r\n        for (let y = mountainZoneStart; y < h; y++) {\r\n            for (let x = 0; x < w; x++) {\r\n                // 使用多层噪声创建山峰轮廓\r\n                const mountainNoise = this.mountainNoise(x * 0.01, y * 0.015);\r\n                const heightFactor = (h - y) / (h - mountainZoneStart);\r\n                \r\n                if (mountainNoise > (0.2 - heightFactor * 0.5)) {\r\n                    const index = (y * w + x) * 4;\r\n                    const intensity = 200 + Math.random() * 55; // 亮白色\r\n                    \r\n                    data[index] = intensity;       // R\r\n                    data[index + 1] = intensity;   // G\r\n                    data[index + 2] = intensity;   // B\r\n                    data[index + 3] = 200;         // A\r\n                }\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private createSnowflakeParticles(transform: UITransform): void {\r\n        const particleNode = new Node('SnowflakeParticles');\r\n        particleNode.setParent(this.node);\r\n        \r\n        const layerTransform = particleNode.addComponent(UITransform);\r\n        layerTransform.setContentSize(transform.width, transform.height);\r\n        layerTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const particleSystem = particleNode.addComponent(ParticleSystem2D);\r\n        \r\n        // 配置雪花飘落效果\r\n        particleSystem.duration = -1; // 持续发射\r\n        particleSystem.emissionRate = 5;\r\n        particleSystem.life = 12;\r\n        particleSystem.startSize = 4;\r\n        particleSystem.endSize = 2;\r\n        particleSystem.startColor = new Color(255, 255, 255, 255); // 纯白\r\n        particleSystem.endColor = new Color(200, 220, 255, 180);   // 蓝白色\r\n        \r\n        // 重力和运动\r\n        particleSystem.gravity = new Vec2(0, -20);\r\n        particleSystem.speed = 15;\r\n        particleSystem.speedVar = 8;\r\n        particleSystem.angle = 0;\r\n        particleSystem.angleVar = 15;\r\n        \r\n        // 旋转效果\r\n        particleSystem.startSpin = 0;\r\n        particleSystem.endSpin = 360;\r\n        particleSystem.startSpinVar = 180;\r\n        \r\n        // 创建雪花纹理\r\n        const snowflakeTexture = this.createSnowflakeTexture();\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = snowflakeTexture;\r\n        particleSystem.spriteFrame = spriteFrame;\r\n    }\r\n\r\n    private createSnowflakeTexture(): Texture2D {\r\n        const texture = new Texture2D();\r\n        const size = 6;\r\n        \r\n        texture.reset({\r\n            width: size,\r\n            height: size,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(size * size * 4);\r\n        \r\n        // 绘制六角雪花形状\r\n        for (let y = 0; y < size; y++) {\r\n            for (let x = 0; x < size; x++) {\r\n                const centerX = size / 2;\r\n                const centerY = size / 2;\r\n                const dx = x - centerX;\r\n                const dy = y - centerY;\r\n                \r\n                // 创建十字形和对角线的雪花图案\r\n                if ((Math.abs(dx) < 0.8 && Math.abs(dy) < 2.5) || \r\n                    (Math.abs(dy) < 0.8 && Math.abs(dx) < 2.5) ||\r\n                    (Math.abs(dx - dy) < 0.8) || \r\n                    (Math.abs(dx + dy) < 0.8)) {\r\n                    const index = (y * size + x) * 4;\r\n                    data[index] = 255;     // R\r\n                    data[index + 1] = 255; // G\r\n                    data[index + 2] = 255; // B\r\n                    data[index + 3] = 255; // A\r\n                }\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private createAuroraEffect(transform: UITransform): void {\r\n        for (let i = 0; i < this.auroraCount; i++) {\r\n            this.createSingleAurora(transform, i);\r\n        }\r\n    }\r\n\r\n    private createSingleAurora(transform: UITransform, index: number): void {\r\n        const auroraNode = new Node(`Aurora_${index}`);\r\n        auroraNode.setParent(this.node);\r\n        \r\n        // 极光位置在屏幕上方\r\n        const x = (Math.random() - 0.5) * transform.width * 0.8;\r\n        const y = transform.height * 0.2 + Math.random() * 100;\r\n        auroraNode.setPosition(x, y, 0);\r\n        \r\n        const auroraTransform = auroraNode.addComponent(UITransform);\r\n        auroraTransform.setContentSize(200, 80);\r\n        auroraTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const sprite = auroraNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = this.createAuroraTexture();\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM;\r\n        \r\n        // 极光颜色（绿色、紫色变化）\r\n        const colors = [\r\n            new Color(50, 255, 50, 100),   // 绿色\r\n            new Color(150, 50, 255, 100),  // 紫色\r\n            new Color(50, 150, 255, 100)   // 蓝色\r\n        ];\r\n        sprite.color = colors[index % colors.length];\r\n        \r\n        // 添加波动动画\r\n        this.startAuroraAnimation(auroraNode);\r\n    }\r\n\r\n    private createAuroraTexture(): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = 40;\r\n        const h = 16;\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        \r\n        // 创建波浪形极光纹理\r\n        for (let y = 0; y < h; y++) {\r\n            for (let x = 0; x < w; x++) {\r\n                const index = (y * w + x) * 4;\r\n                \r\n                // 使用正弦波创建极光形状\r\n                const waveHeight = Math.sin(x * 0.3) * 3 + h / 2;\r\n                const distance = Math.abs(y - waveHeight);\r\n                \r\n                if (distance < 4) {\r\n                    const alpha = Math.max(0, 255 * (1 - distance / 4));\r\n                    data[index] = 255;       // R\r\n                    data[index + 1] = 255;   // G\r\n                    data[index + 2] = 255;   // B\r\n                    data[index + 3] = alpha; // A\r\n                }\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private startAuroraAnimation(auroraNode: Node): void {\r\n        const originalPos = auroraNode.position.clone();\r\n        \r\n        // 缓慢飘动\r\n        tween(auroraNode)\r\n            .repeatForever(\r\n                tween()\r\n                    .to(8 + Math.random() * 4, { \r\n                        position: new Vec3(\r\n                            originalPos.x + (Math.random() - 0.5) * 50,\r\n                            originalPos.y + (Math.random() - 0.5) * 30,\r\n                            0\r\n                        )\r\n                    })\r\n                    .to(8 + Math.random() * 4, { position: originalPos })\r\n            )\r\n            .start();\r\n        \r\n        // 透明度变化\r\n        const sprite = auroraNode.getComponent(Sprite);\r\n        if (sprite) {\r\n            const originalColor = sprite.color.clone();\r\n            tween(sprite)\r\n                .repeatForever(\r\n                    tween()\r\n                        .to(3 + Math.random() * 2, { \r\n                            color: new Color(originalColor.r, originalColor.g, originalColor.b, 50) \r\n                        })\r\n                        .to(3 + Math.random() * 2, { color: originalColor })\r\n                )\r\n                .start();\r\n        }\r\n    }\r\n\r\n    private createIcicleDecorations(transform: UITransform): void {\r\n        // 创建冰柱装饰效果 - 简化实现\r\n        console.log('雪山冰柱装饰 - 基础实现');\r\n        \r\n        for (let i = 0; i < this.icicleCount; i++) {\r\n            this.createSingleIcicle(transform, i);\r\n        }\r\n    }\r\n\r\n    private createSingleIcicle(transform: UITransform, index: number): void {\r\n        const icicleNode = new Node(`Icicle_${index}`);\r\n        icicleNode.setParent(this.node);\r\n        \r\n        // 冰柱位置在屏幕边缘\r\n        const x = (index % 2 === 0) ? \r\n            -transform.width * 0.4 + Math.random() * 50 : \r\n            transform.width * 0.4 - Math.random() * 50;\r\n        const y = (Math.random() - 0.5) * transform.height * 0.6;\r\n        icicleNode.setPosition(x, y, 0);\r\n        \r\n        const icicleTransform = icicleNode.addComponent(UITransform);\r\n        icicleTransform.setContentSize(8, 30);\r\n        icicleTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const sprite = icicleNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = this.createIcicleTexture();\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM;\r\n        sprite.color = new Color(200, 230, 255, 200); // 冰蓝色\r\n    }\r\n\r\n    private createIcicleTexture(): Texture2D {\r\n        const texture = new Texture2D();\r\n        const w = 4;\r\n        const h = 15;\r\n        \r\n        texture.reset({\r\n            width: w,\r\n            height: h,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(w * h * 4);\r\n        \r\n        // 创建锥形冰柱\r\n        for (let y = 0; y < h; y++) {\r\n            for (let x = 0; x < w; x++) {\r\n                const centerX = w / 2;\r\n                const width = (h - y) / h * (w / 2);\r\n                \r\n                if (Math.abs(x - centerX) < width) {\r\n                    const index = (y * w + x) * 4;\r\n                    data[index] = 200;     // R\r\n                    data[index + 1] = 230; // G\r\n                    data[index + 2] = 255; // B\r\n                    data[index + 3] = 255; // A\r\n                }\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private createSnowCat(transform: UITransform): void {\r\n        const catNode = new Node('SnowCat');\r\n        catNode.setParent(this.node);\r\n        \r\n        // 位置：左下角，不干扰游戏区域\r\n        catNode.setPosition(-350, -200, 0);\r\n        catNode.setScale(0.8, 0.8, 1);\r\n        \r\n        const catTransform = catNode.addComponent(UITransform);\r\n        catTransform.setContentSize(64, 64);\r\n        catTransform.setAnchorPoint(0.5, 0.5);\r\n        \r\n        const sprite = catNode.addComponent(Sprite);\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = this.createSnowCatTexture();\r\n        sprite.spriteFrame = spriteFrame;\r\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM;\r\n        sprite.color = Color.WHITE;\r\n        \r\n        // 添加待机动画\r\n        this.startSnowCatAnimation(catNode);\r\n    }\r\n\r\n    private createSnowCatTexture(): Texture2D {\r\n        const texture = new Texture2D();\r\n        const size = 32;\r\n        \r\n        texture.reset({\r\n            width: size,\r\n            height: size,\r\n            format: Texture2D.PixelFormat.RGBA8888\r\n        });\r\n\r\n        const data = new Uint8Array(size * size * 4);\r\n        \r\n        // 简化的雪地猫咪像素艺术（白猫+蓝色装饰）\r\n        for (let y = 0; y < size; y++) {\r\n            for (let x = 0; x < size; x++) {\r\n                const index = (y * size + x) * 4;\r\n                \r\n                // 基础形状：白猫轮廓\r\n                if (this.isInCatShape(x, y, size)) {\r\n                    data[index] = 240;     // R - 近白色\r\n                    data[index + 1] = 248; // G\r\n                    data[index + 2] = 255; // B\r\n                    data[index + 3] = 255; // A\r\n                } else {\r\n                    data[index + 3] = 0; // 透明\r\n                }\r\n            }\r\n        }\r\n\r\n        texture.uploadData(data);\r\n        return texture;\r\n    }\r\n\r\n    private isInCatShape(x: number, y: number, size: number): boolean {\r\n        const centerX = size / 2;\r\n        const centerY = size / 2;\r\n        const dx = x - centerX;\r\n        const dy = y - centerY;\r\n        \r\n        // 简单的椭圆形作为猫咪身体\r\n        const bodyRadius = size * 0.3;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        return distance < bodyRadius;\r\n    }\r\n\r\n    private startSnowCatAnimation(catNode: Node): void {\r\n        // 轻微的上下浮动（在雪地里）\r\n        tween(catNode)\r\n            .repeatForever(\r\n                tween()\r\n                    .to(3, { position: new Vec3(-350, -190, 0) })\r\n                    .to(3, { position: new Vec3(-350, -210, 0) })\r\n            )\r\n            .start();\r\n        \r\n        // 偶尔的抖动（抖掉雪花）\r\n        this.schedule(() => {\r\n            tween(catNode)\r\n                .to(0.1, { scale: new Vec3(0.85, 0.85, 1) })\r\n                .to(0.1, { scale: new Vec3(0.8, 0.8, 1) })\r\n                .to(0.1, { scale: new Vec3(0.85, 0.85, 1) })\r\n                .to(0.1, { scale: new Vec3(0.8, 0.8, 1) })\r\n                .start();\r\n        }, 12 + Math.random() * 8); // 12-20秒随机\r\n    }\r\n\r\n    private mountainNoise(x: number, y: number): number {\r\n        // 雪山专用噪声函数 - 创造尖锐的山峰形状\r\n        let n = Math.sin(x * 5.123 + y * 2.456) * 0.6;\r\n        n += Math.sin(x * 2.789 + y * 4.123) * 0.3;\r\n        n += Math.sin(x * 1.234 + y * 1.789) * 0.1;\r\n        return (n + 1) / 2; // 归一化到0-1\r\n    }\r\n}"]}