{"version":3,"sources":["file:///D:/project/claudecode/wx/Cat_Journey/assets/scripts/gameplay/DifficultySystem.ts"],"names":["DifficultyCalculator","BrickType","calculateDifficulty","level","baseHealth","Math","floor","specialBrickChance","min","harmfulBrickChance","beneficialBrickChance","layoutType","density","gridRows","gridCols","getBrickDistribution","beneficial","types","EXPERIENCE","HEALING","weights","harmful","REGENERATING","PHASE","SHIELD","TELEPORT","reactive","EXPLOSIVE","ELECTRIC","chance","minDistance","selectBrickTypeByWeight","length","NORMAL","totalWeight","reduce","sum","w","random","i","formatConfig","config","toFixed"],"mappings":"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","sourcesContent":["import { BrickType } from \"../core/Brick\";\r\n\r\n/**\r\n * 难度配置接口\r\n */\r\nexport interface DifficultyConfig {\r\n    level: number;                  // 关卡数字 (1-∞)\r\n\r\n    // 砖块属性\r\n    baseHealth: number;             // 基础生命值: 1 + floor(level / 5)\r\n\r\n    // 特殊砖块概率\r\n    specialBrickChance: number;     // 特殊砖块总概率: min(level * 2%, 50%)\r\n    harmfulBrickChance: number;     // 减益砖块概率: min(level * 1.5%, 30%)\r\n    beneficialBrickChance: number;  // 有益砖块概率: 固定5%\r\n\r\n    // 布局参数\r\n    layoutType: 'normal' | 'special'; // level < 10: normal, else: special\r\n    density: number;                  // 砖块密度: 0.6 + min(level * 0.02, 0.3)\r\n\r\n    // 网格尺寸\r\n    gridRows: number;               // 行数\r\n    gridCols: number;               // 列数\r\n}\r\n\r\n/**\r\n * 砖块分布配置\r\n */\r\nexport interface BrickDistribution {\r\n    // 有益砖块类型及权重\r\n    beneficial: {\r\n        types: BrickType[];\r\n        weights: number[];  // 对应types的权重\r\n    };\r\n\r\n    // 减益砖块类型及权重\r\n    harmful: {\r\n        types: BrickType[];\r\n        weights: number[];\r\n    };\r\n\r\n    // 爆炸性砖块类型\r\n    reactive: {\r\n        types: BrickType[];\r\n        chance: number;\r\n        minDistance: number;  // 与其他reactive砖块的最小距离\r\n    };\r\n}\r\n\r\n/**\r\n * 难度计算器 - 根据关卡数字计算难度参数\r\n */\r\nexport class DifficultyCalculator {\r\n    /**\r\n     * 计算指定关卡的难度配置\r\n     * @param level 关卡数字 (1-based)\r\n     */\r\n    public static calculateDifficulty(level: number): DifficultyConfig {\r\n        // 输入验证\r\n        if (level < 1) level = 1;\r\n\r\n        // 基础生命值: 每5关+1\r\n        const baseHealth = 1 + Math.floor(level / 5);\r\n\r\n        // 特殊砖概率: 每关+2%, 上限50%\r\n        const specialBrickChance = Math.min(level * 0.02, 0.5);\r\n\r\n        // 减益砖概率: 每关+1.5%, 上限30%\r\n        const harmfulBrickChance = Math.min(level * 0.015, 0.3);\r\n\r\n        // 有益砖概率: 固定5%\r\n        const beneficialBrickChance = 0.05;\r\n\r\n        // 布局类型: <10关用Normal, >=10关用Special\r\n        const layoutType = level < 10 ? 'normal' : 'special';\r\n\r\n        // 密度: 基础60% + 每关+2%, 上限90%\r\n        const density = 0.6 + Math.min(level * 0.02, 0.3);\r\n\r\n        // 网格尺寸: 根据关卡递增\r\n        let gridRows = 8;\r\n        let gridCols = 12;\r\n\r\n        if (level >= 15) {\r\n            gridRows = 10;\r\n            gridCols = 14;\r\n        } else if (level >= 10) {\r\n            gridRows = 9;\r\n            gridCols = 13;\r\n        }\r\n\r\n        return {\r\n            level,\r\n            baseHealth,\r\n            specialBrickChance,\r\n            harmfulBrickChance,\r\n            beneficialBrickChance,\r\n            layoutType,\r\n            density,\r\n            gridRows,\r\n            gridCols\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取砖块类型分布配置\r\n     */\r\n    public static getBrickDistribution(): BrickDistribution {\r\n        return {\r\n            beneficial: {\r\n                types: [\r\n                    BrickType.EXPERIENCE,  // 经验砖\r\n                    BrickType.HEALING      // 治疗砖\r\n                ],\r\n                weights: [0.7, 0.3]  // 70%经验, 30%治疗\r\n            },\r\n\r\n            harmful: {\r\n                types: [\r\n                    BrickType.REGENERATING,  // 再生砖\r\n                    BrickType.PHASE,         // 相位砖\r\n                    BrickType.SHIELD,        // 护盾砖\r\n                    BrickType.TELEPORT       // 传送砖\r\n                ],\r\n                weights: [0.4, 0.3, 0.2, 0.1]  // 递减权重\r\n            },\r\n\r\n            reactive: {\r\n                types: [\r\n                    BrickType.EXPLOSIVE,  // 爆炸砖\r\n                    BrickType.ELECTRIC    // 电击砖\r\n                ],\r\n                chance: 0.1,        // 10%概率\r\n                minDistance: 2      // 至少间隔2格\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 根据权重随机选择砖块类型\r\n     * @param types 砖块类型数组\r\n     * @param weights 权重数组\r\n     */\r\n    public static selectBrickTypeByWeight(types: BrickType[], weights: number[]): BrickType {\r\n        if (types.length === 0 || types.length !== weights.length) {\r\n            return BrickType.NORMAL;\r\n        }\r\n\r\n        // 计算总权重\r\n        const totalWeight = weights.reduce((sum, w) => sum + w, 0);\r\n\r\n        // 随机值\r\n        let random = Math.random() * totalWeight;\r\n\r\n        // 选择类型\r\n        for (let i = 0; i < types.length; i++) {\r\n            random -= weights[i];\r\n            if (random <= 0) {\r\n                return types[i];\r\n            }\r\n        }\r\n\r\n        // 默认返回第一个\r\n        return types[0];\r\n    }\r\n\r\n    /**\r\n     * 格式化难度配置为可读字符串 (用于DevTools显示)\r\n     */\r\n    public static formatConfig(config: DifficultyConfig): string {\r\n        return `关卡: ${config.level}\r\n基础生命: ${config.baseHealth} HP\r\n特殊砖概率: ${(config.specialBrickChance * 100).toFixed(1)}%\r\n减益砖概率: ${(config.harmfulBrickChance * 100).toFixed(1)}%\r\n有益砖概率: ${(config.beneficialBrickChance * 100).toFixed(1)}%\r\n布局类型: ${config.layoutType === 'normal' ? 'Normal' : 'Special'}\r\n密度: ${(config.density * 100).toFixed(0)}%\r\n网格: ${config.gridRows}行 × ${config.gridCols}列`;\r\n    }\r\n}\r\n"]}